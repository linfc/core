// Do not edit this file. It is auto-generated from org.sireum.core.module.PilarSources
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.core.module

import org.sireum.util._
import org.sireum.pipeline._
import scala.collection.immutable.Seq

object PilarSourcesModule extends PipelineModule {
  def title = "Pilar Source"
  def origin = classOf[PilarSources]

  val sourcesKey = "PilarSources.sources"
  val globalSourcesKey = "Global.sources"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.core.module.PilarSourcesModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if (stage.modules.contains(d)) {
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    return tags
  }

  def outputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if (!(job ? PilarSourcesModule.sourcesKey) && !(job ? PilarSourcesModule.globalSourcesKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'sources'. Expecting (PilarSourcesModule.sourcesKey or PilarSourcesModule.globalSourcesKey)")
    }

    if (job ? PilarSourcesModule.sourcesKey && !job(PilarSourcesModule.sourcesKey).isInstanceOf[scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': Wrong type found for PilarSourcesModule.sourcesKey.  Expecting 'scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]' but found '" +
          job(PilarSourcesModule.sourcesKey).getClass.toString + "'")
    }

    if (job ? PilarSourcesModule.globalSourcesKey && !job(PilarSourcesModule.globalSourcesKey).isInstanceOf[scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': Wrong type found for PilarSourcesModule.globalSourcesKey.  Expecting 'scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]' but found '" +
          job(PilarSourcesModule.globalSourcesKey).getClass.toString + "'")
    }
    return tags
  }

  def getSources(options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]] = {
    if (options.contains(PilarSourcesModule.globalSourcesKey)) {
      return options(PilarSourcesModule.globalSourcesKey).asInstanceOf[scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]]
    }
    if (options.contains(PilarSourcesModule.sourcesKey)) {
      return options(PilarSourcesModule.sourcesKey).asInstanceOf[scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSources(options : MMap[Property.Key, Any], sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]) : MMap[Property.Key, Any] = {

    options(PilarSourcesModule.globalSourcesKey) = sources
    options(sourcesKey) = sources

    return options
  }

  object ConsumerView {
    implicit class PilarSourcesModuleConsumerView(val job : PropertyProvider) extends AnyVal {
      def sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]] = PilarSourcesModule.getSources(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class PilarSourcesModuleProducerView(val job : PropertyProvider) extends AnyVal {

      def sources_=(sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]) { PilarSourcesModule.setSources(job.propertyMap, sources) }
      def sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]] = PilarSourcesModule.getSources(job.propertyMap)
    }
  }
}

trait PilarSourcesModule {
  def job : PipelineJob

  def sources_=(sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]) { PilarSourcesModule.setSources(job.propertyMap, sources) }
  def sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]] = PilarSourcesModule.getSources(job.propertyMap)
}