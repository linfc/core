// Do not edit this file. It is auto-generated from org.sireum.core.module.Ddg
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.core.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.alir.AlirIntraProceduralNode
import org.sireum.alir.ControlFlowGraph
import org.sireum.alir.DataDependenceGraph
import org.sireum.alir.DefRef
import org.sireum.alir.DominanceFrontierGraph
import org.sireum.alir.ImmediateDominatorGraph
import org.sireum.alir.MonotoneDataFlowAnalysisResult
import org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult
import org.sireum.pilar.ast.LocationDecl
import org.sireum.pilar.symbol.ProcedureSymbolTable
import org.sireum.pilar.symbol.SymbolTable
import scala.Function1
import scala.Function2
import scala.Option
import scala.collection.mutable.Map

object DdgModule extends PipelineModule {
  def title = "Data Dependence Graph Builder"
  def origin = classOf[Ddg]

  val poolKey = "Ddg.pool"
  val globalProcedureSymbolTableKey = "Global.procedureSymbolTable"
  val ddgKey = "Ddg.ddg"
  val globalRdaKey = "Global.rda"
  val rdaKey = "Ddg.rda"
  val globalPoolKey = "Global.pool"
  val globalIsInputOutputParamPredicateKey = "Global.isInputOutputParamPredicate"
  val cfgKey = "Ddg.cfg"
  val globalCfgKey = "Global.cfg"
  val globalDefRefKey = "Global.defRef"
  val globalDdgKey = "Global.ddg"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.core.module.DdgModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
    if (!(job ? DdgModule.globalDefRefKey)) {
      val defRef = Class.forName("org.sireum.core.module.Ddg").getDeclaredMethod("$lessinit$greater$default$6").invoke(null).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]
      setDefRef(job.propertyMap, defRef)
    }
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule](CfgModule, CfgModule, RdaModule)
    deps.foreach(d =>
      if (stage.modules.contains(d)) {
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _pool : scala.Option[AnyRef] = None
    var _poolKey : scala.Option[String] = None

    val keylistpool = List(DdgModule.globalPoolKey, CfgModule.poolKey)
    keylistpool.foreach(key =>
      if (job ? key) {
        if (_pool.isEmpty) {
          _pool = Some(job(key))
          _poolKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _pool.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'pool' keys '" + _poolKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _pool match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'pool'.  Expecting 'scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'pool'")
    }
    var _cfg : scala.Option[AnyRef] = None
    var _cfgKey : scala.Option[String] = None

    val keylistcfg = List(DdgModule.globalCfgKey, CfgModule.cfgKey)
    keylistcfg.foreach(key =>
      if (job ? key) {
        if (_cfg.isEmpty) {
          _cfg = Some(job(key))
          _cfgKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _cfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'cfg' keys '" + _cfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _cfg match {
      case Some(x) =>
        if (!x.isInstanceOf[org.sireum.alir.ControlFlowGraph[java.lang.String]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'cfg'.  Expecting 'org.sireum.alir.ControlFlowGraph[java.lang.String]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'cfg'")
    }
    var _defRef : scala.Option[AnyRef] = None
    var _defRefKey : scala.Option[String] = None

    val keylistdefRef = List(DdgModule.globalDefRefKey)
    keylistdefRef.foreach(key =>
      if (job ? key) {
        if (_defRef.isEmpty) {
          _defRef = Some(job(key))
          _defRefKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _defRef.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'defRef' keys '" + _defRefKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _defRef match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'defRef'.  Expecting 'scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'defRef'")
    }
    var _isInputOutputParamPredicate : scala.Option[AnyRef] = None
    var _isInputOutputParamPredicateKey : scala.Option[String] = None

    val keylistisInputOutputParamPredicate = List(DdgModule.globalIsInputOutputParamPredicateKey)
    keylistisInputOutputParamPredicate.foreach(key =>
      if (job ? key) {
        if (_isInputOutputParamPredicate.isEmpty) {
          _isInputOutputParamPredicate = Some(job(key))
          _isInputOutputParamPredicateKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _isInputOutputParamPredicate.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'isInputOutputParamPredicate' keys '" + _isInputOutputParamPredicateKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _isInputOutputParamPredicate match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'isInputOutputParamPredicate'.  Expecting 'scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'isInputOutputParamPredicate'")
    }
    var _procedureSymbolTable : scala.Option[AnyRef] = None
    var _procedureSymbolTableKey : scala.Option[String] = None

    val keylistprocedureSymbolTable = List(DdgModule.globalProcedureSymbolTableKey)
    keylistprocedureSymbolTable.foreach(key =>
      if (job ? key) {
        if (_procedureSymbolTable.isEmpty) {
          _procedureSymbolTable = Some(job(key))
          _procedureSymbolTableKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _procedureSymbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'procedureSymbolTable' keys '" + _procedureSymbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _procedureSymbolTable match {
      case Some(x) =>
        if (!x.isInstanceOf[org.sireum.pilar.symbol.ProcedureSymbolTable]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'procedureSymbolTable'.  Expecting 'org.sireum.pilar.symbol.ProcedureSymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'procedureSymbolTable'")
    }
    var _rda : scala.Option[AnyRef] = None
    var _rdaKey : scala.Option[String] = None

    val keylistrda = List(DdgModule.globalRdaKey, RdaModule.rdaKey)
    keylistrda.foreach(key =>
      if (job ? key) {
        if (_rda.isEmpty) {
          _rda = Some(job(key))
          _rdaKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _rda.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'rda' keys '" + _rdaKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _rda match {
      case Some(x) =>
        if (!x.isInstanceOf[org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'rda'.  Expecting 'org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'rda'")
    }
    return tags
  }

  def outputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if (!(job ? DdgModule.ddgKey) && !(job ? DdgModule.globalDdgKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'ddg'. Expecting (DdgModule.ddgKey or DdgModule.globalDdgKey)")
    }

    if (job ? DdgModule.ddgKey && !job(DdgModule.ddgKey).isInstanceOf[org.sireum.alir.DataDependenceGraph[java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': Wrong type found for DdgModule.ddgKey.  Expecting 'org.sireum.alir.DataDependenceGraph[java.lang.String]' but found '" +
          job(DdgModule.ddgKey).getClass.toString + "'")
    }

    if (job ? DdgModule.globalDdgKey && !job(DdgModule.globalDdgKey).isInstanceOf[org.sireum.alir.DataDependenceGraph[java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': Wrong type found for DdgModule.globalDdgKey.  Expecting 'org.sireum.alir.DataDependenceGraph[java.lang.String]' but found '" +
          job(DdgModule.globalDdgKey).getClass.toString + "'")
    }
    return tags
  }

  def getPool(options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode] = {
    if (options.contains(DdgModule.globalPoolKey)) {
      return options(DdgModule.globalPoolKey).asInstanceOf[scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode]]
    }
    if (options.contains(DdgModule.poolKey)) {
      return options(DdgModule.poolKey).asInstanceOf[scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode]]
    }
    if (options.contains(CfgModule.poolKey)) {
      return options(CfgModule.poolKey).asInstanceOf[scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setPool(options : MMap[Property.Key, Any], pool : scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode]) : MMap[Property.Key, Any] = {

    options(DdgModule.globalPoolKey) = pool
    options(poolKey) = pool

    return options
  }

  def getCfg(options : scala.collection.Map[Property.Key, Any]) : org.sireum.alir.ControlFlowGraph[java.lang.String] = {
    if (options.contains(DdgModule.globalCfgKey)) {
      return options(DdgModule.globalCfgKey).asInstanceOf[org.sireum.alir.ControlFlowGraph[java.lang.String]]
    }
    if (options.contains(DdgModule.cfgKey)) {
      return options(DdgModule.cfgKey).asInstanceOf[org.sireum.alir.ControlFlowGraph[java.lang.String]]
    }
    if (options.contains(CfgModule.cfgKey)) {
      return options(CfgModule.cfgKey).asInstanceOf[org.sireum.alir.ControlFlowGraph[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setCfg(options : MMap[Property.Key, Any], cfg : org.sireum.alir.ControlFlowGraph[java.lang.String]) : MMap[Property.Key, Any] = {

    options(DdgModule.globalCfgKey) = cfg
    options(cfgKey) = cfg

    return options
  }

  def getDefRef(options : scala.collection.Map[Property.Key, Any]) : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = {
    if (options.contains(DdgModule.globalDefRefKey)) {
      return options(DdgModule.globalDefRefKey).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setDefRef(options : MMap[Property.Key, Any], defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]) : MMap[Property.Key, Any] = {

    options(DdgModule.globalDefRefKey) = defRef

    return options
  }

  def getIsInputOutputParamPredicate(options : scala.collection.Map[Property.Key, Any]) : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = {
    if (options.contains(DdgModule.globalIsInputOutputParamPredicateKey)) {
      return options(DdgModule.globalIsInputOutputParamPredicateKey).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setIsInputOutputParamPredicate(options : MMap[Property.Key, Any], isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]) : MMap[Property.Key, Any] = {

    options(DdgModule.globalIsInputOutputParamPredicateKey) = isInputOutputParamPredicate

    return options
  }

  def getDdg(options : scala.collection.Map[Property.Key, Any]) : org.sireum.alir.DataDependenceGraph[java.lang.String] = {
    if (options.contains(DdgModule.globalDdgKey)) {
      return options(DdgModule.globalDdgKey).asInstanceOf[org.sireum.alir.DataDependenceGraph[java.lang.String]]
    }
    if (options.contains(DdgModule.ddgKey)) {
      return options(DdgModule.ddgKey).asInstanceOf[org.sireum.alir.DataDependenceGraph[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setDdg(options : MMap[Property.Key, Any], ddg : org.sireum.alir.DataDependenceGraph[java.lang.String]) : MMap[Property.Key, Any] = {

    options(DdgModule.globalDdgKey) = ddg
    options(ddgKey) = ddg

    return options
  }

  def getProcedureSymbolTable(options : scala.collection.Map[Property.Key, Any]) : org.sireum.pilar.symbol.ProcedureSymbolTable = {
    if (options.contains(DdgModule.globalProcedureSymbolTableKey)) {
      return options(DdgModule.globalProcedureSymbolTableKey).asInstanceOf[org.sireum.pilar.symbol.ProcedureSymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setProcedureSymbolTable(options : MMap[Property.Key, Any], procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable) : MMap[Property.Key, Any] = {

    options(DdgModule.globalProcedureSymbolTableKey) = procedureSymbolTable

    return options
  }

  def getRda(options : scala.collection.Map[Property.Key, Any]) : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]] = {
    if (options.contains(DdgModule.globalRdaKey)) {
      return options(DdgModule.globalRdaKey).asInstanceOf[org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]
    }
    if (options.contains(DdgModule.rdaKey)) {
      return options(DdgModule.rdaKey).asInstanceOf[org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]
    }
    if (options.contains(RdaModule.rdaKey)) {
      return options(RdaModule.rdaKey).asInstanceOf[org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setRda(options : MMap[Property.Key, Any], rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]) : MMap[Property.Key, Any] = {

    options(DdgModule.globalRdaKey) = rda
    options(rdaKey) = rda

    return options
  }

  object ConsumerView {
    implicit class DdgModuleConsumerView(val job : PropertyProvider) extends AnyVal {
      def pool : scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode] = DdgModule.getPool(job.propertyMap)
      def cfg : org.sireum.alir.ControlFlowGraph[java.lang.String] = DdgModule.getCfg(job.propertyMap)
      def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = DdgModule.getDefRef(job.propertyMap)
      def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = DdgModule.getIsInputOutputParamPredicate(job.propertyMap)
      def ddg : org.sireum.alir.DataDependenceGraph[java.lang.String] = DdgModule.getDdg(job.propertyMap)
      def procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable = DdgModule.getProcedureSymbolTable(job.propertyMap)
      def rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]] = DdgModule.getRda(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class DdgModuleProducerView(val job : PropertyProvider) extends AnyVal {

      def pool_=(pool : scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode]) { DdgModule.setPool(job.propertyMap, pool) }
      def pool : scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode] = DdgModule.getPool(job.propertyMap)

      def cfg_=(cfg : org.sireum.alir.ControlFlowGraph[java.lang.String]) { DdgModule.setCfg(job.propertyMap, cfg) }
      def cfg : org.sireum.alir.ControlFlowGraph[java.lang.String] = DdgModule.getCfg(job.propertyMap)

      def defRef_=(defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]) { DdgModule.setDefRef(job.propertyMap, defRef) }
      def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = DdgModule.getDefRef(job.propertyMap)

      def isInputOutputParamPredicate_=(isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]) { DdgModule.setIsInputOutputParamPredicate(job.propertyMap, isInputOutputParamPredicate) }
      def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = DdgModule.getIsInputOutputParamPredicate(job.propertyMap)

      def ddg_=(ddg : org.sireum.alir.DataDependenceGraph[java.lang.String]) { DdgModule.setDdg(job.propertyMap, ddg) }
      def ddg : org.sireum.alir.DataDependenceGraph[java.lang.String] = DdgModule.getDdg(job.propertyMap)

      def procedureSymbolTable_=(procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable) { DdgModule.setProcedureSymbolTable(job.propertyMap, procedureSymbolTable) }
      def procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable = DdgModule.getProcedureSymbolTable(job.propertyMap)

      def rda_=(rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]) { DdgModule.setRda(job.propertyMap, rda) }
      def rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]] = DdgModule.getRda(job.propertyMap)
    }
  }
}

trait DdgModule {
  def job : PipelineJob

  def pool : scala.collection.mutable.Map[org.sireum.alir.AlirIntraProceduralNode, org.sireum.alir.AlirIntraProceduralNode] = DdgModule.getPool(job.propertyMap)

  def cfg : org.sireum.alir.ControlFlowGraph[java.lang.String] = DdgModule.getCfg(job.propertyMap)

  def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = DdgModule.getDefRef(job.propertyMap)

  def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = DdgModule.getIsInputOutputParamPredicate(job.propertyMap)

  def ddg_=(ddg : org.sireum.alir.DataDependenceGraph[java.lang.String]) { DdgModule.setDdg(job.propertyMap, ddg) }
  def ddg : org.sireum.alir.DataDependenceGraph[java.lang.String] = DdgModule.getDdg(job.propertyMap)

  def procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable = DdgModule.getProcedureSymbolTable(job.propertyMap)

  def rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]] = DdgModule.getRda(job.propertyMap)
}