// Do not edit this file. It is auto-generated from org.sireum.core.module.AlirIntraProcedural
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.core.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.alir.DefRef
import org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult
import org.sireum.pilar.ast.LocationDecl
import org.sireum.pilar.symbol.ProcedureSymbolTable
import org.sireum.pilar.symbol.SymbolTable
import scala.Function1
import scala.Function2
import scala.Option
import scala.collection.mutable.Map

object AlirIntraProceduralModule extends PipelineModule {
  def title = "Alir Intraprocedural Module"
  def origin = classOf[AlirIntraProcedural]

  val globalParallelKey = "Global.parallel"
  val globalShouldBuildCdgKey = "Global.shouldBuildCdg"
  val globalShouldBuildPdgKey = "Global.shouldBuildPdg"
  val globalShouldBuildDdgKey = "Global.shouldBuildDdg"
  val globalShouldBuildIdgKey = "Global.shouldBuildIdg"
  val globalShouldBuildDfgKey = "Global.shouldBuildDfg"
  val globalIsInputOutputParamPredicateKey = "Global.isInputOutputParamPredicate"
  val globalResultKey = "Global.result"
  val globalShouldIncludeFlowFunctionKey = "Global.shouldIncludeFlowFunction"
  val globalShouldBuildCfgKey = "Global.shouldBuildCfg"
  val globalSymbolTableKey = "Global.symbolTable"
  val globalShouldBuildRdaKey = "Global.shouldBuildRda"
  val globalProcedureAbsUriIteratorKey = "Global.procedureAbsUriIterator"
  val globalSwitchAsOrderedMatchKey = "Global.switchAsOrderedMatch"
  val globalDefRefKey = "Global.defRef"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.core.module.AlirIntraProceduralModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
    if (!(job ? AlirIntraProceduralModule.globalShouldIncludeFlowFunctionKey)) {
      val shouldIncludeFlowFunction = Class.forName("org.sireum.core.module.AlirIntraProcedural").getDeclaredMethod("$lessinit$greater$default$11").invoke(null).asInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]
      setShouldIncludeFlowFunction(job.propertyMap, shouldIncludeFlowFunction)
    }

    if (!(job ? AlirIntraProceduralModule.globalDefRefKey)) {
      val defRef = Class.forName("org.sireum.core.module.AlirIntraProcedural").getDeclaredMethod("$lessinit$greater$default$12").invoke(null).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]
      setDefRef(job.propertyMap, defRef)
    }

    if (!(job ? AlirIntraProceduralModule.globalIsInputOutputParamPredicateKey)) {
      val isInputOutputParamPredicate = Class.forName("org.sireum.core.module.AlirIntraProcedural").getDeclaredMethod("$lessinit$greater$default$13").invoke(null).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]]
      setIsInputOutputParamPredicate(job.propertyMap, isInputOutputParamPredicate)
    }

    if (!(job ? AlirIntraProceduralModule.globalSwitchAsOrderedMatchKey)) {
      val switchAsOrderedMatch = Class.forName("org.sireum.core.module.AlirIntraProcedural").getDeclaredMethod("$lessinit$greater$default$14").invoke(null).asInstanceOf[scala.Boolean]
      setSwitchAsOrderedMatch(job.propertyMap, switchAsOrderedMatch)
    }

    if (!(job ? AlirIntraProceduralModule.globalProcedureAbsUriIteratorKey)) {
      val procedureAbsUriIterator = Class.forName("org.sireum.core.module.AlirIntraProcedural").getDeclaredMethod("$lessinit$greater$default$15").invoke(null).asInstanceOf[scala.Option[scala.collection.Iterator[java.lang.String]]]
      setProcedureAbsUriIterator(job.propertyMap, procedureAbsUriIterator)
    }
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if (stage.modules.contains(d)) {
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _parallel : scala.Option[AnyRef] = None
    var _parallelKey : scala.Option[String] = None

    val keylistparallel = List(AlirIntraProceduralModule.globalParallelKey)
    keylistparallel.foreach(key =>
      if (job ? key) {
        if (_parallel.isEmpty) {
          _parallel = Some(job(key))
          _parallelKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _parallel.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'parallel' keys '" + _parallelKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _parallel match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'parallel'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'parallel'")
    }
    var _symbolTable : scala.Option[AnyRef] = None
    var _symbolTableKey : scala.Option[String] = None

    val keylistsymbolTable = List(AlirIntraProceduralModule.globalSymbolTableKey)
    keylistsymbolTable.foreach(key =>
      if (job ? key) {
        if (_symbolTable.isEmpty) {
          _symbolTable = Some(job(key))
          _symbolTableKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _symbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'symbolTable' keys '" + _symbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _symbolTable match {
      case Some(x) =>
        if (!x.isInstanceOf[org.sireum.pilar.symbol.SymbolTable]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'symbolTable'.  Expecting 'org.sireum.pilar.symbol.SymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'symbolTable'")
    }
    var _shouldBuildCfg : scala.Option[AnyRef] = None
    var _shouldBuildCfgKey : scala.Option[String] = None

    val keylistshouldBuildCfg = List(AlirIntraProceduralModule.globalShouldBuildCfgKey)
    keylistshouldBuildCfg.foreach(key =>
      if (job ? key) {
        if (_shouldBuildCfg.isEmpty) {
          _shouldBuildCfg = Some(job(key))
          _shouldBuildCfgKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _shouldBuildCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildCfg' keys '" + _shouldBuildCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildCfg match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildCfg'")
    }
    var _shouldBuildIdg : scala.Option[AnyRef] = None
    var _shouldBuildIdgKey : scala.Option[String] = None

    val keylistshouldBuildIdg = List(AlirIntraProceduralModule.globalShouldBuildIdgKey)
    keylistshouldBuildIdg.foreach(key =>
      if (job ? key) {
        if (_shouldBuildIdg.isEmpty) {
          _shouldBuildIdg = Some(job(key))
          _shouldBuildIdgKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _shouldBuildIdg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildIdg' keys '" + _shouldBuildIdgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildIdg match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildIdg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildIdg'")
    }
    var _shouldBuildDfg : scala.Option[AnyRef] = None
    var _shouldBuildDfgKey : scala.Option[String] = None

    val keylistshouldBuildDfg = List(AlirIntraProceduralModule.globalShouldBuildDfgKey)
    keylistshouldBuildDfg.foreach(key =>
      if (job ? key) {
        if (_shouldBuildDfg.isEmpty) {
          _shouldBuildDfg = Some(job(key))
          _shouldBuildDfgKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _shouldBuildDfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildDfg' keys '" + _shouldBuildDfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildDfg match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildDfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildDfg'")
    }
    var _shouldBuildCdg : scala.Option[AnyRef] = None
    var _shouldBuildCdgKey : scala.Option[String] = None

    val keylistshouldBuildCdg = List(AlirIntraProceduralModule.globalShouldBuildCdgKey)
    keylistshouldBuildCdg.foreach(key =>
      if (job ? key) {
        if (_shouldBuildCdg.isEmpty) {
          _shouldBuildCdg = Some(job(key))
          _shouldBuildCdgKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _shouldBuildCdg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildCdg' keys '" + _shouldBuildCdgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildCdg match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildCdg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildCdg'")
    }
    var _shouldBuildRda : scala.Option[AnyRef] = None
    var _shouldBuildRdaKey : scala.Option[String] = None

    val keylistshouldBuildRda = List(AlirIntraProceduralModule.globalShouldBuildRdaKey)
    keylistshouldBuildRda.foreach(key =>
      if (job ? key) {
        if (_shouldBuildRda.isEmpty) {
          _shouldBuildRda = Some(job(key))
          _shouldBuildRdaKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _shouldBuildRda.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildRda' keys '" + _shouldBuildRdaKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildRda match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildRda'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildRda'")
    }
    var _shouldBuildDdg : scala.Option[AnyRef] = None
    var _shouldBuildDdgKey : scala.Option[String] = None

    val keylistshouldBuildDdg = List(AlirIntraProceduralModule.globalShouldBuildDdgKey)
    keylistshouldBuildDdg.foreach(key =>
      if (job ? key) {
        if (_shouldBuildDdg.isEmpty) {
          _shouldBuildDdg = Some(job(key))
          _shouldBuildDdgKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _shouldBuildDdg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildDdg' keys '" + _shouldBuildDdgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildDdg match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildDdg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildDdg'")
    }
    var _shouldBuildPdg : scala.Option[AnyRef] = None
    var _shouldBuildPdgKey : scala.Option[String] = None

    val keylistshouldBuildPdg = List(AlirIntraProceduralModule.globalShouldBuildPdgKey)
    keylistshouldBuildPdg.foreach(key =>
      if (job ? key) {
        if (_shouldBuildPdg.isEmpty) {
          _shouldBuildPdg = Some(job(key))
          _shouldBuildPdgKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _shouldBuildPdg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildPdg' keys '" + _shouldBuildPdgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildPdg match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildPdg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildPdg'")
    }
    var _shouldIncludeFlowFunction : scala.Option[AnyRef] = None
    var _shouldIncludeFlowFunctionKey : scala.Option[String] = None

    val keylistshouldIncludeFlowFunction = List(AlirIntraProceduralModule.globalShouldIncludeFlowFunctionKey)
    keylistshouldIncludeFlowFunction.foreach(key =>
      if (job ? key) {
        if (_shouldIncludeFlowFunction.isEmpty) {
          _shouldIncludeFlowFunction = Some(job(key))
          _shouldIncludeFlowFunctionKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _shouldIncludeFlowFunction.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldIncludeFlowFunction' keys '" + _shouldIncludeFlowFunctionKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldIncludeFlowFunction match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldIncludeFlowFunction'.  Expecting 'scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldIncludeFlowFunction'")
    }
    var _defRef : scala.Option[AnyRef] = None
    var _defRefKey : scala.Option[String] = None

    val keylistdefRef = List(AlirIntraProceduralModule.globalDefRefKey)
    keylistdefRef.foreach(key =>
      if (job ? key) {
        if (_defRef.isEmpty) {
          _defRef = Some(job(key))
          _defRefKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _defRef.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'defRef' keys '" + _defRefKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _defRef match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'defRef'.  Expecting 'scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'defRef'")
    }
    var _isInputOutputParamPredicate : scala.Option[AnyRef] = None
    var _isInputOutputParamPredicateKey : scala.Option[String] = None

    val keylistisInputOutputParamPredicate = List(AlirIntraProceduralModule.globalIsInputOutputParamPredicateKey)
    keylistisInputOutputParamPredicate.foreach(key =>
      if (job ? key) {
        if (_isInputOutputParamPredicate.isEmpty) {
          _isInputOutputParamPredicate = Some(job(key))
          _isInputOutputParamPredicateKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _isInputOutputParamPredicate.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'isInputOutputParamPredicate' keys '" + _isInputOutputParamPredicateKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _isInputOutputParamPredicate match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'isInputOutputParamPredicate'.  Expecting 'scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'isInputOutputParamPredicate'")
    }
    var _switchAsOrderedMatch : scala.Option[AnyRef] = None
    var _switchAsOrderedMatchKey : scala.Option[String] = None

    val keylistswitchAsOrderedMatch = List(AlirIntraProceduralModule.globalSwitchAsOrderedMatchKey)
    keylistswitchAsOrderedMatch.foreach(key =>
      if (job ? key) {
        if (_switchAsOrderedMatch.isEmpty) {
          _switchAsOrderedMatch = Some(job(key))
          _switchAsOrderedMatchKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _switchAsOrderedMatch.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'switchAsOrderedMatch' keys '" + _switchAsOrderedMatchKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _switchAsOrderedMatch match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Boolean]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'switchAsOrderedMatch'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'switchAsOrderedMatch'")
    }
    var _procedureAbsUriIterator : scala.Option[AnyRef] = None
    var _procedureAbsUriIteratorKey : scala.Option[String] = None

    val keylistprocedureAbsUriIterator = List(AlirIntraProceduralModule.globalProcedureAbsUriIteratorKey)
    keylistprocedureAbsUriIterator.foreach(key =>
      if (job ? key) {
        if (_procedureAbsUriIterator.isEmpty) {
          _procedureAbsUriIterator = Some(job(key))
          _procedureAbsUriIteratorKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _procedureAbsUriIterator.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'procedureAbsUriIterator' keys '" + _procedureAbsUriIteratorKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _procedureAbsUriIterator match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.Option[scala.collection.Iterator[java.lang.String]]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'procedureAbsUriIterator'.  Expecting 'scala.Option[scala.collection.Iterator[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'procedureAbsUriIterator'")
    }
    return tags
  }

  def outputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if (!(job ? AlirIntraProceduralModule.globalResultKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'result'. Expecting (AlirIntraProceduralModule.globalResultKey)")
    }

    if (job ? AlirIntraProceduralModule.globalResultKey && !job(AlirIntraProceduralModule.globalResultKey).isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': Wrong type found for AlirIntraProceduralModule.globalResultKey.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult]' but found '" +
          job(AlirIntraProceduralModule.globalResultKey).getClass.toString + "'")
    }
    return tags
  }

  def getResult(options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult] = {
    if (options.contains(AlirIntraProceduralModule.globalResultKey)) {
      return options(AlirIntraProceduralModule.globalResultKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setResult(options : MMap[Property.Key, Any], result : scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult]) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalResultKey) = result

    return options
  }

  def getParallel(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalParallelKey)) {
      return options(AlirIntraProceduralModule.globalParallelKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setParallel(options : MMap[Property.Key, Any], parallel : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalParallelKey) = parallel

    return options
  }

  def getSymbolTable(options : scala.collection.Map[Property.Key, Any]) : org.sireum.pilar.symbol.SymbolTable = {
    if (options.contains(AlirIntraProceduralModule.globalSymbolTableKey)) {
      return options(AlirIntraProceduralModule.globalSymbolTableKey).asInstanceOf[org.sireum.pilar.symbol.SymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSymbolTable(options : MMap[Property.Key, Any], symbolTable : org.sireum.pilar.symbol.SymbolTable) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalSymbolTableKey) = symbolTable

    return options
  }

  def getShouldBuildCfg(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalShouldBuildCfgKey)) {
      return options(AlirIntraProceduralModule.globalShouldBuildCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildCfg(options : MMap[Property.Key, Any], shouldBuildCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalShouldBuildCfgKey) = shouldBuildCfg

    return options
  }

  def getShouldBuildIdg(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalShouldBuildIdgKey)) {
      return options(AlirIntraProceduralModule.globalShouldBuildIdgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildIdg(options : MMap[Property.Key, Any], shouldBuildIdg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalShouldBuildIdgKey) = shouldBuildIdg

    return options
  }

  def getShouldBuildDfg(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalShouldBuildDfgKey)) {
      return options(AlirIntraProceduralModule.globalShouldBuildDfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildDfg(options : MMap[Property.Key, Any], shouldBuildDfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalShouldBuildDfgKey) = shouldBuildDfg

    return options
  }

  def getShouldBuildCdg(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalShouldBuildCdgKey)) {
      return options(AlirIntraProceduralModule.globalShouldBuildCdgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildCdg(options : MMap[Property.Key, Any], shouldBuildCdg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalShouldBuildCdgKey) = shouldBuildCdg

    return options
  }

  def getShouldBuildRda(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalShouldBuildRdaKey)) {
      return options(AlirIntraProceduralModule.globalShouldBuildRdaKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildRda(options : MMap[Property.Key, Any], shouldBuildRda : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalShouldBuildRdaKey) = shouldBuildRda

    return options
  }

  def getShouldBuildDdg(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalShouldBuildDdgKey)) {
      return options(AlirIntraProceduralModule.globalShouldBuildDdgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildDdg(options : MMap[Property.Key, Any], shouldBuildDdg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalShouldBuildDdgKey) = shouldBuildDdg

    return options
  }

  def getShouldBuildPdg(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalShouldBuildPdgKey)) {
      return options(AlirIntraProceduralModule.globalShouldBuildPdgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildPdg(options : MMap[Property.Key, Any], shouldBuildPdg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalShouldBuildPdgKey) = shouldBuildPdg

    return options
  }

  def getShouldIncludeFlowFunction(options : scala.collection.Map[Property.Key, Any]) : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = {
    if (options.contains(AlirIntraProceduralModule.globalShouldIncludeFlowFunctionKey)) {
      return options(AlirIntraProceduralModule.globalShouldIncludeFlowFunctionKey).asInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldIncludeFlowFunction(options : MMap[Property.Key, Any], shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalShouldIncludeFlowFunctionKey) = shouldIncludeFlowFunction

    return options
  }

  def getDefRef(options : scala.collection.Map[Property.Key, Any]) : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = {
    if (options.contains(AlirIntraProceduralModule.globalDefRefKey)) {
      return options(AlirIntraProceduralModule.globalDefRefKey).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setDefRef(options : MMap[Property.Key, Any], defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalDefRefKey) = defRef

    return options
  }

  def getIsInputOutputParamPredicate(options : scala.collection.Map[Property.Key, Any]) : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = {
    if (options.contains(AlirIntraProceduralModule.globalIsInputOutputParamPredicateKey)) {
      return options(AlirIntraProceduralModule.globalIsInputOutputParamPredicateKey).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setIsInputOutputParamPredicate(options : MMap[Property.Key, Any], isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalIsInputOutputParamPredicateKey) = isInputOutputParamPredicate

    return options
  }

  def getSwitchAsOrderedMatch(options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AlirIntraProceduralModule.globalSwitchAsOrderedMatchKey)) {
      return options(AlirIntraProceduralModule.globalSwitchAsOrderedMatchKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSwitchAsOrderedMatch(options : MMap[Property.Key, Any], switchAsOrderedMatch : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalSwitchAsOrderedMatchKey) = switchAsOrderedMatch

    return options
  }

  def getProcedureAbsUriIterator(options : scala.collection.Map[Property.Key, Any]) : scala.Option[scala.collection.Iterator[java.lang.String]] = {
    if (options.contains(AlirIntraProceduralModule.globalProcedureAbsUriIteratorKey)) {
      return options(AlirIntraProceduralModule.globalProcedureAbsUriIteratorKey).asInstanceOf[scala.Option[scala.collection.Iterator[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setProcedureAbsUriIterator(options : MMap[Property.Key, Any], procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(AlirIntraProceduralModule.globalProcedureAbsUriIteratorKey) = procedureAbsUriIterator

    return options
  }

  object ConsumerView {
    implicit class AlirIntraProceduralModuleConsumerView(val job : PropertyProvider) extends AnyVal {
      def result : scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult] = AlirIntraProceduralModule.getResult(job.propertyMap)
      def parallel : scala.Boolean = AlirIntraProceduralModule.getParallel(job.propertyMap)
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AlirIntraProceduralModule.getSymbolTable(job.propertyMap)
      def shouldBuildCfg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildCfg(job.propertyMap)
      def shouldBuildIdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildIdg(job.propertyMap)
      def shouldBuildDfg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildDfg(job.propertyMap)
      def shouldBuildCdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildCdg(job.propertyMap)
      def shouldBuildRda : scala.Boolean = AlirIntraProceduralModule.getShouldBuildRda(job.propertyMap)
      def shouldBuildDdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildDdg(job.propertyMap)
      def shouldBuildPdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildPdg(job.propertyMap)
      def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AlirIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)
      def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = AlirIntraProceduralModule.getDefRef(job.propertyMap)
      def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = AlirIntraProceduralModule.getIsInputOutputParamPredicate(job.propertyMap)
      def switchAsOrderedMatch : scala.Boolean = AlirIntraProceduralModule.getSwitchAsOrderedMatch(job.propertyMap)
      def procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]] = AlirIntraProceduralModule.getProcedureAbsUriIterator(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class AlirIntraProceduralModuleProducerView(val job : PropertyProvider) extends AnyVal {

      def result_=(result : scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult]) { AlirIntraProceduralModule.setResult(job.propertyMap, result) }
      def result : scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult] = AlirIntraProceduralModule.getResult(job.propertyMap)

      def parallel_=(parallel : scala.Boolean) { AlirIntraProceduralModule.setParallel(job.propertyMap, parallel) }
      def parallel : scala.Boolean = AlirIntraProceduralModule.getParallel(job.propertyMap)

      def symbolTable_=(symbolTable : org.sireum.pilar.symbol.SymbolTable) { AlirIntraProceduralModule.setSymbolTable(job.propertyMap, symbolTable) }
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AlirIntraProceduralModule.getSymbolTable(job.propertyMap)

      def shouldBuildCfg_=(shouldBuildCfg : scala.Boolean) { AlirIntraProceduralModule.setShouldBuildCfg(job.propertyMap, shouldBuildCfg) }
      def shouldBuildCfg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildCfg(job.propertyMap)

      def shouldBuildIdg_=(shouldBuildIdg : scala.Boolean) { AlirIntraProceduralModule.setShouldBuildIdg(job.propertyMap, shouldBuildIdg) }
      def shouldBuildIdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildIdg(job.propertyMap)

      def shouldBuildDfg_=(shouldBuildDfg : scala.Boolean) { AlirIntraProceduralModule.setShouldBuildDfg(job.propertyMap, shouldBuildDfg) }
      def shouldBuildDfg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildDfg(job.propertyMap)

      def shouldBuildCdg_=(shouldBuildCdg : scala.Boolean) { AlirIntraProceduralModule.setShouldBuildCdg(job.propertyMap, shouldBuildCdg) }
      def shouldBuildCdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildCdg(job.propertyMap)

      def shouldBuildRda_=(shouldBuildRda : scala.Boolean) { AlirIntraProceduralModule.setShouldBuildRda(job.propertyMap, shouldBuildRda) }
      def shouldBuildRda : scala.Boolean = AlirIntraProceduralModule.getShouldBuildRda(job.propertyMap)

      def shouldBuildDdg_=(shouldBuildDdg : scala.Boolean) { AlirIntraProceduralModule.setShouldBuildDdg(job.propertyMap, shouldBuildDdg) }
      def shouldBuildDdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildDdg(job.propertyMap)

      def shouldBuildPdg_=(shouldBuildPdg : scala.Boolean) { AlirIntraProceduralModule.setShouldBuildPdg(job.propertyMap, shouldBuildPdg) }
      def shouldBuildPdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildPdg(job.propertyMap)

      def shouldIncludeFlowFunction_=(shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]) { AlirIntraProceduralModule.setShouldIncludeFlowFunction(job.propertyMap, shouldIncludeFlowFunction) }
      def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AlirIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)

      def defRef_=(defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]) { AlirIntraProceduralModule.setDefRef(job.propertyMap, defRef) }
      def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = AlirIntraProceduralModule.getDefRef(job.propertyMap)

      def isInputOutputParamPredicate_=(isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]) { AlirIntraProceduralModule.setIsInputOutputParamPredicate(job.propertyMap, isInputOutputParamPredicate) }
      def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = AlirIntraProceduralModule.getIsInputOutputParamPredicate(job.propertyMap)

      def switchAsOrderedMatch_=(switchAsOrderedMatch : scala.Boolean) { AlirIntraProceduralModule.setSwitchAsOrderedMatch(job.propertyMap, switchAsOrderedMatch) }
      def switchAsOrderedMatch : scala.Boolean = AlirIntraProceduralModule.getSwitchAsOrderedMatch(job.propertyMap)

      def procedureAbsUriIterator_=(procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]]) { AlirIntraProceduralModule.setProcedureAbsUriIterator(job.propertyMap, procedureAbsUriIterator) }
      def procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]] = AlirIntraProceduralModule.getProcedureAbsUriIterator(job.propertyMap)
    }
  }
}

trait AlirIntraProceduralModule {
  def job : PipelineJob

  def result_=(result : scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult]) { AlirIntraProceduralModule.setResult(job.propertyMap, result) }
  def result : scala.collection.mutable.Map[java.lang.String, org.sireum.core.module.AlirIntraProcedural.AlirIntraproceduralAnalysisResult] = AlirIntraProceduralModule.getResult(job.propertyMap)

  def parallel : scala.Boolean = AlirIntraProceduralModule.getParallel(job.propertyMap)

  def symbolTable : org.sireum.pilar.symbol.SymbolTable = AlirIntraProceduralModule.getSymbolTable(job.propertyMap)

  def shouldBuildCfg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildCfg(job.propertyMap)

  def shouldBuildIdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildIdg(job.propertyMap)

  def shouldBuildDfg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildDfg(job.propertyMap)

  def shouldBuildCdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildCdg(job.propertyMap)

  def shouldBuildRda : scala.Boolean = AlirIntraProceduralModule.getShouldBuildRda(job.propertyMap)

  def shouldBuildDdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildDdg(job.propertyMap)

  def shouldBuildPdg : scala.Boolean = AlirIntraProceduralModule.getShouldBuildPdg(job.propertyMap)

  def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AlirIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)

  def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = AlirIntraProceduralModule.getDefRef(job.propertyMap)

  def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = AlirIntraProceduralModule.getIsInputOutputParamPredicate(job.propertyMap)

  def switchAsOrderedMatch : scala.Boolean = AlirIntraProceduralModule.getSwitchAsOrderedMatch(job.propertyMap)

  def procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]] = AlirIntraProceduralModule.getProcedureAbsUriIterator(job.propertyMap)
}