// Do not edit this file. It is auto-generated from org.sireum.core.module.Bogor
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.core.module

import org.sireum.util._
import org.sireum.pipeline._
import org.sireum.core.module.BogorFactory
import org.sireum.pilar.ast.Model
import org.sireum.pilar.symbol.SymbolTable
import scala.Option
import scala.collection.immutable.Seq

object BogorModule extends PipelineModule {
  def title = "Bogor"
  def origin = classOf[Bogor]

  val globalFactoryKey = "Global.factory"
  val globalModelsKey = "Global.models"
  val modelsKey = "Bogor.models"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.core.module.BogorModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule](PilarSymbolResolverModule)
    deps.foreach(d =>
      if (stage.modules.contains(d)) {
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _factory : scala.Option[AnyRef] = None
    var _factoryKey : scala.Option[String] = None

    val keylistfactory = List(BogorModule.globalFactoryKey)
    keylistfactory.foreach(key =>
      if (job ? key) {
        if (_factory.isEmpty) {
          _factory = Some(job(key))
          _factoryKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _factory.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'factory' keys '" + _factoryKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _factory match {
      case Some(x) =>
        if (!x.isInstanceOf[org.sireum.core.module.BogorFactory]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'factory'.  Expecting 'org.sireum.core.module.BogorFactory' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'factory'")
    }
    var _models : scala.Option[AnyRef] = None
    var _modelsKey : scala.Option[String] = None

    val keylistmodels = List(BogorModule.globalModelsKey, PilarSymbolResolverModule.modelsKey)
    keylistmodels.foreach(key =>
      if (job ? key) {
        if (_models.isEmpty) {
          _models = Some(job(key))
          _modelsKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _models.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'models' keys '" + _modelsKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _models match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'models'.  Expecting 'scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'models'")
    }
    return tags
  }

  def outputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    return tags
  }

  def getFactory(options : scala.collection.Map[Property.Key, Any]) : org.sireum.core.module.BogorFactory = {
    if (options.contains(BogorModule.globalFactoryKey)) {
      return options(BogorModule.globalFactoryKey).asInstanceOf[org.sireum.core.module.BogorFactory]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setFactory(options : MMap[Property.Key, Any], factory : org.sireum.core.module.BogorFactory) : MMap[Property.Key, Any] = {

    options(BogorModule.globalFactoryKey) = factory

    return options
  }

  def getModels(options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = {
    if (options.contains(BogorModule.globalModelsKey)) {
      return options(BogorModule.globalModelsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]
    }
    if (options.contains(BogorModule.modelsKey)) {
      return options(BogorModule.modelsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]
    }
    if (options.contains(PilarSymbolResolverModule.modelsKey)) {
      return options(PilarSymbolResolverModule.modelsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setModels(options : MMap[Property.Key, Any], models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) : MMap[Property.Key, Any] = {

    options(BogorModule.globalModelsKey) = models
    options(modelsKey) = models

    return options
  }

  object ConsumerView {
    implicit class BogorModuleConsumerView(val job : PropertyProvider) extends AnyVal {
      def factory : org.sireum.core.module.BogorFactory = BogorModule.getFactory(job.propertyMap)
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BogorModule.getModels(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class BogorModuleProducerView(val job : PropertyProvider) extends AnyVal {

      def factory_=(factory : org.sireum.core.module.BogorFactory) { BogorModule.setFactory(job.propertyMap, factory) }
      def factory : org.sireum.core.module.BogorFactory = BogorModule.getFactory(job.propertyMap)

      def models_=(models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) { BogorModule.setModels(job.propertyMap, models) }
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BogorModule.getModels(job.propertyMap)
    }
  }
}

trait BogorModule {
  def job : PipelineJob

  def factory : org.sireum.core.module.BogorFactory = BogorModule.getFactory(job.propertyMap)

  def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BogorModule.getModels(job.propertyMap)
}