// Do not edit this file. It is auto-generated from org.sireum.core.module.ChunkingPilarParser
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.core.module

import org.sireum.util._
import org.sireum.pipeline._
import org.sireum.pilar.ast.Model
import scala.collection.immutable.Seq

object ChunkingPilarParserModule extends PipelineModule {
  def title = "Pilar Parser"
  def origin = classOf[ChunkingPilarParser]

  val sourcesKey = "ChunkingPilarParser.sources"
  val modelsKey = "ChunkingPilarParser.models"
  val globalModelsKey = "Global.models"
  val globalSourcesKey = "Global.sources"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.core.module.ChunkingPilarParserModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule](PilarSourcesModule)
    deps.foreach(d =>
      if (stage.modules.contains(d)) {
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _sources : scala.Option[AnyRef] = None
    var _sourcesKey : scala.Option[String] = None

    val keylistsources = List(ChunkingPilarParserModule.globalSourcesKey, PilarSourcesModule.sourcesKey)
    keylistsources.foreach(key =>
      if (job ? key) {
        if (_sources.isEmpty) {
          _sources = Some(job(key))
          _sourcesKey = Some(key)
        }
        if (!(job(key).asInstanceOf[AnyRef] eq _sources.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'sources' keys '" + _sourcesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _sources match {
      case Some(x) =>
        if (!x.isInstanceOf[scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]]) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'sources'.  Expecting 'scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'sources'")
    }
    return tags
  }

  def outputDefined(job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if (!(job ? ChunkingPilarParserModule.modelsKey) && !(job ? ChunkingPilarParserModule.globalModelsKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'models'. Expecting (ChunkingPilarParserModule.modelsKey or ChunkingPilarParserModule.globalModelsKey)")
    }

    if (job ? ChunkingPilarParserModule.modelsKey && !job(ChunkingPilarParserModule.modelsKey).isInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': Wrong type found for ChunkingPilarParserModule.modelsKey.  Expecting 'scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]' but found '" +
          job(ChunkingPilarParserModule.modelsKey).getClass.toString + "'")
    }

    if (job ? ChunkingPilarParserModule.globalModelsKey && !job(ChunkingPilarParserModule.globalModelsKey).isInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': Wrong type found for ChunkingPilarParserModule.globalModelsKey.  Expecting 'scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]' but found '" +
          job(ChunkingPilarParserModule.globalModelsKey).getClass.toString + "'")
    }
    return tags
  }

  def getModels(options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = {
    if (options.contains(ChunkingPilarParserModule.globalModelsKey)) {
      return options(ChunkingPilarParserModule.globalModelsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]
    }
    if (options.contains(ChunkingPilarParserModule.modelsKey)) {
      return options(ChunkingPilarParserModule.modelsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setModels(options : MMap[Property.Key, Any], models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) : MMap[Property.Key, Any] = {

    options(ChunkingPilarParserModule.globalModelsKey) = models
    options(modelsKey) = models

    return options
  }

  def getSources(options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]] = {
    if (options.contains(ChunkingPilarParserModule.globalSourcesKey)) {
      return options(ChunkingPilarParserModule.globalSourcesKey).asInstanceOf[scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]]
    }
    if (options.contains(ChunkingPilarParserModule.sourcesKey)) {
      return options(ChunkingPilarParserModule.sourcesKey).asInstanceOf[scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]]
    }
    if (options.contains(PilarSourcesModule.sourcesKey)) {
      return options(PilarSourcesModule.sourcesKey).asInstanceOf[scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSources(options : MMap[Property.Key, Any], sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]) : MMap[Property.Key, Any] = {

    options(ChunkingPilarParserModule.globalSourcesKey) = sources
    options(sourcesKey) = sources

    return options
  }

  object ConsumerView {
    implicit class ChunkingPilarParserModuleConsumerView(val job : PropertyProvider) extends AnyVal {
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = ChunkingPilarParserModule.getModels(job.propertyMap)
      def sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]] = ChunkingPilarParserModule.getSources(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class ChunkingPilarParserModuleProducerView(val job : PropertyProvider) extends AnyVal {

      def models_=(models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) { ChunkingPilarParserModule.setModels(job.propertyMap, models) }
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = ChunkingPilarParserModule.getModels(job.propertyMap)

      def sources_=(sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]]) { ChunkingPilarParserModule.setSources(job.propertyMap, sources) }
      def sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]] = ChunkingPilarParserModule.getSources(job.propertyMap)
    }
  }
}

trait ChunkingPilarParserModule {
  def job : PipelineJob

  def models_=(models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) { ChunkingPilarParserModule.setModels(job.propertyMap, models) }
  def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = ChunkingPilarParserModule.getModels(job.propertyMap)

  def sources : scala.collection.immutable.Seq[scala.util.Either[java.lang.String, java.lang.String]] = ChunkingPilarParserModule.getSources(job.propertyMap)
}