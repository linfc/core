// $ANTLR 3.3 Nov 30, 2010 12:45:30 /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g 2012-07-18 10:27:55

/*
Copyright (c) 2011-2012 Robby, Kansas State University.        
All rights reserved. This program and the accompanying materials      
are made available under the terms of the Eclipse Public License v1.0 
which accompanies this distribution, and is available at              
http://www.eclipse.org/legal/epl-v10.html                             
*/

package org.sireum.pilar.parser;

import org.antlr.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

@SuppressWarnings("all")
public class AntlrPilarParser extends Parser {
  public static final String[] tokenNames = new String[] { "<invalid>",
      "<EOR>", "<DOWN>", "<UP>", "OPTION", "LIST", "MODEL", "ANNOTATION",
      "ANNOTATION_PARAM_IDED", "PACKAGE", "CONST", "CONST_ELEMENT", "ENUM",
      "ENUM_ELEMENT", "TYPEALIAS", "RECORD", "EXTENDCLAUSE_ELEMENT",
      "ATTRIBUTE", "ATTRIBUTE_FRAGMENT", "GLOBAL", "GLOBAL_FRAGMENT",
      "PROCEDURE", "PARAM", "PARAM_VARIABLE", "VSET", "VSET_ELEMENT",
      "EXTENSION", "TYPEVAR", "TYPE_EXT", "TYPE_EXT_ATTRIBUTE_BINDING",
      "ACTION_EXT", "EXP_EXT", "PROC_EXT", "EXT_PARAM", "EXT_PARAM_VARIABLE",
      "BODY", "LOCAL", "LOCAL_FRAGMENT", "LOCATION", "EXP_GUARD", "ELSE_GUARD",
      "TRANSFORMATION", "ASSIGN", "LHS", "RHS", "ASSERT", "ASSUME", "THROW",
      "START", "ACTION_EXT_CALL", "GOTO", "RETURN", "IF_JUMP", "IF_THEN_JUMP",
      "IF_ELSE_JUMP", "SWITCH_JUMP", "SWITCH_CASE_JUMP", "SWITCH_DEFAULT_JUMP",
      "CALL_JUMP", "CATCH_CLAUSE", "IF_EXP", "IF_THEN_EXP", "IF_ELSE_EXP",
      "SWITCH_EXP", "SWITCH_CASE_EXP", "SWITCH_DEFAULT_EXP", "BINARY", "UNARY",
      "CAST", "INDEXING", "ACCESS", "CALL", "TRUE", "FALSE", "NULL", "HEX_LIT",
      "DEC_LIT", "OCT_LIT", "STRING", "TUPLE", "NAME_EXP", "NAME",
      "TYPEVARID_TYPE", "FLOAT", "RATIONAL", "CHAR", "SYMBOL", "TYPE_EXP",
      "NLIST_RANGE", "NLIST", "NMULTI_ARRAY", "NMULTI_ARRAY_FRAGMENT",
      "NRECORD", "ATTR_INIT", "NSET", "NFUNCTION", "FUN_EXP", "FUN", "MAPPING",
      "MATCHING", "ANN_EXP", "INT", "NAME_TYPE", "TYPE_TUPLE", "TUPLE_TYPE",
      "FUN_TYPE", "PROCEDURE_TYPE", "TYPE_PARAM", "ANNOTATED_TYPE",
      "PROCEDURE_TYPE_PARAM_VARIABLE", "FUNCTION_TYPE", "RELATION_TYPE",
      "LET_EXP", "LET_BINDING", "NEW_EXP", "NEW_MULTI_ARRAY_FRAGMENT", "TYPE",
      "ARRAY_FRAGMENT", "LIST_FRAGMENT", "MULTIARRAY_FRAGMENT", "SET_FRAGMENT",
      "TYPEVAR_TUPLE", "RAW", "ANN_TYPE", "ID", "TYPEVARID", "GLOBALID",
      "LOCID", "ACTION_EXT_OP", "COND_OR_OP", "COND_AND_OP", "OR_OP", "XOR_OP",
      "AND_OP", "EQ_OP", "COLON_OP", "REL_OP", "SHIFT_OP", "ADD_OP", "MUL_OP",
      "UN_OP", "CHAR_LIT", "STRING_LIT", "SYMBOL_LIT", "RAW_LIT", "BIN_LIT",
      "FLOAT_LIT", "RATIONAL_LIT", "TX_BASICID", "TX_HexDigit",
      "TX_IntTypeSuffix", "TX_Exponent", "TX_FloatTypeSuffix",
      "TX_EscapeSequence", "TX_OPID_SUFFIX", "TX_OPID_CHAR", "TX_OPID_CHARMLT",
      "TX_OPID_CHARMGT", "TX_Letter", "TX_JavaIDDigit", "TX_UnicodeEscape",
      "TX_OctalEscape", "WS", "COMMENT", "LINE_COMMENT", "'<'", "'>'", "'('",
      "')'", "'@'", "','", "'='", "'package'", "';'", "'const'", "'{'", "'}'",
      "'enum'", "'typealias'", "'record'", "'extends'", "'global'",
      "'procedure'", "'...'", "'vset'", "'fun'", "'extension'", "'typedef'",
      "'actiondef'", "'expdef'", "'procdef'", "'local'", "'|'", "'+>'",
      "'else'", "'assert'", "'assume'", "'throw'", "':='", "'start'", "'['",
      "']'", "'switch'", "'call'", "'goto'", "'return'", "'if'", "'then'",
      "'=>'", "'catch'", "'..'", "'==>'", "'<=='", "'*'", "'.'", "'`'",
      "'true'", "'false'", "'null'", "'new'", "'->'", "'let'", "'in'", "'::'",
      "'-!>'" };
  public static final int EOF = -1;
  public static final int T__165 = 165;
  public static final int T__166 = 166;
  public static final int T__167 = 167;
  public static final int T__168 = 168;
  public static final int T__169 = 169;
  public static final int T__170 = 170;
  public static final int T__171 = 171;
  public static final int T__172 = 172;
  public static final int T__173 = 173;
  public static final int T__174 = 174;
  public static final int T__175 = 175;
  public static final int T__176 = 176;
  public static final int T__177 = 177;
  public static final int T__178 = 178;
  public static final int T__179 = 179;
  public static final int T__180 = 180;
  public static final int T__181 = 181;
  public static final int T__182 = 182;
  public static final int T__183 = 183;
  public static final int T__184 = 184;
  public static final int T__185 = 185;
  public static final int T__186 = 186;
  public static final int T__187 = 187;
  public static final int T__188 = 188;
  public static final int T__189 = 189;
  public static final int T__190 = 190;
  public static final int T__191 = 191;
  public static final int T__192 = 192;
  public static final int T__193 = 193;
  public static final int T__194 = 194;
  public static final int T__195 = 195;
  public static final int T__196 = 196;
  public static final int T__197 = 197;
  public static final int T__198 = 198;
  public static final int T__199 = 199;
  public static final int T__200 = 200;
  public static final int T__201 = 201;
  public static final int T__202 = 202;
  public static final int T__203 = 203;
  public static final int T__204 = 204;
  public static final int T__205 = 205;
  public static final int T__206 = 206;
  public static final int T__207 = 207;
  public static final int T__208 = 208;
  public static final int T__209 = 209;
  public static final int T__210 = 210;
  public static final int T__211 = 211;
  public static final int T__212 = 212;
  public static final int T__213 = 213;
  public static final int T__214 = 214;
  public static final int T__215 = 215;
  public static final int T__216 = 216;
  public static final int T__217 = 217;
  public static final int T__218 = 218;
  public static final int T__219 = 219;
  public static final int T__220 = 220;
  public static final int T__221 = 221;
  public static final int T__222 = 222;
  public static final int T__223 = 223;
  public static final int T__224 = 224;
  public static final int OPTION = 4;
  public static final int LIST = 5;
  public static final int MODEL = 6;
  public static final int ANNOTATION = 7;
  public static final int ANNOTATION_PARAM_IDED = 8;
  public static final int PACKAGE = 9;
  public static final int CONST = 10;
  public static final int CONST_ELEMENT = 11;
  public static final int ENUM = 12;
  public static final int ENUM_ELEMENT = 13;
  public static final int TYPEALIAS = 14;
  public static final int RECORD = 15;
  public static final int EXTENDCLAUSE_ELEMENT = 16;
  public static final int ATTRIBUTE = 17;
  public static final int ATTRIBUTE_FRAGMENT = 18;
  public static final int GLOBAL = 19;
  public static final int GLOBAL_FRAGMENT = 20;
  public static final int PROCEDURE = 21;
  public static final int PARAM = 22;
  public static final int PARAM_VARIABLE = 23;
  public static final int VSET = 24;
  public static final int VSET_ELEMENT = 25;
  public static final int EXTENSION = 26;
  public static final int TYPEVAR = 27;
  public static final int TYPE_EXT = 28;
  public static final int TYPE_EXT_ATTRIBUTE_BINDING = 29;
  public static final int ACTION_EXT = 30;
  public static final int EXP_EXT = 31;
  public static final int PROC_EXT = 32;
  public static final int EXT_PARAM = 33;
  public static final int EXT_PARAM_VARIABLE = 34;
  public static final int BODY = 35;
  public static final int LOCAL = 36;
  public static final int LOCAL_FRAGMENT = 37;
  public static final int LOCATION = 38;
  public static final int EXP_GUARD = 39;
  public static final int ELSE_GUARD = 40;
  public static final int TRANSFORMATION = 41;
  public static final int ASSIGN = 42;
  public static final int LHS = 43;
  public static final int RHS = 44;
  public static final int ASSERT = 45;
  public static final int ASSUME = 46;
  public static final int THROW = 47;
  public static final int START = 48;
  public static final int ACTION_EXT_CALL = 49;
  public static final int GOTO = 50;
  public static final int RETURN = 51;
  public static final int IF_JUMP = 52;
  public static final int IF_THEN_JUMP = 53;
  public static final int IF_ELSE_JUMP = 54;
  public static final int SWITCH_JUMP = 55;
  public static final int SWITCH_CASE_JUMP = 56;
  public static final int SWITCH_DEFAULT_JUMP = 57;
  public static final int CALL_JUMP = 58;
  public static final int CATCH_CLAUSE = 59;
  public static final int IF_EXP = 60;
  public static final int IF_THEN_EXP = 61;
  public static final int IF_ELSE_EXP = 62;
  public static final int SWITCH_EXP = 63;
  public static final int SWITCH_CASE_EXP = 64;
  public static final int SWITCH_DEFAULT_EXP = 65;
  public static final int BINARY = 66;
  public static final int UNARY = 67;
  public static final int CAST = 68;
  public static final int INDEXING = 69;
  public static final int ACCESS = 70;
  public static final int CALL = 71;
  public static final int TRUE = 72;
  public static final int FALSE = 73;
  public static final int NULL = 74;
  public static final int HEX_LIT = 75;
  public static final int DEC_LIT = 76;
  public static final int OCT_LIT = 77;
  public static final int STRING = 78;
  public static final int TUPLE = 79;
  public static final int NAME_EXP = 80;
  public static final int NAME = 81;
  public static final int TYPEVARID_TYPE = 82;
  public static final int FLOAT = 83;
  public static final int RATIONAL = 84;
  public static final int CHAR = 85;
  public static final int SYMBOL = 86;
  public static final int TYPE_EXP = 87;
  public static final int NLIST_RANGE = 88;
  public static final int NLIST = 89;
  public static final int NMULTI_ARRAY = 90;
  public static final int NMULTI_ARRAY_FRAGMENT = 91;
  public static final int NRECORD = 92;
  public static final int ATTR_INIT = 93;
  public static final int NSET = 94;
  public static final int NFUNCTION = 95;
  public static final int FUN_EXP = 96;
  public static final int FUN = 97;
  public static final int MAPPING = 98;
  public static final int MATCHING = 99;
  public static final int ANN_EXP = 100;
  public static final int INT = 101;
  public static final int NAME_TYPE = 102;
  public static final int TYPE_TUPLE = 103;
  public static final int TUPLE_TYPE = 104;
  public static final int FUN_TYPE = 105;
  public static final int PROCEDURE_TYPE = 106;
  public static final int TYPE_PARAM = 107;
  public static final int ANNOTATED_TYPE = 108;
  public static final int PROCEDURE_TYPE_PARAM_VARIABLE = 109;
  public static final int FUNCTION_TYPE = 110;
  public static final int RELATION_TYPE = 111;
  public static final int LET_EXP = 112;
  public static final int LET_BINDING = 113;
  public static final int NEW_EXP = 114;
  public static final int NEW_MULTI_ARRAY_FRAGMENT = 115;
  public static final int TYPE = 116;
  public static final int ARRAY_FRAGMENT = 117;
  public static final int LIST_FRAGMENT = 118;
  public static final int MULTIARRAY_FRAGMENT = 119;
  public static final int SET_FRAGMENT = 120;
  public static final int TYPEVAR_TUPLE = 121;
  public static final int RAW = 122;
  public static final int ANN_TYPE = 123;
  public static final int ID = 124;
  public static final int TYPEVARID = 125;
  public static final int GLOBALID = 126;
  public static final int LOCID = 127;
  public static final int ACTION_EXT_OP = 128;
  public static final int COND_OR_OP = 129;
  public static final int COND_AND_OP = 130;
  public static final int OR_OP = 131;
  public static final int XOR_OP = 132;
  public static final int AND_OP = 133;
  public static final int EQ_OP = 134;
  public static final int COLON_OP = 135;
  public static final int REL_OP = 136;
  public static final int SHIFT_OP = 137;
  public static final int ADD_OP = 138;
  public static final int MUL_OP = 139;
  public static final int UN_OP = 140;
  public static final int CHAR_LIT = 141;
  public static final int STRING_LIT = 142;
  public static final int SYMBOL_LIT = 143;
  public static final int RAW_LIT = 144;
  public static final int BIN_LIT = 145;
  public static final int FLOAT_LIT = 146;
  public static final int RATIONAL_LIT = 147;
  public static final int TX_BASICID = 148;
  public static final int TX_HexDigit = 149;
  public static final int TX_IntTypeSuffix = 150;
  public static final int TX_Exponent = 151;
  public static final int TX_FloatTypeSuffix = 152;
  public static final int TX_EscapeSequence = 153;
  public static final int TX_OPID_SUFFIX = 154;
  public static final int TX_OPID_CHAR = 155;
  public static final int TX_OPID_CHARMLT = 156;
  public static final int TX_OPID_CHARMGT = 157;
  public static final int TX_Letter = 158;
  public static final int TX_JavaIDDigit = 159;
  public static final int TX_UnicodeEscape = 160;
  public static final int TX_OctalEscape = 161;
  public static final int WS = 162;
  public static final int COMMENT = 163;
  public static final int LINE_COMMENT = 164;

  // delegates
  // delegators

  public AntlrPilarParser(TokenStream input) {
    this(input, new RecognizerSharedState());
  }

  public AntlrPilarParser(TokenStream input, RecognizerSharedState state) {
    super(input, state);
    this.state.ruleMemo = new HashMap[350 + 1];

  }

  protected TreeAdaptor adaptor = new CommonTreeAdaptor();

  public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
  }

  public TreeAdaptor getTreeAdaptor() {
    return adaptor;
  }

  public String[] getTokenNames() {
    return AntlrPilarParser.tokenNames;
  }

  public String getGrammarFileName() {
    return "/Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g";
  }

  public static class modelFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "modelFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:163:1: modelFile : model EOF -> model ;
  public final AntlrPilarParser.modelFile_return modelFile()
      throws RecognitionException {
    AntlrPilarParser.modelFile_return retval = new AntlrPilarParser.modelFile_return();
    retval.start = input.LT(1);
    int modelFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF2 = null;
    AntlrPilarParser.model_return model1 = null;

    Object EOF2_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_model = new RewriteRuleSubtreeStream(
        adaptor, "rule model");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 1)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:164:2: ( model EOF -> model )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:164:4: model EOF
      {
        pushFollow(FOLLOW_model_in_modelFile658);
        model1 = model();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_model.add(model1.getTree());
        EOF2 = (Token) match(input, EOF, FOLLOW_EOF_in_modelFile660);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF2);

        // AST REWRITE
        // elements: model
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 164:41: -> model
          {
            adaptor.addChild(root_0, stream_model.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 1, modelFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "modelFile"

  public static class annotationFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotationFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:167:1: annotationFile : annotation EOF -> annotation ;
  public final AntlrPilarParser.annotationFile_return annotationFile()
      throws RecognitionException {
    AntlrPilarParser.annotationFile_return retval = new AntlrPilarParser.annotationFile_return();
    retval.start = input.LT(1);
    int annotationFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF4 = null;
    AntlrPilarParser.annotation_return annotation3 = null;

    Object EOF4_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 2)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:168:2: ( annotation EOF -> annotation )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:168:4: annotation EOF
      {
        pushFollow(FOLLOW_annotation_in_annotationFile702);
        annotation3 = annotation();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotation.add(annotation3.getTree());
        EOF4 = (Token) match(input, EOF, FOLLOW_EOF_in_annotationFile704);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF4);

        // AST REWRITE
        // elements: annotation
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 168:41: -> annotation
          {
            adaptor.addChild(root_0, stream_annotation.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 2, annotationFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotationFile"

  public static class packageDeclarationFile_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "packageDeclarationFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:171:1: packageDeclarationFile : packageDeclaration EOF -> packageDeclaration ;
  public final AntlrPilarParser.packageDeclarationFile_return packageDeclarationFile()
      throws RecognitionException {
    AntlrPilarParser.packageDeclarationFile_return retval = new AntlrPilarParser.packageDeclarationFile_return();
    retval.start = input.LT(1);
    int packageDeclarationFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF6 = null;
    AntlrPilarParser.packageDeclaration_return packageDeclaration5 = null;

    Object EOF6_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_packageDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule packageDeclaration");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 3)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:172:2: ( packageDeclaration EOF -> packageDeclaration )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:172:4: packageDeclaration EOF
      {
        pushFollow(FOLLOW_packageDeclaration_in_packageDeclarationFile745);
        packageDeclaration5 = packageDeclaration();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_packageDeclaration.add(packageDeclaration5.getTree());
        EOF6 = (Token) match(
            input,
            EOF,
            FOLLOW_EOF_in_packageDeclarationFile747);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF6);

        // AST REWRITE
        // elements: packageDeclaration
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 172:41: -> packageDeclaration
          {
            adaptor.addChild(root_0, stream_packageDeclaration.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 3, packageDeclarationFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "packageDeclarationFile"

  public static class packageElementFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "packageElementFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:175:1: packageElementFile : packageElement EOF -> packageElement ;
  public final AntlrPilarParser.packageElementFile_return packageElementFile()
      throws RecognitionException {
    AntlrPilarParser.packageElementFile_return retval = new AntlrPilarParser.packageElementFile_return();
    retval.start = input.LT(1);
    int packageElementFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF8 = null;
    AntlrPilarParser.packageElement_return packageElement7 = null;

    Object EOF8_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_packageElement = new RewriteRuleSubtreeStream(
        adaptor, "rule packageElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 4)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:176:2: ( packageElement EOF -> packageElement )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:176:4: packageElement EOF
      {
        pushFollow(FOLLOW_packageElement_in_packageElementFile776);
        packageElement7 = packageElement();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_packageElement.add(packageElement7.getTree());
        EOF8 = (Token) match(input, EOF, FOLLOW_EOF_in_packageElementFile778);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF8);

        // AST REWRITE
        // elements: packageElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 176:41: -> packageElement
          {
            adaptor.addChild(root_0, stream_packageElement.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 4, packageElementFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "packageElementFile"

  public static class locationFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "locationFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:179:1: locationFile : location EOF -> location ;
  public final AntlrPilarParser.locationFile_return locationFile()
      throws RecognitionException {
    AntlrPilarParser.locationFile_return retval = new AntlrPilarParser.locationFile_return();
    retval.start = input.LT(1);
    int locationFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF10 = null;
    AntlrPilarParser.location_return location9 = null;

    Object EOF10_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_location = new RewriteRuleSubtreeStream(
        adaptor, "rule location");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 5)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:180:2: ( location EOF -> location )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:180:4: location EOF
      {
        pushFollow(FOLLOW_location_in_locationFile811);
        location9 = location();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_location.add(location9.getTree());
        EOF10 = (Token) match(input, EOF, FOLLOW_EOF_in_locationFile813);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF10);

        // AST REWRITE
        // elements: location
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 180:41: -> location
          {
            adaptor.addChild(root_0, stream_location.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 5, locationFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "locationFile"

  public static class transformationFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "transformationFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:183:1: transformationFile : transformation EOF -> transformation ;
  public final AntlrPilarParser.transformationFile_return transformationFile()
      throws RecognitionException {
    AntlrPilarParser.transformationFile_return retval = new AntlrPilarParser.transformationFile_return();
    retval.start = input.LT(1);
    int transformationFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF12 = null;
    AntlrPilarParser.transformation_return transformation11 = null;

    Object EOF12_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_transformation = new RewriteRuleSubtreeStream(
        adaptor, "rule transformation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 6)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:184:2: ( transformation EOF -> transformation )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:184:4: transformation EOF
      {
        pushFollow(FOLLOW_transformation_in_transformationFile852);
        transformation11 = transformation();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_transformation.add(transformation11.getTree());
        EOF12 = (Token) match(input, EOF, FOLLOW_EOF_in_transformationFile854);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF12);

        // AST REWRITE
        // elements: transformation
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 184:41: -> transformation
          {
            adaptor.addChild(root_0, stream_transformation.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 6, transformationFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "transformationFile"

  public static class actionFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "actionFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:187:1: actionFile : action EOF -> action ;
  public final AntlrPilarParser.actionFile_return actionFile()
      throws RecognitionException {
    AntlrPilarParser.actionFile_return retval = new AntlrPilarParser.actionFile_return();
    retval.start = input.LT(1);
    int actionFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF14 = null;
    AntlrPilarParser.action_return action13 = null;

    Object EOF14_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_action = new RewriteRuleSubtreeStream(
        adaptor, "rule action");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 7)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:188:2: ( action EOF -> action )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:188:4: action EOF
      {
        pushFollow(FOLLOW_action_in_actionFile887);
        action13 = action();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_action.add(action13.getTree());
        EOF14 = (Token) match(input, EOF, FOLLOW_EOF_in_actionFile889);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF14);

        // AST REWRITE
        // elements: action
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 188:41: -> action
          {
            adaptor.addChild(root_0, stream_action.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 7, actionFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "actionFile"

  public static class jumpFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "jumpFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:191:1: jumpFile : jump EOF -> jump ;
  public final AntlrPilarParser.jumpFile_return jumpFile()
      throws RecognitionException {
    AntlrPilarParser.jumpFile_return retval = new AntlrPilarParser.jumpFile_return();
    retval.start = input.LT(1);
    int jumpFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF16 = null;
    AntlrPilarParser.jump_return jump15 = null;

    Object EOF16_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_jump = new RewriteRuleSubtreeStream(
        adaptor, "rule jump");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 8)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:192:2: ( jump EOF -> jump )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:192:4: jump EOF
      {
        pushFollow(FOLLOW_jump_in_jumpFile930);
        jump15 = jump();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_jump.add(jump15.getTree());
        EOF16 = (Token) match(input, EOF, FOLLOW_EOF_in_jumpFile932);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF16);

        // AST REWRITE
        // elements: jump
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 192:41: -> jump
          {
            adaptor.addChild(root_0, stream_jump.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 8, jumpFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "jumpFile"

  public static class expFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "expFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:195:1: expFile : exp EOF -> exp ;
  public final AntlrPilarParser.expFile_return expFile()
      throws RecognitionException {
    AntlrPilarParser.expFile_return retval = new AntlrPilarParser.expFile_return();
    retval.start = input.LT(1);
    int expFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF18 = null;
    AntlrPilarParser.exp_return exp17 = null;

    Object EOF18_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 9)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:196:2: ( exp EOF -> exp )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:196:4: exp EOF
      {
        pushFollow(FOLLOW_exp_in_expFile975);
        exp17 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp17.getTree());
        EOF18 = (Token) match(input, EOF, FOLLOW_EOF_in_expFile977);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF18);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 196:41: -> exp
          {
            adaptor.addChild(root_0, stream_exp.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 9, expFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "expFile"

  public static class typeFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeFile"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:199:1: typeFile : type EOF -> type ;
  public final AntlrPilarParser.typeFile_return typeFile()
      throws RecognitionException {
    AntlrPilarParser.typeFile_return retval = new AntlrPilarParser.typeFile_return();
    retval.start = input.LT(1);
    int typeFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF20 = null;
    AntlrPilarParser.type_return type19 = null;

    Object EOF20_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 10)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:200:2: ( type EOF -> type )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:200:4: type EOF
      {
        pushFollow(FOLLOW_type_in_typeFile1021);
        type19 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type19.getTree());
        EOF20 = (Token) match(input, EOF, FOLLOW_EOF_in_typeFile1023);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF20);

        // AST REWRITE
        // elements: type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 200:41: -> type
          {
            adaptor.addChild(root_0, stream_type.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 10, typeFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeFile"

  public static class model_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "model"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:203:1: model : annotationList ( packageElement )* ( packageDeclaration )* EOF -> ^( MODEL annotationList ^( LIST ( packageElement )* ) ^( LIST ( packageDeclaration )* ) ) ;
  public final AntlrPilarParser.model_return model()
      throws RecognitionException {
    AntlrPilarParser.model_return retval = new AntlrPilarParser.model_return();
    retval.start = input.LT(1);
    int model_StartIndex = input.index();
    Object root_0 = null;

    Token EOF24 = null;
    AntlrPilarParser.annotationList_return annotationList21 = null;

    AntlrPilarParser.packageElement_return packageElement22 = null;

    AntlrPilarParser.packageDeclaration_return packageDeclaration23 = null;

    Object EOF24_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_packageElement = new RewriteRuleSubtreeStream(
        adaptor, "rule packageElement");
    RewriteRuleSubtreeStream stream_packageDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule packageDeclaration");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 11)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:204:2: ( annotationList ( packageElement )* ( packageDeclaration )* EOF -> ^( MODEL annotationList ^( LIST ( packageElement )* ) ^( LIST ( packageDeclaration )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:204:4: annotationList ( packageElement )* ( packageDeclaration )* EOF
      {
        pushFollow(FOLLOW_annotationList_in_model1066);
        annotationList21 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList21.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:205:4: ( packageElement )*
        loop1: do {
          int alt1 = 2;
          int LA1_0 = input.LA(1);

          if ((LA1_0 == 174 || (LA1_0 >= 177 && LA1_0 <= 179)
              || (LA1_0 >= 181 && LA1_0 <= 182) || (LA1_0 >= 184 && LA1_0 <= 186))) {
            alt1 = 1;
          }

          switch (alt1) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: packageElement
            {
              pushFollow(FOLLOW_packageElement_in_model1071);
              packageElement22 = packageElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_packageElement.add(packageElement22.getTree());

            }
              break;

            default:
              break loop1;
          }
        } while (true);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:206:4: ( packageDeclaration )*
        loop2: do {
          int alt2 = 2;
          int LA2_0 = input.LA(1);

          if ((LA2_0 == 172)) {
            alt2 = 1;
          }

          switch (alt2) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: packageDeclaration
            {
              pushFollow(FOLLOW_packageDeclaration_in_model1077);
              packageDeclaration23 = packageDeclaration();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_packageDeclaration.add(packageDeclaration23.getTree());

            }
              break;

            default:
              break loop2;
          }
        } while (true);

        EOF24 = (Token) match(input, EOF, FOLLOW_EOF_in_model1101);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF24);

        // AST REWRITE
        // elements: annotationList, packageDeclaration, packageElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 207:41: -> ^( MODEL annotationList ^( LIST ( packageElement )* ) ^( LIST ( packageDeclaration )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:207:44: ^( MODEL annotationList ^( LIST ( packageElement )* ) ^( LIST ( packageDeclaration )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(MODEL, "MODEL"),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:207:67: ^( LIST ( packageElement )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:207:74: ( packageElement )*
                while (stream_packageElement.hasNext()) {
                  adaptor.addChild(root_2, stream_packageElement.nextTree());

                }
                stream_packageElement.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:207:91: ^( LIST ( packageDeclaration )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:207:98: ( packageDeclaration )*
                while (stream_packageDeclaration.hasNext()) {
                  adaptor
                      .addChild(root_2, stream_packageDeclaration.nextTree());

                }
                stream_packageDeclaration.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 11, model_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "model"

  public static class annotationList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotationList"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:210:1: annotationList : ( ( annotation )* -> ^( LIST ( annotation )* ) | angleGroupedAnnotationList -> angleGroupedAnnotationList );
  public final AntlrPilarParser.annotationList_return annotationList()
      throws RecognitionException {
    AntlrPilarParser.annotationList_return retval = new AntlrPilarParser.annotationList_return();
    retval.start = input.LT(1);
    int annotationList_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.annotation_return annotation25 = null;

    AntlrPilarParser.angleGroupedAnnotationList_return angleGroupedAnnotationList26 = null;

    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    RewriteRuleSubtreeStream stream_angleGroupedAnnotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule angleGroupedAnnotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 12)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:211:2: ( ( annotation )* -> ^( LIST ( annotation )* ) | angleGroupedAnnotationList -> angleGroupedAnnotationList )
      int alt4 = 2;
      alt4 = dfa4.predict(input);
      switch (alt4) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:211:4: ( annotation )*
        {
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:211:4: ( annotation )*
          loop3: do {
            int alt3 = 2;
            int LA3_0 = input.LA(1);

            if ((LA3_0 == 169)) {
              int LA3_2 = input.LA(2);

              if ((LA3_2 == ID)) {
                alt3 = 1;
              }

            }

            switch (alt3) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotation
              {
                pushFollow(FOLLOW_annotation_in_annotationList1167);
                annotation25 = annotation();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotation.add(annotation25.getTree());

              }
                break;

              default:
                break loop3;
            }
          } while (true);

          // AST REWRITE
          // elements: annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 211:41: -> ^( LIST ( annotation )* )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:211:44: ^( LIST ( annotation )* )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:211:51: ( annotation )*
                while (stream_annotation.hasNext()) {
                  adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:212:4: angleGroupedAnnotationList
        {
          pushFollow(FOLLOW_angleGroupedAnnotationList_in_annotationList1207);
          angleGroupedAnnotationList26 = angleGroupedAnnotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_angleGroupedAnnotationList.add(angleGroupedAnnotationList26
                .getTree());

          // AST REWRITE
          // elements: angleGroupedAnnotationList
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 212:41: -> angleGroupedAnnotationList
            {
              adaptor.addChild(
                  root_0,
                  stream_angleGroupedAnnotationList.nextTree());

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 12, annotationList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotationList"

  public static class angleGroupedAnnotationList_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "angleGroupedAnnotationList"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:215:1: angleGroupedAnnotationList : ( -> ^( LIST ) | '<' ( annotation )+ '>' -> ^( LIST ( annotation )* ) );
  public final AntlrPilarParser.angleGroupedAnnotationList_return angleGroupedAnnotationList()
      throws RecognitionException {
    AntlrPilarParser.angleGroupedAnnotationList_return retval = new AntlrPilarParser.angleGroupedAnnotationList_return();
    retval.start = input.LT(1);
    int angleGroupedAnnotationList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal27 = null;
    Token char_literal29 = null;
    AntlrPilarParser.annotation_return annotation28 = null;

    Object char_literal27_tree = null;
    Object char_literal29_tree = null;
    RewriteRuleTokenStream stream_166 = new RewriteRuleTokenStream(adaptor,
        "token 166");
    RewriteRuleTokenStream stream_165 = new RewriteRuleTokenStream(adaptor,
        "token 165");
    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 13)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:216:2: ( -> ^( LIST ) | '<' ( annotation )+ '>' -> ^( LIST ( annotation )* ) )
      int alt6 = 2;
      int LA6_0 = input.LA(1);

      if ((LA6_0 == EOF || (LA6_0 >= HEX_LIT && LA6_0 <= OCT_LIT)
          || (LA6_0 >= ID && LA6_0 <= ACTION_EXT_OP)
          || (LA6_0 >= ADD_OP && LA6_0 <= RATIONAL_LIT)
          || (LA6_0 >= 166 && LA6_0 <= 186) || (LA6_0 >= 192 && LA6_0 <= 199)
          || (LA6_0 >= 202 && LA6_0 <= 206) || (LA6_0 >= 208 && LA6_0 <= 209)
          || LA6_0 == 213 || (LA6_0 >= 215 && LA6_0 <= 221) || LA6_0 == 224)) {
        alt6 = 1;
      } else if ((LA6_0 == 165)) {
        alt6 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 6, 0, input);

        throw nvae;
      }
      switch (alt6) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:216:41: 
        {

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 216:41: -> ^( LIST )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:216:44: ^( LIST )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:217:4: '<' ( annotation )+ '>'
        {
          char_literal27 = (Token) match(
              input,
              165,
              FOLLOW_165_in_angleGroupedAnnotationList1278);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_165.add(char_literal27);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:217:8: ( annotation )+
          int cnt5 = 0;
          loop5: do {
            int alt5 = 2;
            int LA5_0 = input.LA(1);

            if ((LA5_0 == 169)) {
              alt5 = 1;
            }

            switch (alt5) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotation
              {
                pushFollow(FOLLOW_annotation_in_angleGroupedAnnotationList1280);
                annotation28 = annotation();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotation.add(annotation28.getTree());

              }
                break;

              default:
                if (cnt5 >= 1) break loop5;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(5, input);
                throw eee;
            }
            cnt5++;
          } while (true);

          char_literal29 = (Token) match(
              input,
              166,
              FOLLOW_166_in_angleGroupedAnnotationList1283);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_166.add(char_literal29);

          // AST REWRITE
          // elements: annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 217:41: -> ^( LIST ( annotation )* )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:217:44: ^( LIST ( annotation )* )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:217:51: ( annotation )*
                while (stream_annotation.hasNext()) {
                  adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 13, angleGroupedAnnotationList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "angleGroupedAnnotationList"

  public static class parenGroupedAnnotationList_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "parenGroupedAnnotationList"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:220:1: parenGroupedAnnotationList : ( -> ^( LIST ) | '(' ( annotation )+ ')' -> ^( LIST ( annotation )* ) );
  public final AntlrPilarParser.parenGroupedAnnotationList_return parenGroupedAnnotationList()
      throws RecognitionException {
    AntlrPilarParser.parenGroupedAnnotationList_return retval = new AntlrPilarParser.parenGroupedAnnotationList_return();
    retval.start = input.LT(1);
    int parenGroupedAnnotationList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal30 = null;
    Token char_literal32 = null;
    AntlrPilarParser.annotation_return annotation31 = null;

    Object char_literal30_tree = null;
    Object char_literal32_tree = null;
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 14)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:221:2: ( -> ^( LIST ) | '(' ( annotation )+ ')' -> ^( LIST ( annotation )* ) )
      int alt8 = 2;
      int LA8_0 = input.LA(1);

      if ((LA8_0 == EOF || (LA8_0 >= HEX_LIT && LA8_0 <= OCT_LIT)
          || LA8_0 == ID || (LA8_0 >= GLOBALID && LA8_0 <= LOCID)
          || (LA8_0 >= ADD_OP && LA8_0 <= RATIONAL_LIT)
          || (LA8_0 >= 175 && LA8_0 <= 176) || LA8_0 == 192
          || (LA8_0 >= 194 && LA8_0 <= 197) || LA8_0 == 199
          || (LA8_0 >= 202 && LA8_0 <= 206) || LA8_0 == 209 || LA8_0 == 213
          || (LA8_0 >= 215 && LA8_0 <= 219) || LA8_0 == 221)) {
        alt8 = 1;
      } else if ((LA8_0 == 167)) {
        int LA8_2 = input.LA(2);

        if (((LA8_2 >= HEX_LIT && LA8_2 <= OCT_LIT)
            || (LA8_2 >= ID && LA8_2 <= GLOBALID)
            || (LA8_2 >= ADD_OP && LA8_2 <= RATIONAL_LIT)
            || (LA8_2 >= 167 && LA8_2 <= 168) || LA8_2 == 175 || LA8_2 == 202
            || LA8_2 == 206 || LA8_2 == 213 || (LA8_2 >= 215 && LA8_2 <= 219) || LA8_2 == 221)) {
          alt8 = 1;
        } else if ((LA8_2 == 169)) {
          alt8 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 8, 2, input);

          throw nvae;
        }
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 8, 0, input);

        throw nvae;
      }
      switch (alt8) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:221:41: 
        {

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 221:41: -> ^( LIST )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:221:44: ^( LIST )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:222:4: '(' ( annotation )+ ')'
        {
          char_literal30 = (Token) match(
              input,
              167,
              FOLLOW_167_in_parenGroupedAnnotationList1366);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_167.add(char_literal30);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:222:8: ( annotation )+
          int cnt7 = 0;
          loop7: do {
            int alt7 = 2;
            int LA7_0 = input.LA(1);

            if ((LA7_0 == 169)) {
              alt7 = 1;
            }

            switch (alt7) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotation
              {
                pushFollow(FOLLOW_annotation_in_parenGroupedAnnotationList1368);
                annotation31 = annotation();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotation.add(annotation31.getTree());

              }
                break;

              default:
                if (cnt7 >= 1) break loop7;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(7, input);
                throw eee;
            }
            cnt7++;
          } while (true);

          char_literal32 = (Token) match(
              input,
              168,
              FOLLOW_168_in_parenGroupedAnnotationList1371);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_168.add(char_literal32);

          // AST REWRITE
          // elements: annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 222:41: -> ^( LIST ( annotation )* )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:222:44: ^( LIST ( annotation )* )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:222:51: ( annotation )*
                while (stream_annotation.hasNext()) {
                  adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 14, parenGroupedAnnotationList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "parenGroupedAnnotationList"

  public static class annotation_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotation"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:225:1: annotation : t= '@' ID ( annotationParams )? -> ^( ANNOTATION[$t] ID ^( OPTION ( annotationParams )? ) ) ;
  public final AntlrPilarParser.annotation_return annotation()
      throws RecognitionException {
    AntlrPilarParser.annotation_return retval = new AntlrPilarParser.annotation_return();
    retval.start = input.LT(1);
    int annotation_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID33 = null;
    AntlrPilarParser.annotationParams_return annotationParams34 = null;

    Object t_tree = null;
    Object ID33_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleSubtreeStream stream_annotationParams = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationParams");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 15)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:226:2: (t= '@' ID ( annotationParams )? -> ^( ANNOTATION[$t] ID ^( OPTION ( annotationParams )? ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:226:4: t= '@' ID ( annotationParams )?
      {
        t = (Token) match(input, 169, FOLLOW_169_in_annotation1410);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_169.add(t);

        ID33 = (Token) match(input, ID, FOLLOW_ID_in_annotation1412);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID33);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:226:13: ( annotationParams )?
        int alt9 = 2;
        alt9 = dfa9.predict(input);
        switch (alt9) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotationParams
          {
            pushFollow(FOLLOW_annotationParams_in_annotation1414);
            annotationParams34 = annotationParams();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_annotationParams.add(annotationParams34.getTree());

          }
            break;

        }

        // AST REWRITE
        // elements: annotationParams, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 226:41: -> ^( ANNOTATION[$t] ID ^( OPTION ( annotationParams )? ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:226:44: ^( ANNOTATION[$t] ID ^( OPTION ( annotationParams )? ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ANNOTATION, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:226:64: ^( OPTION ( annotationParams )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:226:73: ( annotationParams )?
                if (stream_annotationParams.hasNext()) {
                  adaptor.addChild(root_2, stream_annotationParams.nextTree());

                }
                stream_annotationParams.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 15, annotation_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotation"

  public static class annotationParams_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotationParams"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:229:1: annotationParams : (t= '(' annotationParam ( ',' annotationParam )* ')' -> ^( LIST[$t] ( annotationParam )+ ) | exp ( ',' exp )* -> ^( LIST ( exp )+ ) );
  public final AntlrPilarParser.annotationParams_return annotationParams()
      throws RecognitionException {
    AntlrPilarParser.annotationParams_return retval = new AntlrPilarParser.annotationParams_return();
    retval.start = input.LT(1);
    int annotationParams_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal36 = null;
    Token char_literal38 = null;
    Token char_literal40 = null;
    AntlrPilarParser.annotationParam_return annotationParam35 = null;

    AntlrPilarParser.annotationParam_return annotationParam37 = null;

    AntlrPilarParser.exp_return exp39 = null;

    AntlrPilarParser.exp_return exp41 = null;

    Object t_tree = null;
    Object char_literal36_tree = null;
    Object char_literal38_tree = null;
    Object char_literal40_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationParam = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 16)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:230:2: (t= '(' annotationParam ( ',' annotationParam )* ')' -> ^( LIST[$t] ( annotationParam )+ ) | exp ( ',' exp )* -> ^( LIST ( exp )+ ) )
      int alt12 = 2;
      alt12 = dfa12.predict(input);
      switch (alt12) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:230:4: t= '(' annotationParam ( ',' annotationParam )* ')'
        {
          t = (Token) match(input, 167, FOLLOW_167_in_annotationParams1458);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_167.add(t);

          pushFollow(FOLLOW_annotationParam_in_annotationParams1460);
          annotationParam35 = annotationParam();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationParam.add(annotationParam35.getTree());
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:231:8: ( ',' annotationParam )*
          loop10: do {
            int alt10 = 2;
            int LA10_0 = input.LA(1);

            if ((LA10_0 == 170)) {
              alt10 = 1;
            }

            switch (alt10) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:231:10: ',' annotationParam
              {
                char_literal36 = (Token) match(
                    input,
                    170,
                    FOLLOW_170_in_annotationParams1471);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_170.add(char_literal36);

                pushFollow(FOLLOW_annotationParam_in_annotationParams1473);
                annotationParam37 = annotationParam();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotationParam.add(annotationParam37.getTree());

              }
                break;

              default:
                break loop10;
            }
          } while (true);

          char_literal38 = (Token) match(
              input,
              168,
              FOLLOW_168_in_annotationParams1478);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_168.add(char_literal38);

          // AST REWRITE
          // elements: annotationParam
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 231:41: -> ^( LIST[$t] ( annotationParam )+ )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:231:44: ^( LIST[$t] ( annotationParam )+ )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, t),
                    root_1);

                if (!(stream_annotationParam.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_annotationParam.hasNext()) {
                  adaptor.addChild(root_1, stream_annotationParam.nextTree());

                }
                stream_annotationParam.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:4: exp ( ',' exp )*
        {
          pushFollow(FOLLOW_exp_in_annotationParams1497);
          exp39 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp39.getTree());
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:8: ( ',' exp )*
          loop11: do {
            int alt11 = 2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:10: ',' exp
              {
                char_literal40 = (Token) match(
                    input,
                    170,
                    FOLLOW_170_in_annotationParams1501);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_170.add(char_literal40);

                pushFollow(FOLLOW_exp_in_annotationParams1503);
                exp41 = exp();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_exp.add(exp41.getTree());

              }
                break;

              default:
                break loop11;
            }
          } while (true);

          // AST REWRITE
          // elements: exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 232:41: -> ^( LIST ( exp )+ )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:44: ^( LIST ( exp )+ )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                if (!(stream_exp.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_exp.hasNext()) {
                  adaptor.addChild(root_1, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 16, annotationParams_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotationParams"

  public static class annotationParam_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotationParam"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:235:1: annotationParam : (t= ID '=' ( annotation | exp ) -> ^( ANNOTATION_PARAM_IDED[$t] ^( OPTION ( ID )? ) ( annotation )? ( exp )? ) | annotation -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) annotation ) | exp -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) exp ) );
  public final AntlrPilarParser.annotationParam_return annotationParam()
      throws RecognitionException {
    AntlrPilarParser.annotationParam_return retval = new AntlrPilarParser.annotationParam_return();
    retval.start = input.LT(1);
    int annotationParam_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal42 = null;
    AntlrPilarParser.annotation_return annotation43 = null;

    AntlrPilarParser.exp_return exp44 = null;

    AntlrPilarParser.annotation_return annotation45 = null;

    AntlrPilarParser.exp_return exp46 = null;

    Object t_tree = null;
    Object char_literal42_tree = null;
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 17)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:2: (t= ID '=' ( annotation | exp ) -> ^( ANNOTATION_PARAM_IDED[$t] ^( OPTION ( ID )? ) ( annotation )? ( exp )? ) | annotation -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) annotation ) | exp -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) exp ) )
      int alt14 = 3;
      switch (input.LA(1)) {
        case ID: {
          int LA14_1 = input.LA(2);

          if ((LA14_1 == 171)) {
            alt14 = 1;
          } else if ((LA14_1 == EOF || (LA14_1 >= HEX_LIT && LA14_1 <= OCT_LIT)
              || LA14_1 == ID || LA14_1 == GLOBALID
              || (LA14_1 >= COND_OR_OP && LA14_1 <= MUL_OP)
              || (LA14_1 >= CHAR_LIT && LA14_1 <= RATIONAL_LIT)
              || (LA14_1 >= 165 && LA14_1 <= 168) || LA14_1 == 170
              || LA14_1 == 175 || LA14_1 == 200
              || (LA14_1 >= 211 && LA14_1 <= 219) || LA14_1 == 221 || LA14_1 == 223)) {
            alt14 = 3;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 14, 1,
                input);

            throw nvae;
          }
        }
          break;
        case 169: {
          alt14 = 2;
        }
          break;
        case HEX_LIT:
        case DEC_LIT:
        case OCT_LIT:
        case GLOBALID:
        case ADD_OP:
        case MUL_OP:
        case UN_OP:
        case CHAR_LIT:
        case STRING_LIT:
        case SYMBOL_LIT:
        case RAW_LIT:
        case BIN_LIT:
        case FLOAT_LIT:
        case RATIONAL_LIT:
        case 167:
        case 175:
        case 202:
        case 206:
        case 213:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 221: {
          alt14 = 3;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 14, 0, input);

          throw nvae;
      }

      switch (alt14) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:4: t= ID '=' ( annotation | exp )
        {
          t = (Token) match(input, ID, FOLLOW_ID_in_annotationParam1549);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_ID.add(t);

          char_literal42 = (Token) match(
              input,
              171,
              FOLLOW_171_in_annotationParam1551);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_171.add(char_literal42);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:13: ( annotation | exp )
          int alt13 = 2;
          int LA13_0 = input.LA(1);

          if ((LA13_0 == 169)) {
            alt13 = 1;
          } else if (((LA13_0 >= HEX_LIT && LA13_0 <= OCT_LIT) || LA13_0 == ID
              || LA13_0 == GLOBALID
              || (LA13_0 >= ADD_OP && LA13_0 <= RATIONAL_LIT) || LA13_0 == 167
              || LA13_0 == 175 || LA13_0 == 202 || LA13_0 == 206
              || LA13_0 == 213 || (LA13_0 >= 215 && LA13_0 <= 219) || LA13_0 == 221)) {
            alt13 = 2;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 13, 0,
                input);

            throw nvae;
          }
          switch (alt13) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:15: annotation
            {
              pushFollow(FOLLOW_annotation_in_annotationParam1555);
              annotation43 = annotation();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_annotation.add(annotation43.getTree());

            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:28: exp
            {
              pushFollow(FOLLOW_exp_in_annotationParam1559);
              exp44 = exp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_exp.add(exp44.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: exp, annotation, ID
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 236:41: -> ^( ANNOTATION_PARAM_IDED[$t] ^( OPTION ( ID )? ) ( annotation )? ( exp )? )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:44: ^( ANNOTATION_PARAM_IDED[$t] ^( OPTION ( ID )? ) ( annotation )? ( exp )? )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ANNOTATION_PARAM_IDED, t),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:72: ^( OPTION ( ID )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:81: ( ID )?
                  if (stream_ID.hasNext()) {
                    adaptor.addChild(root_2, stream_ID.nextNode());

                  }
                  stream_ID.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:86: ( annotation )?
                if (stream_annotation.hasNext()) {
                  adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:236:98: ( exp )?
                if (stream_exp.hasNext()) {
                  adaptor.addChild(root_1, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:237:4: annotation
        {
          pushFollow(FOLLOW_annotation_in_annotationParam1593);
          annotation45 = annotation();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotation.add(annotation45.getTree());

          // AST REWRITE
          // elements: annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 237:41: -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) annotation )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:237:44: ^( ANNOTATION_PARAM_IDED ^( OPTION ) annotation )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                    ANNOTATION_PARAM_IDED,
                    "ANNOTATION_PARAM_IDED"), root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:237:68: ^( OPTION )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_annotation.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:4: exp
        {
          pushFollow(FOLLOW_exp_in_annotationParam1636);
          exp46 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp46.getTree());

          // AST REWRITE
          // elements: exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 238:41: -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) exp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:44: ^( ANNOTATION_PARAM_IDED ^( OPTION ) exp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                    ANNOTATION_PARAM_IDED,
                    "ANNOTATION_PARAM_IDED"), root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:68: ^( OPTION )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 17, annotationParam_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotationParam"

  public static class packageDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "packageDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:241:1: packageDeclaration : t= 'package' name annotationList ';' ( packageElement )+ -> ^( PACKAGE[$t] name annotationList ^( LIST ( packageElement )+ ) ) ;
  public final AntlrPilarParser.packageDeclaration_return packageDeclaration()
      throws RecognitionException {
    AntlrPilarParser.packageDeclaration_return retval = new AntlrPilarParser.packageDeclaration_return();
    retval.start = input.LT(1);
    int packageDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal49 = null;
    AntlrPilarParser.name_return name47 = null;

    AntlrPilarParser.annotationList_return annotationList48 = null;

    AntlrPilarParser.packageElement_return packageElement50 = null;

    Object t_tree = null;
    Object char_literal49_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleSubtreeStream stream_packageElement = new RewriteRuleSubtreeStream(
        adaptor, "rule packageElement");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 18)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:242:2: (t= 'package' name annotationList ';' ( packageElement )+ -> ^( PACKAGE[$t] name annotationList ^( LIST ( packageElement )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:242:4: t= 'package' name annotationList ';' ( packageElement )+
      {
        t = (Token) match(input, 172, FOLLOW_172_in_packageDeclaration1694);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_172.add(t);

        pushFollow(FOLLOW_name_in_packageDeclaration1696);
        name47 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name47.getTree());
        pushFollow(FOLLOW_annotationList_in_packageDeclaration1698);
        annotationList48 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList48.getTree());
        char_literal49 = (Token) match(
            input,
            173,
            FOLLOW_173_in_packageDeclaration1700);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal49);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:243:4: ( packageElement )+
        int cnt15 = 0;
        loop15: do {
          int alt15 = 2;
          int LA15_0 = input.LA(1);

          if ((LA15_0 == 174 || (LA15_0 >= 177 && LA15_0 <= 179)
              || (LA15_0 >= 181 && LA15_0 <= 182) || (LA15_0 >= 184 && LA15_0 <= 186))) {
            alt15 = 1;
          }

          switch (alt15) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: packageElement
            {
              pushFollow(FOLLOW_packageElement_in_packageDeclaration1705);
              packageElement50 = packageElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_packageElement.add(packageElement50.getTree());

            }
              break;

            default:
              if (cnt15 >= 1) break loop15;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(15, input);
              throw eee;
          }
          cnt15++;
        } while (true);

        // AST REWRITE
        // elements: annotationList, packageElement, name
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 243:41: -> ^( PACKAGE[$t] name annotationList ^( LIST ( packageElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:243:44: ^( PACKAGE[$t] name annotationList ^( LIST ( packageElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PACKAGE, t),
                  root_1);

              adaptor.addChild(root_1, stream_name.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:243:78: ^( LIST ( packageElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_packageElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_packageElement.hasNext()) {
                  adaptor.addChild(root_2, stream_packageElement.nextTree());

                }
                stream_packageElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 18, packageDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "packageDeclaration"

  public static class packageElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "packageElement"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:246:1: packageElement : ( constDeclaration | enumDeclaration | typealiasDeclaration | recordDeclaration | globalVarsDeclaration | procedureDeclaration | virtualSetDeclaration | funexpDeclaration | extDeclaration );
  public final AntlrPilarParser.packageElement_return packageElement()
      throws RecognitionException {
    AntlrPilarParser.packageElement_return retval = new AntlrPilarParser.packageElement_return();
    retval.start = input.LT(1);
    int packageElement_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.constDeclaration_return constDeclaration51 = null;

    AntlrPilarParser.enumDeclaration_return enumDeclaration52 = null;

    AntlrPilarParser.typealiasDeclaration_return typealiasDeclaration53 = null;

    AntlrPilarParser.recordDeclaration_return recordDeclaration54 = null;

    AntlrPilarParser.globalVarsDeclaration_return globalVarsDeclaration55 = null;

    AntlrPilarParser.procedureDeclaration_return procedureDeclaration56 = null;

    AntlrPilarParser.virtualSetDeclaration_return virtualSetDeclaration57 = null;

    AntlrPilarParser.funexpDeclaration_return funexpDeclaration58 = null;

    AntlrPilarParser.extDeclaration_return extDeclaration59 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 19)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:247:2: ( constDeclaration | enumDeclaration | typealiasDeclaration | recordDeclaration | globalVarsDeclaration | procedureDeclaration | virtualSetDeclaration | funexpDeclaration | extDeclaration )
      int alt16 = 9;
      switch (input.LA(1)) {
        case 174: {
          alt16 = 1;
        }
          break;
        case 177: {
          alt16 = 2;
        }
          break;
        case 178: {
          alt16 = 3;
        }
          break;
        case 179: {
          alt16 = 4;
        }
          break;
        case 181: {
          alt16 = 5;
        }
          break;
        case 182: {
          alt16 = 6;
        }
          break;
        case 184: {
          alt16 = 7;
        }
          break;
        case 185: {
          alt16 = 8;
        }
          break;
        case 186: {
          alt16 = 9;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 16, 0, input);

          throw nvae;
      }

      switch (alt16) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:247:4: constDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_constDeclaration_in_packageElement1757);
          constDeclaration51 = constDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, constDeclaration51.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:248:4: enumDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_enumDeclaration_in_packageElement1762);
          enumDeclaration52 = enumDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, enumDeclaration52.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:249:4: typealiasDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_typealiasDeclaration_in_packageElement1767);
          typealiasDeclaration53 = typealiasDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, typealiasDeclaration53.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:250:4: recordDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_recordDeclaration_in_packageElement1772);
          recordDeclaration54 = recordDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, recordDeclaration54.getTree());

        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:251:4: globalVarsDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_globalVarsDeclaration_in_packageElement1777);
          globalVarsDeclaration55 = globalVarsDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, globalVarsDeclaration55.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:252:4: procedureDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_procedureDeclaration_in_packageElement1782);
          procedureDeclaration56 = procedureDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, procedureDeclaration56.getTree());

        }
          break;
        case 7:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:253:4: virtualSetDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_virtualSetDeclaration_in_packageElement1787);
          virtualSetDeclaration57 = virtualSetDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, virtualSetDeclaration57.getTree());

        }
          break;
        case 8:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:254:4: funexpDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_funexpDeclaration_in_packageElement1792);
          funexpDeclaration58 = funexpDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, funexpDeclaration58.getTree());

        }
          break;
        case 9:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:255:4: extDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_extDeclaration_in_packageElement1797);
          extDeclaration59 = extDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, extDeclaration59.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 19, packageElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "packageElement"

  public static class constDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "constDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:258:1: constDeclaration : t= 'const' ID annotationList '{' ( constElement )+ '}' -> ^( CONST[$t] ID annotationList ^( LIST ( constElement )+ ) ) ;
  public final AntlrPilarParser.constDeclaration_return constDeclaration()
      throws RecognitionException {
    AntlrPilarParser.constDeclaration_return retval = new AntlrPilarParser.constDeclaration_return();
    retval.start = input.LT(1);
    int constDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID60 = null;
    Token char_literal62 = null;
    Token char_literal64 = null;
    AntlrPilarParser.annotationList_return annotationList61 = null;

    AntlrPilarParser.constElement_return constElement63 = null;

    Object t_tree = null;
    Object ID60_tree = null;
    Object char_literal62_tree = null;
    Object char_literal64_tree = null;
    RewriteRuleTokenStream stream_174 = new RewriteRuleTokenStream(adaptor,
        "token 174");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_constElement = new RewriteRuleSubtreeStream(
        adaptor, "rule constElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 20)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:259:2: (t= 'const' ID annotationList '{' ( constElement )+ '}' -> ^( CONST[$t] ID annotationList ^( LIST ( constElement )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:259:4: t= 'const' ID annotationList '{' ( constElement )+ '}'
      {
        t = (Token) match(input, 174, FOLLOW_174_in_constDeclaration1810);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_174.add(t);

        ID60 = (Token) match(input, ID, FOLLOW_ID_in_constDeclaration1812);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID60);

        pushFollow(FOLLOW_annotationList_in_constDeclaration1814);
        annotationList61 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList61.getTree());
        char_literal62 = (Token) match(
            input,
            175,
            FOLLOW_175_in_constDeclaration1819);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal62);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:260:8: ( constElement )+
        int cnt17 = 0;
        loop17: do {
          int alt17 = 2;
          int LA17_0 = input.LA(1);

          if ((LA17_0 == ID)) {
            alt17 = 1;
          }

          switch (alt17) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: constElement
            {
              pushFollow(FOLLOW_constElement_in_constDeclaration1821);
              constElement63 = constElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_constElement.add(constElement63.getTree());

            }
              break;

            default:
              if (cnt17 >= 1) break loop17;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(17, input);
              throw eee;
          }
          cnt17++;
        } while (true);

        char_literal64 = (Token) match(
            input,
            176,
            FOLLOW_176_in_constDeclaration1824);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal64);

        // AST REWRITE
        // elements: annotationList, constElement, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 260:41: -> ^( CONST[$t] ID annotationList ^( LIST ( constElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:260:44: ^( CONST[$t] ID annotationList ^( LIST ( constElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(CONST, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:260:74: ^( LIST ( constElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_constElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_constElement.hasNext()) {
                  adaptor.addChild(root_2, stream_constElement.nextTree());

                }
                stream_constElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 20, constDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "constDeclaration"

  public static class constElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "constElement"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:263:1: constElement : t= ID '=' exp annotationList ';' -> ^( CONST_ELEMENT[$t] ID exp annotationList ) ;
  public final AntlrPilarParser.constElement_return constElement()
      throws RecognitionException {
    AntlrPilarParser.constElement_return retval = new AntlrPilarParser.constElement_return();
    retval.start = input.LT(1);
    int constElement_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal65 = null;
    Token char_literal68 = null;
    AntlrPilarParser.exp_return exp66 = null;

    AntlrPilarParser.annotationList_return annotationList67 = null;

    Object t_tree = null;
    Object char_literal65_tree = null;
    Object char_literal68_tree = null;
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 21)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:264:2: (t= ID '=' exp annotationList ';' -> ^( CONST_ELEMENT[$t] ID exp annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:264:4: t= ID '=' exp annotationList ';'
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_constElement1870);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        char_literal65 = (Token) match(
            input,
            171,
            FOLLOW_171_in_constElement1872);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_171.add(char_literal65);

        pushFollow(FOLLOW_exp_in_constElement1877);
        exp66 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp66.getTree());
        pushFollow(FOLLOW_annotationList_in_constElement1879);
        annotationList67 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList67.getTree());
        char_literal68 = (Token) match(
            input,
            173,
            FOLLOW_173_in_constElement1881);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal68);

        // AST REWRITE
        // elements: annotationList, exp, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 265:41: -> ^( CONST_ELEMENT[$t] ID exp annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:265:44: ^( CONST_ELEMENT[$t] ID exp annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(CONST_ELEMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 21, constElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "constElement"

  public static class enumDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "enumDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:268:1: enumDeclaration : t= 'enum' ID annotationList '{' enumElement ( ',' enumElement )* '}' -> ^( ENUM[$t] ID annotationList ^( LIST ( enumElement )+ ) ) ;
  public final AntlrPilarParser.enumDeclaration_return enumDeclaration()
      throws RecognitionException {
    AntlrPilarParser.enumDeclaration_return retval = new AntlrPilarParser.enumDeclaration_return();
    retval.start = input.LT(1);
    int enumDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID69 = null;
    Token char_literal71 = null;
    Token char_literal73 = null;
    Token char_literal75 = null;
    AntlrPilarParser.annotationList_return annotationList70 = null;

    AntlrPilarParser.enumElement_return enumElement72 = null;

    AntlrPilarParser.enumElement_return enumElement74 = null;

    Object t_tree = null;
    Object ID69_tree = null;
    Object char_literal71_tree = null;
    Object char_literal73_tree = null;
    Object char_literal75_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_enumElement = new RewriteRuleSubtreeStream(
        adaptor, "rule enumElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 22)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:269:2: (t= 'enum' ID annotationList '{' enumElement ( ',' enumElement )* '}' -> ^( ENUM[$t] ID annotationList ^( LIST ( enumElement )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:269:4: t= 'enum' ID annotationList '{' enumElement ( ',' enumElement )* '}'
      {
        t = (Token) match(input, 177, FOLLOW_177_in_enumDeclaration1922);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(t);

        ID69 = (Token) match(input, ID, FOLLOW_ID_in_enumDeclaration1924);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID69);

        pushFollow(FOLLOW_annotationList_in_enumDeclaration1926);
        annotationList70 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList70.getTree());
        char_literal71 = (Token) match(
            input,
            175,
            FOLLOW_175_in_enumDeclaration1931);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal71);

        pushFollow(FOLLOW_enumElement_in_enumDeclaration1933);
        enumElement72 = enumElement();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_enumElement.add(enumElement72.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:271:4: ( ',' enumElement )*
        loop18: do {
          int alt18 = 2;
          int LA18_0 = input.LA(1);

          if ((LA18_0 == 170)) {
            alt18 = 1;
          }

          switch (alt18) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:271:6: ',' enumElement
            {
              char_literal73 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_enumDeclaration1940);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal73);

              pushFollow(FOLLOW_enumElement_in_enumDeclaration1942);
              enumElement74 = enumElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_enumElement.add(enumElement74.getTree());

            }
              break;

            default:
              break loop18;
          }
        } while (true);

        char_literal75 = (Token) match(
            input,
            176,
            FOLLOW_176_in_enumDeclaration1947);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal75);

        // AST REWRITE
        // elements: enumElement, ID, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 271:41: -> ^( ENUM[$t] ID annotationList ^( LIST ( enumElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:271:44: ^( ENUM[$t] ID annotationList ^( LIST ( enumElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ENUM, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:271:73: ^( LIST ( enumElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_enumElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_enumElement.hasNext()) {
                  adaptor.addChild(root_2, stream_enumElement.nextTree());

                }
                stream_enumElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 22, enumDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "enumDeclaration"

  public static class enumElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "enumElement"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:274:1: enumElement : t= ID annotationList -> ^( ENUM_ELEMENT[$t] ID annotationList ) ;
  public final AntlrPilarParser.enumElement_return enumElement()
      throws RecognitionException {
    AntlrPilarParser.enumElement_return retval = new AntlrPilarParser.enumElement_return();
    retval.start = input.LT(1);
    int enumElement_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList76 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 23)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:275:2: (t= ID annotationList -> ^( ENUM_ELEMENT[$t] ID annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:275:4: t= ID annotationList
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_enumElement1990);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        pushFollow(FOLLOW_annotationList_in_enumElement1992);
        annotationList76 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList76.getTree());

        // AST REWRITE
        // elements: annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 275:41: -> ^( ENUM_ELEMENT[$t] ID annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:275:44: ^( ENUM_ELEMENT[$t] ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ENUM_ELEMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 23, enumElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "enumElement"

  public static class typealiasDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typealiasDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:278:1: typealiasDeclaration : t= 'typealias' type ID annotationList ';' -> ^( TYPEALIAS[$t] type ID annotationList ) ;
  public final AntlrPilarParser.typealiasDeclaration_return typealiasDeclaration()
      throws RecognitionException {
    AntlrPilarParser.typealiasDeclaration_return retval = new AntlrPilarParser.typealiasDeclaration_return();
    retval.start = input.LT(1);
    int typealiasDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID78 = null;
    Token char_literal80 = null;
    AntlrPilarParser.type_return type77 = null;

    AntlrPilarParser.annotationList_return annotationList79 = null;

    Object t_tree = null;
    Object ID78_tree = null;
    Object char_literal80_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 24)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:279:2: (t= 'typealias' type ID annotationList ';' -> ^( TYPEALIAS[$t] type ID annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:279:4: t= 'typealias' type ID annotationList ';'
      {
        t = (Token) match(input, 178, FOLLOW_178_in_typealiasDeclaration2033);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(t);

        pushFollow(FOLLOW_type_in_typealiasDeclaration2035);
        type77 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type77.getTree());
        ID78 = (Token) match(input, ID, FOLLOW_ID_in_typealiasDeclaration2037);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID78);

        pushFollow(FOLLOW_annotationList_in_typealiasDeclaration2045);
        annotationList79 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList79.getTree());
        char_literal80 = (Token) match(
            input,
            173,
            FOLLOW_173_in_typealiasDeclaration2047);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal80);

        // AST REWRITE
        // elements: type, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 280:41: -> ^( TYPEALIAS[$t] type ID annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:280:44: ^( TYPEALIAS[$t] type ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPEALIAS, t),
                  root_1);

              adaptor.addChild(root_1, stream_type.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 24, typealiasDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typealiasDeclaration"

  public static class recordDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "recordDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:283:1: recordDeclaration : t= 'record' ID ( typeVarTuple )? annotationList ( extendClause )? '{' ( attribute )* '}' -> ^( RECORD[$t] ID ^( OPTION ( typeVarTuple )? ) annotationList ^( OPTION ( extendClause )? ) ^( LIST ( attribute )* ) ) ;
  public final AntlrPilarParser.recordDeclaration_return recordDeclaration()
      throws RecognitionException {
    AntlrPilarParser.recordDeclaration_return retval = new AntlrPilarParser.recordDeclaration_return();
    retval.start = input.LT(1);
    int recordDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID81 = null;
    Token char_literal85 = null;
    Token char_literal87 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple82 = null;

    AntlrPilarParser.annotationList_return annotationList83 = null;

    AntlrPilarParser.extendClause_return extendClause84 = null;

    AntlrPilarParser.attribute_return attribute86 = null;

    Object t_tree = null;
    Object ID81_tree = null;
    Object char_literal85_tree = null;
    Object char_literal87_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_179 = new RewriteRuleTokenStream(adaptor,
        "token 179");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_extendClause = new RewriteRuleSubtreeStream(
        adaptor, "rule extendClause");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_attribute = new RewriteRuleSubtreeStream(
        adaptor, "rule attribute");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 25)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:284:2: (t= 'record' ID ( typeVarTuple )? annotationList ( extendClause )? '{' ( attribute )* '}' -> ^( RECORD[$t] ID ^( OPTION ( typeVarTuple )? ) annotationList ^( OPTION ( extendClause )? ) ^( LIST ( attribute )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:284:4: t= 'record' ID ( typeVarTuple )? annotationList ( extendClause )? '{' ( attribute )* '}'
      {
        t = (Token) match(input, 179, FOLLOW_179_in_recordDeclaration2090);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_179.add(t);

        ID81 = (Token) match(input, ID, FOLLOW_ID_in_recordDeclaration2095);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID81);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:285:7: ( typeVarTuple )?
        int alt19 = 2;
        int LA19_0 = input.LA(1);

        if ((LA19_0 == 165)) {
          int LA19_1 = input.LA(2);

          if ((LA19_1 == TYPEVARID)) {
            alt19 = 1;
          }
        }
        switch (alt19) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_recordDeclaration2097);
            typeVarTuple82 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple82.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_recordDeclaration2100);
        annotationList83 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList83.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:286:4: ( extendClause )?
        int alt20 = 2;
        int LA20_0 = input.LA(1);

        if ((LA20_0 == 180)) {
          alt20 = 1;
        }
        switch (alt20) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: extendClause
          {
            pushFollow(FOLLOW_extendClause_in_recordDeclaration2105);
            extendClause84 = extendClause();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_extendClause.add(extendClause84.getTree());

          }
            break;

        }

        char_literal85 = (Token) match(
            input,
            175,
            FOLLOW_175_in_recordDeclaration2111);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal85);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:8: ( attribute )*
        loop21: do {
          int alt21 = 2;
          int LA21_0 = input.LA(1);

          if (((LA21_0 >= ID && LA21_0 <= TYPEVARID) || LA21_0 == 167 || LA21_0 == 175)) {
            alt21 = 1;
          }

          switch (alt21) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: attribute
            {
              pushFollow(FOLLOW_attribute_in_recordDeclaration2113);
              attribute86 = attribute();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_attribute.add(attribute86.getTree());

            }
              break;

            default:
              break loop21;
          }
        } while (true);

        char_literal87 = (Token) match(
            input,
            176,
            FOLLOW_176_in_recordDeclaration2116);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal87);

        // AST REWRITE
        // elements: attribute, extendClause, annotationList, typeVarTuple, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 287:41: -> ^( RECORD[$t] ID ^( OPTION ( typeVarTuple )? ) annotationList ^( OPTION ( extendClause )? ) ^( LIST ( attribute )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:44: ^( RECORD[$t] ID ^( OPTION ( typeVarTuple )? ) annotationList ^( OPTION ( extendClause )? ) ^( LIST ( attribute )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(RECORD, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:60: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:69: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:99: ^( OPTION ( extendClause )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:108: ( extendClause )?
                if (stream_extendClause.hasNext()) {
                  adaptor.addChild(root_2, stream_extendClause.nextTree());

                }
                stream_extendClause.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:123: ^( LIST ( attribute )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:130: ( attribute )*
                while (stream_attribute.hasNext()) {
                  adaptor.addChild(root_2, stream_attribute.nextTree());

                }
                stream_attribute.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 25, recordDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "recordDeclaration"

  public static class typeVarTuple_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeVarTuple"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:290:1: typeVarTuple : t= '<' typeVar ( ',' typeVar )* '>' -> ^( TYPEVAR_TUPLE[$t] ^( LIST ( typeVar )+ ) ) ;
  public final AntlrPilarParser.typeVarTuple_return typeVarTuple()
      throws RecognitionException {
    AntlrPilarParser.typeVarTuple_return retval = new AntlrPilarParser.typeVarTuple_return();
    retval.start = input.LT(1);
    int typeVarTuple_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal89 = null;
    Token char_literal91 = null;
    AntlrPilarParser.typeVar_return typeVar88 = null;

    AntlrPilarParser.typeVar_return typeVar90 = null;

    Object t_tree = null;
    Object char_literal89_tree = null;
    Object char_literal91_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_166 = new RewriteRuleTokenStream(adaptor,
        "token 166");
    RewriteRuleTokenStream stream_165 = new RewriteRuleTokenStream(adaptor,
        "token 165");
    RewriteRuleSubtreeStream stream_typeVar = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVar");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 26)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:291:2: (t= '<' typeVar ( ',' typeVar )* '>' -> ^( TYPEVAR_TUPLE[$t] ^( LIST ( typeVar )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:291:4: t= '<' typeVar ( ',' typeVar )* '>'
      {
        t = (Token) match(input, 165, FOLLOW_165_in_typeVarTuple2180);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_165.add(t);

        pushFollow(FOLLOW_typeVar_in_typeVarTuple2182);
        typeVar88 = typeVar();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_typeVar.add(typeVar88.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:291:18: ( ',' typeVar )*
        loop22: do {
          int alt22 = 2;
          int LA22_0 = input.LA(1);

          if ((LA22_0 == 170)) {
            alt22 = 1;
          }

          switch (alt22) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:291:20: ',' typeVar
            {
              char_literal89 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_typeVarTuple2186);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal89);

              pushFollow(FOLLOW_typeVar_in_typeVarTuple2188);
              typeVar90 = typeVar();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeVar.add(typeVar90.getTree());

            }
              break;

            default:
              break loop22;
          }
        } while (true);

        char_literal91 = (Token) match(
            input,
            166,
            FOLLOW_166_in_typeVarTuple2193);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_166.add(char_literal91);

        // AST REWRITE
        // elements: typeVar
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 291:41: -> ^( TYPEVAR_TUPLE[$t] ^( LIST ( typeVar )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:291:44: ^( TYPEVAR_TUPLE[$t] ^( LIST ( typeVar )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPEVAR_TUPLE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:291:64: ^( LIST ( typeVar )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_typeVar.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_typeVar.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVar.nextTree());

                }
                stream_typeVar.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 26, typeVarTuple_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeVarTuple"

  public static class typeVar_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeVar"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:294:1: typeVar : t= TYPEVARID annotationList -> ^( TYPEVAR[$t] TYPEVARID annotationList ) ;
  public final AntlrPilarParser.typeVar_return typeVar()
      throws RecognitionException {
    AntlrPilarParser.typeVar_return retval = new AntlrPilarParser.typeVar_return();
    retval.start = input.LT(1);
    int typeVar_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList92 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_TYPEVARID = new RewriteRuleTokenStream(
        adaptor, "token TYPEVARID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 27)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:295:2: (t= TYPEVARID annotationList -> ^( TYPEVAR[$t] TYPEVARID annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:295:4: t= TYPEVARID annotationList
      {
        t = (Token) match(input, TYPEVARID, FOLLOW_TYPEVARID_in_typeVar2222);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_TYPEVARID.add(t);

        pushFollow(FOLLOW_annotationList_in_typeVar2224);
        annotationList92 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList92.getTree());

        // AST REWRITE
        // elements: annotationList, TYPEVARID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 295:41: -> ^( TYPEVAR[$t] TYPEVARID annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:295:44: ^( TYPEVAR[$t] TYPEVARID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPEVAR, t),
                  root_1);

              adaptor.addChild(root_1, stream_TYPEVARID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 27, typeVar_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeVar"

  public static class extendClause_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extendClause"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:298:1: extendClause : t= 'extends' extendClauseElement ( ',' extendClauseElement )* -> ^( LIST[$t] ( extendClauseElement )+ ) ;
  public final AntlrPilarParser.extendClause_return extendClause()
      throws RecognitionException {
    AntlrPilarParser.extendClause_return retval = new AntlrPilarParser.extendClause_return();
    retval.start = input.LT(1);
    int extendClause_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal94 = null;
    AntlrPilarParser.extendClauseElement_return extendClauseElement93 = null;

    AntlrPilarParser.extendClauseElement_return extendClauseElement95 = null;

    Object t_tree = null;
    Object char_literal94_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_180 = new RewriteRuleTokenStream(adaptor,
        "token 180");
    RewriteRuleSubtreeStream stream_extendClauseElement = new RewriteRuleSubtreeStream(
        adaptor, "rule extendClauseElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 28)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:299:2: (t= 'extends' extendClauseElement ( ',' extendClauseElement )* -> ^( LIST[$t] ( extendClauseElement )+ ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:299:4: t= 'extends' extendClauseElement ( ',' extendClauseElement )*
      {
        t = (Token) match(input, 180, FOLLOW_180_in_extendClause2258);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_180.add(t);

        pushFollow(FOLLOW_extendClauseElement_in_extendClause2260);
        extendClauseElement93 = extendClauseElement();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_extendClauseElement.add(extendClauseElement93.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:300:4: ( ',' extendClauseElement )*
        loop23: do {
          int alt23 = 2;
          int LA23_0 = input.LA(1);

          if ((LA23_0 == 170)) {
            alt23 = 1;
          }

          switch (alt23) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:300:6: ',' extendClauseElement
            {
              char_literal94 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_extendClause2267);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal94);

              pushFollow(FOLLOW_extendClauseElement_in_extendClause2269);
              extendClauseElement95 = extendClauseElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_extendClauseElement.add(extendClauseElement95.getTree());

            }
              break;

            default:
              break loop23;
          }
        } while (true);

        // AST REWRITE
        // elements: extendClauseElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 300:41: -> ^( LIST[$t] ( extendClauseElement )+ )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:300:44: ^( LIST[$t] ( extendClauseElement )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, t),
                  root_1);

              if (!(stream_extendClauseElement.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_extendClauseElement.hasNext()) {
                adaptor.addChild(root_1, stream_extendClauseElement.nextTree());

              }
              stream_extendClauseElement.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 28, extendClause_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extendClause"

  public static class extendClauseElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extendClauseElement"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:303:1: extendClauseElement : name ( typeTuple )? annotationList -> ^( EXTENDCLAUSE_ELEMENT name ^( OPTION ( typeTuple )? ) annotationList ) ;
  public final AntlrPilarParser.extendClauseElement_return extendClauseElement()
      throws RecognitionException {
    AntlrPilarParser.extendClauseElement_return retval = new AntlrPilarParser.extendClauseElement_return();
    retval.start = input.LT(1);
    int extendClauseElement_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.name_return name96 = null;

    AntlrPilarParser.typeTuple_return typeTuple97 = null;

    AntlrPilarParser.annotationList_return annotationList98 = null;

    RewriteRuleSubtreeStream stream_typeTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeTuple");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 29)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:304:2: ( name ( typeTuple )? annotationList -> ^( EXTENDCLAUSE_ELEMENT name ^( OPTION ( typeTuple )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:304:4: name ( typeTuple )? annotationList
      {
        pushFollow(FOLLOW_name_in_extendClauseElement2301);
        name96 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name96.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:304:9: ( typeTuple )?
        int alt24 = 2;
        int LA24_0 = input.LA(1);

        if ((LA24_0 == 165)) {
          int LA24_1 = input.LA(2);

          if (((LA24_1 >= ID && LA24_1 <= TYPEVARID) || LA24_1 == 167 || LA24_1 == 175)) {
            alt24 = 1;
          }
        }
        switch (alt24) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeTuple
          {
            pushFollow(FOLLOW_typeTuple_in_extendClauseElement2303);
            typeTuple97 = typeTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeTuple.add(typeTuple97.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_extendClauseElement2306);
        annotationList98 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList98.getTree());

        // AST REWRITE
        // elements: name, typeTuple, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 304:41: -> ^( EXTENDCLAUSE_ELEMENT name ^( OPTION ( typeTuple )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:304:44: ^( EXTENDCLAUSE_ELEMENT name ^( OPTION ( typeTuple )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                  EXTENDCLAUSE_ELEMENT,
                  "EXTENDCLAUSE_ELEMENT"), root_1);

              adaptor.addChild(root_1, stream_name.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:304:72: ^( OPTION ( typeTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:304:81: ( typeTuple )?
                if (stream_typeTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeTuple.nextTree());

                }
                stream_typeTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 29, extendClauseElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extendClauseElement"

  public static class typeTuple_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeTuple"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:307:1: typeTuple : t= '<' type ( ',' type )* '>' -> ^( TYPE_TUPLE[$t] ^( LIST ( type )+ ) ) ;
  public final AntlrPilarParser.typeTuple_return typeTuple()
      throws RecognitionException {
    AntlrPilarParser.typeTuple_return retval = new AntlrPilarParser.typeTuple_return();
    retval.start = input.LT(1);
    int typeTuple_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal100 = null;
    Token char_literal102 = null;
    AntlrPilarParser.type_return type99 = null;

    AntlrPilarParser.type_return type101 = null;

    Object t_tree = null;
    Object char_literal100_tree = null;
    Object char_literal102_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_166 = new RewriteRuleTokenStream(adaptor,
        "token 166");
    RewriteRuleTokenStream stream_165 = new RewriteRuleTokenStream(adaptor,
        "token 165");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 30)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:308:2: (t= '<' type ( ',' type )* '>' -> ^( TYPE_TUPLE[$t] ^( LIST ( type )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:308:4: t= '<' type ( ',' type )* '>'
      {
        t = (Token) match(input, 165, FOLLOW_165_in_typeTuple2343);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_165.add(t);

        pushFollow(FOLLOW_type_in_typeTuple2345);
        type99 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type99.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:308:15: ( ',' type )*
        loop25: do {
          int alt25 = 2;
          int LA25_0 = input.LA(1);

          if ((LA25_0 == 170)) {
            alt25 = 1;
          }

          switch (alt25) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:308:17: ',' type
            {
              char_literal100 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_typeTuple2349);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal100);

              pushFollow(FOLLOW_type_in_typeTuple2351);
              type101 = type();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_type.add(type101.getTree());

            }
              break;

            default:
              break loop25;
          }
        } while (true);

        char_literal102 = (Token) match(input, 166, FOLLOW_166_in_typeTuple2356);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_166.add(char_literal102);

        // AST REWRITE
        // elements: type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 308:41: -> ^( TYPE_TUPLE[$t] ^( LIST ( type )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:308:44: ^( TYPE_TUPLE[$t] ^( LIST ( type )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE_TUPLE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:308:61: ^( LIST ( type )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_type.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 30, typeTuple_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeTuple"

  public static class attribute_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "attribute"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:311:1: attribute : ( type )? attributeFragment ( ',' attributeFragment )* ';' -> ^( ATTRIBUTE ^( OPTION ( type )? ) ^( LIST ( attributeFragment )+ ) ) ;
  public final AntlrPilarParser.attribute_return attribute()
      throws RecognitionException {
    AntlrPilarParser.attribute_return retval = new AntlrPilarParser.attribute_return();
    retval.start = input.LT(1);
    int attribute_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal105 = null;
    Token char_literal107 = null;
    AntlrPilarParser.type_return type103 = null;

    AntlrPilarParser.attributeFragment_return attributeFragment104 = null;

    AntlrPilarParser.attributeFragment_return attributeFragment106 = null;

    Object char_literal105_tree = null;
    Object char_literal107_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    RewriteRuleSubtreeStream stream_attributeFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule attributeFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 31)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:312:2: ( ( type )? attributeFragment ( ',' attributeFragment )* ';' -> ^( ATTRIBUTE ^( OPTION ( type )? ) ^( LIST ( attributeFragment )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:312:4: ( type )? attributeFragment ( ',' attributeFragment )* ';'
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:312:4: ( type )?
        int alt26 = 2;
        int LA26_0 = input.LA(1);

        if ((LA26_0 == TYPEVARID || LA26_0 == 167 || LA26_0 == 175)) {
          alt26 = 1;
        } else if ((LA26_0 == ID)) {
          int LA26_2 = input.LA(2);

          if ((LA26_2 == ID || LA26_2 == 175 || LA26_2 == 200
              || (LA26_2 >= 213 && LA26_2 <= 214) || LA26_2 == 223)) {
            alt26 = 1;
          } else if ((LA26_2 == 165)) {
            int LA26_3 = input.LA(3);

            if (((LA26_3 >= ID && LA26_3 <= TYPEVARID) || LA26_3 == 167 || LA26_3 == 175)) {
              alt26 = 1;
            }
          }
        }
        switch (alt26) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_attribute2389);
            type103 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type103.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_attributeFragment_in_attribute2392);
        attributeFragment104 = attributeFragment();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_attributeFragment.add(attributeFragment104.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:313:4: ( ',' attributeFragment )*
        loop27: do {
          int alt27 = 2;
          int LA27_0 = input.LA(1);

          if ((LA27_0 == 170)) {
            alt27 = 1;
          }

          switch (alt27) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:313:6: ',' attributeFragment
            {
              char_literal105 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_attribute2399);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal105);

              pushFollow(FOLLOW_attributeFragment_in_attribute2401);
              attributeFragment106 = attributeFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_attributeFragment.add(attributeFragment106.getTree());

            }
              break;

            default:
              break loop27;
          }
        } while (true);

        char_literal107 = (Token) match(input, 173, FOLLOW_173_in_attribute2406);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal107);

        // AST REWRITE
        // elements: type, attributeFragment
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 313:41: -> ^( ATTRIBUTE ^( OPTION ( type )? ) ^( LIST ( attributeFragment )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:313:44: ^( ATTRIBUTE ^( OPTION ( type )? ) ^( LIST ( attributeFragment )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ATTRIBUTE, "ATTRIBUTE"),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:313:56: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:313:65: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:313:72: ^( LIST ( attributeFragment )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_attributeFragment.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_attributeFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_attributeFragment.nextTree());

                }
                stream_attributeFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 31, attribute_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "attribute"

  public static class attributeFragment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "attributeFragment"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:316:1: attributeFragment : t= ID annotationList ( '=' name )? -> ^( ATTRIBUTE_FRAGMENT[$t] ID annotationList ^( OPTION ( name )? ) ) ;
  public final AntlrPilarParser.attributeFragment_return attributeFragment()
      throws RecognitionException {
    AntlrPilarParser.attributeFragment_return retval = new AntlrPilarParser.attributeFragment_return();
    retval.start = input.LT(1);
    int attributeFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal109 = null;
    AntlrPilarParser.annotationList_return annotationList108 = null;

    AntlrPilarParser.name_return name110 = null;

    Object t_tree = null;
    Object char_literal109_tree = null;
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 32)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:317:2: (t= ID annotationList ( '=' name )? -> ^( ATTRIBUTE_FRAGMENT[$t] ID annotationList ^( OPTION ( name )? ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:317:4: t= ID annotationList ( '=' name )?
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_attributeFragment2445);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        pushFollow(FOLLOW_annotationList_in_attributeFragment2447);
        annotationList108 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList108.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:317:24: ( '=' name )?
        int alt28 = 2;
        int LA28_0 = input.LA(1);

        if ((LA28_0 == 171)) {
          alt28 = 1;
        }
        switch (alt28) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:317:26: '=' name
          {
            char_literal109 = (Token) match(
                input,
                171,
                FOLLOW_171_in_attributeFragment2451);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_171.add(char_literal109);

            pushFollow(FOLLOW_name_in_attributeFragment2453);
            name110 = name();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_name.add(name110.getTree());

          }
            break;

        }

        // AST REWRITE
        // elements: ID, name, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 317:41: -> ^( ATTRIBUTE_FRAGMENT[$t] ID annotationList ^( OPTION ( name )? ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:317:44: ^( ATTRIBUTE_FRAGMENT[$t] ID annotationList ^( OPTION ( name )? ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ATTRIBUTE_FRAGMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:317:87: ^( OPTION ( name )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:317:96: ( name )?
                if (stream_name.hasNext()) {
                  adaptor.addChild(root_2, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 32, attributeFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "attributeFragment"

  public static class globalVarsDeclaration_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "globalVarsDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:320:1: globalVarsDeclaration : 'global' ( globalVarDeclaration )+ -> ( globalVarDeclaration )+ ;
  public final AntlrPilarParser.globalVarsDeclaration_return globalVarsDeclaration()
      throws RecognitionException {
    AntlrPilarParser.globalVarsDeclaration_return retval = new AntlrPilarParser.globalVarsDeclaration_return();
    retval.start = input.LT(1);
    int globalVarsDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token string_literal111 = null;
    AntlrPilarParser.globalVarDeclaration_return globalVarDeclaration112 = null;

    Object string_literal111_tree = null;
    RewriteRuleTokenStream stream_181 = new RewriteRuleTokenStream(adaptor,
        "token 181");
    RewriteRuleSubtreeStream stream_globalVarDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule globalVarDeclaration");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 33)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:321:2: ( 'global' ( globalVarDeclaration )+ -> ( globalVarDeclaration )+ )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:321:4: 'global' ( globalVarDeclaration )+
      {
        string_literal111 = (Token) match(
            input,
            181,
            FOLLOW_181_in_globalVarsDeclaration2488);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_181.add(string_literal111);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:321:13: ( globalVarDeclaration )+
        int cnt29 = 0;
        loop29: do {
          int alt29 = 2;
          int LA29_0 = input.LA(1);

          if (((LA29_0 >= ID && LA29_0 <= GLOBALID) || LA29_0 == 167 || LA29_0 == 175)) {
            alt29 = 1;
          }

          switch (alt29) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: globalVarDeclaration
            {
              pushFollow(FOLLOW_globalVarDeclaration_in_globalVarsDeclaration2490);
              globalVarDeclaration112 = globalVarDeclaration();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_globalVarDeclaration.add(globalVarDeclaration112
                    .getTree());

            }
              break;

            default:
              if (cnt29 >= 1) break loop29;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(29, input);
              throw eee;
          }
          cnt29++;
        } while (true);

        // AST REWRITE
        // elements: globalVarDeclaration
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 321:41: -> ( globalVarDeclaration )+
          {
            if (!(stream_globalVarDeclaration.hasNext())) {
              throw new RewriteEarlyExitException();
            }
            while (stream_globalVarDeclaration.hasNext()) {
              adaptor.addChild(root_0, stream_globalVarDeclaration.nextTree());

            }
            stream_globalVarDeclaration.reset();

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 33, globalVarsDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "globalVarsDeclaration"

  public static class globalVarDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "globalVarDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:324:1: globalVarDeclaration : ( type )? globalVarFragment ( ',' globalVarFragment )* ';' -> ^( GLOBAL ^( OPTION ( type )? ) ^( LIST ( globalVarFragment )+ ) ) ;
  public final AntlrPilarParser.globalVarDeclaration_return globalVarDeclaration()
      throws RecognitionException {
    AntlrPilarParser.globalVarDeclaration_return retval = new AntlrPilarParser.globalVarDeclaration_return();
    retval.start = input.LT(1);
    int globalVarDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal115 = null;
    Token char_literal117 = null;
    AntlrPilarParser.type_return type113 = null;

    AntlrPilarParser.globalVarFragment_return globalVarFragment114 = null;

    AntlrPilarParser.globalVarFragment_return globalVarFragment116 = null;

    Object char_literal115_tree = null;
    Object char_literal117_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleSubtreeStream stream_globalVarFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule globalVarFragment");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 34)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:325:2: ( ( type )? globalVarFragment ( ',' globalVarFragment )* ';' -> ^( GLOBAL ^( OPTION ( type )? ) ^( LIST ( globalVarFragment )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:325:4: ( type )? globalVarFragment ( ',' globalVarFragment )* ';'
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:325:4: ( type )?
        int alt30 = 2;
        int LA30_0 = input.LA(1);

        if (((LA30_0 >= ID && LA30_0 <= TYPEVARID) || LA30_0 == 167 || LA30_0 == 175)) {
          alt30 = 1;
        }
        switch (alt30) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_globalVarDeclaration2513);
            type113 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type113.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_globalVarFragment_in_globalVarDeclaration2516);
        globalVarFragment114 = globalVarFragment();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_globalVarFragment.add(globalVarFragment114.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:326:4: ( ',' globalVarFragment )*
        loop31: do {
          int alt31 = 2;
          int LA31_0 = input.LA(1);

          if ((LA31_0 == 170)) {
            alt31 = 1;
          }

          switch (alt31) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:326:6: ',' globalVarFragment
            {
              char_literal115 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_globalVarDeclaration2523);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal115);

              pushFollow(FOLLOW_globalVarFragment_in_globalVarDeclaration2525);
              globalVarFragment116 = globalVarFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_globalVarFragment.add(globalVarFragment116.getTree());

            }
              break;

            default:
              break loop31;
          }
        } while (true);

        char_literal117 = (Token) match(
            input,
            173,
            FOLLOW_173_in_globalVarDeclaration2530);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal117);

        // AST REWRITE
        // elements: globalVarFragment, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 326:41: -> ^( GLOBAL ^( OPTION ( type )? ) ^( LIST ( globalVarFragment )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:326:44: ^( GLOBAL ^( OPTION ( type )? ) ^( LIST ( globalVarFragment )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(GLOBAL, "GLOBAL"),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:326:53: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:326:62: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:326:69: ^( LIST ( globalVarFragment )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_globalVarFragment.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_globalVarFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_globalVarFragment.nextTree());

                }
                stream_globalVarFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 34, globalVarDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "globalVarDeclaration"

  public static class globalVarFragment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "globalVarFragment"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:329:1: globalVarFragment : t= GLOBALID annotationList -> ^( GLOBAL_FRAGMENT[$t] GLOBALID annotationList ) ;
  public final AntlrPilarParser.globalVarFragment_return globalVarFragment()
      throws RecognitionException {
    AntlrPilarParser.globalVarFragment_return retval = new AntlrPilarParser.globalVarFragment_return();
    retval.start = input.LT(1);
    int globalVarFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList118 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_GLOBALID = new RewriteRuleTokenStream(
        adaptor, "token GLOBALID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 35)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:330:2: (t= GLOBALID annotationList -> ^( GLOBAL_FRAGMENT[$t] GLOBALID annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:330:4: t= GLOBALID annotationList
      {
        t = (Token) match(
            input,
            GLOBALID,
            FOLLOW_GLOBALID_in_globalVarFragment2569);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_GLOBALID.add(t);

        pushFollow(FOLLOW_annotationList_in_globalVarFragment2571);
        annotationList118 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList118.getTree());

        // AST REWRITE
        // elements: GLOBALID, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 330:41: -> ^( GLOBAL_FRAGMENT[$t] GLOBALID annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:330:44: ^( GLOBAL_FRAGMENT[$t] GLOBALID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(GLOBAL_FRAGMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_GLOBALID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 35, globalVarFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "globalVarFragment"

  public static class procedureDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "procedureDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:333:1: procedureDeclaration : t= 'procedure' ( typeVarTuple )? ( type )? p= ID ( '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')' )? annotationList body -> ^( PROCEDURE[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) $p ^( LIST ( paramList )? ( paramVariable )? ) annotationList body ) ;
  public final AntlrPilarParser.procedureDeclaration_return procedureDeclaration()
      throws RecognitionException {
    AntlrPilarParser.procedureDeclaration_return retval = new AntlrPilarParser.procedureDeclaration_return();
    retval.start = input.LT(1);
    int procedureDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token p = null;
    Token char_literal121 = null;
    Token char_literal124 = null;
    Token char_literal126 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple119 = null;

    AntlrPilarParser.type_return type120 = null;

    AntlrPilarParser.paramVariable_return paramVariable122 = null;

    AntlrPilarParser.paramList_return paramList123 = null;

    AntlrPilarParser.paramVariable_return paramVariable125 = null;

    AntlrPilarParser.annotationList_return annotationList127 = null;

    AntlrPilarParser.body_return body128 = null;

    Object t_tree = null;
    Object p_tree = null;
    Object char_literal121_tree = null;
    Object char_literal124_tree = null;
    Object char_literal126_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_182 = new RewriteRuleTokenStream(adaptor,
        "token 182");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_body = new RewriteRuleSubtreeStream(
        adaptor, "rule body");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_paramList = new RewriteRuleSubtreeStream(
        adaptor, "rule paramList");
    RewriteRuleSubtreeStream stream_paramVariable = new RewriteRuleSubtreeStream(
        adaptor, "rule paramVariable");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 36)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:334:2: (t= 'procedure' ( typeVarTuple )? ( type )? p= ID ( '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')' )? annotationList body -> ^( PROCEDURE[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) $p ^( LIST ( paramList )? ( paramVariable )? ) annotationList body ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:334:4: t= 'procedure' ( typeVarTuple )? ( type )? p= ID ( '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')' )? annotationList body
      {
        t = (Token) match(input, 182, FOLLOW_182_in_procedureDeclaration2607);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_182.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:334:18: ( typeVarTuple )?
        int alt32 = 2;
        int LA32_0 = input.LA(1);

        if ((LA32_0 == 165)) {
          alt32 = 1;
        }
        switch (alt32) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_procedureDeclaration2609);
            typeVarTuple119 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple119.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:335:4: ( type )?
        int alt33 = 2;
        int LA33_0 = input.LA(1);

        if ((LA33_0 == TYPEVARID || LA33_0 == 167 || LA33_0 == 175)) {
          alt33 = 1;
        } else if ((LA33_0 == ID)) {
          switch (input.LA(2)) {
            case ID:
            case 200:
            case 213:
            case 214:
            case 223: {
              alt33 = 1;
            }
              break;
            case 165: {
              int LA33_3 = input.LA(3);

              if (((LA33_3 >= ID && LA33_3 <= TYPEVARID) || LA33_3 == 167 || LA33_3 == 175)) {
                alt33 = 1;
              }
            }
              break;
            case 175: {
              int LA33_4 = input.LA(3);

              if ((LA33_4 == 176)) {
                alt33 = 1;
              }
            }
              break;
          }

        }
        switch (alt33) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_procedureDeclaration2615);
            type120 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type120.getTree());

          }
            break;

        }

        p = (Token) match(input, ID, FOLLOW_ID_in_procedureDeclaration2624);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(p);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:337:4: ( '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')' )?
        int alt37 = 2;
        int LA37_0 = input.LA(1);

        if ((LA37_0 == 167)) {
          alt37 = 1;
        }
        switch (alt37) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:337:6: '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')'
          {
            char_literal121 = (Token) match(
                input,
                167,
                FOLLOW_167_in_procedureDeclaration2631);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_167.add(char_literal121);

            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:338:6: ( paramVariable | ( paramList ( ',' paramVariable )? )? )
            int alt36 = 2;
            switch (input.LA(1)) {
              case TYPEVARID: {
                int LA36_1 = input.LA(2);

                if ((synpred42_AntlrPilar())) {
                  alt36 = 1;
                } else if ((true)) {
                  alt36 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 36,
                      1, input);

                  throw nvae;
                }
              }
                break;
              case ID: {
                int LA36_2 = input.LA(2);

                if ((synpred42_AntlrPilar())) {
                  alt36 = 1;
                } else if ((true)) {
                  alt36 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 36,
                      2, input);

                  throw nvae;
                }
              }
                break;
              case 167: {
                int LA36_3 = input.LA(2);

                if ((synpred42_AntlrPilar())) {
                  alt36 = 1;
                } else if ((true)) {
                  alt36 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 36,
                      3, input);

                  throw nvae;
                }
              }
                break;
              case 175: {
                int LA36_4 = input.LA(2);

                if ((synpred42_AntlrPilar())) {
                  alt36 = 1;
                } else if ((true)) {
                  alt36 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 36,
                      4, input);

                  throw nvae;
                }
              }
                break;
              case 168: {
                alt36 = 2;
              }
                break;
              default:
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 36, 0,
                    input);

                throw nvae;
            }

            switch (alt36) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:338:8: paramVariable
              {
                pushFollow(FOLLOW_paramVariable_in_procedureDeclaration2641);
                paramVariable122 = paramVariable();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_paramVariable.add(paramVariable122.getTree());

              }
                break;
              case 2:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:339:8: ( paramList ( ',' paramVariable )? )?
              {
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:339:8: ( paramList ( ',' paramVariable )? )?
                int alt35 = 2;
                int LA35_0 = input.LA(1);

                if (((LA35_0 >= ID && LA35_0 <= TYPEVARID) || LA35_0 == 167 || LA35_0 == 175)) {
                  alt35 = 1;
                }
                switch (alt35) {
                  case 1:
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:339:10: paramList ( ',' paramVariable )?
                  {
                    pushFollow(FOLLOW_paramList_in_procedureDeclaration2652);
                    paramList123 = paramList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_paramList.add(paramList123.getTree());
                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:340:12: ( ',' paramVariable )?
                    int alt34 = 2;
                    int LA34_0 = input.LA(1);

                    if ((LA34_0 == 170)) {
                      alt34 = 1;
                    }
                    switch (alt34) {
                      case 1:
                      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:340:14: ',' paramVariable
                      {
                        char_literal124 = (Token) match(
                            input,
                            170,
                            FOLLOW_170_in_procedureDeclaration2668);
                        if (state.failed) return retval;
                        if (state.backtracking == 0)
                          stream_170.add(char_literal124);

                        pushFollow(FOLLOW_paramVariable_in_procedureDeclaration2670);
                        paramVariable125 = paramVariable();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0)
                          stream_paramVariable.add(paramVariable125.getTree());

                      }
                        break;

                    }

                  }
                    break;

                }

              }
                break;

            }

            char_literal126 = (Token) match(
                input,
                168,
                FOLLOW_168_in_procedureDeclaration2690);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_168.add(char_literal126);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_procedureDeclaration2699);
        annotationList127 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList127.getTree());
        pushFollow(FOLLOW_body_in_procedureDeclaration2704);
        body128 = body();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_body.add(body128.getTree());

        // AST REWRITE
        // elements: p, paramList, typeVarTuple, annotationList, body, type, paramVariable
        // token labels: p
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_p = new RewriteRuleTokenStream(adaptor,
              "token p", p);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 344:41: -> ^( PROCEDURE[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) $p ^( LIST ( paramList )? ( paramVariable )? ) annotationList body )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:344:44: ^( PROCEDURE[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) $p ^( LIST ( paramList )? ( paramVariable )? ) annotationList body )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PROCEDURE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:344:60: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:344:69: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:344:84: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:344:93: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_p.nextNode());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:344:103: ^( LIST ( paramList )? ( paramVariable )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:344:110: ( paramList )?
                if (stream_paramList.hasNext()) {
                  adaptor.addChild(root_2, stream_paramList.nextTree());

                }
                stream_paramList.reset();
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:344:121: ( paramVariable )?
                if (stream_paramVariable.hasNext()) {
                  adaptor.addChild(root_2, stream_paramVariable.nextTree());

                }
                stream_paramVariable.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_body.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 36, procedureDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "procedureDeclaration"

  public static class paramList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "paramList"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:347:1: paramList : param ( ',' param )* -> ( param )+ ;
  public final AntlrPilarParser.paramList_return paramList()
      throws RecognitionException {
    AntlrPilarParser.paramList_return retval = new AntlrPilarParser.paramList_return();
    retval.start = input.LT(1);
    int paramList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal130 = null;
    AntlrPilarParser.param_return param129 = null;

    AntlrPilarParser.param_return param131 = null;

    Object char_literal130_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleSubtreeStream stream_param = new RewriteRuleSubtreeStream(
        adaptor, "rule param");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 37)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:348:2: ( param ( ',' param )* -> ( param )+ )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:348:4: param ( ',' param )*
      {
        pushFollow(FOLLOW_param_in_paramList2786);
        param129 = param();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_param.add(param129.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:348:10: ( ',' param )*
        loop38: do {
          int alt38 = 2;
          int LA38_0 = input.LA(1);

          if ((LA38_0 == 170)) {
            int LA38_1 = input.LA(2);

            if ((synpred46_AntlrPilar())) {
              alt38 = 1;
            }

          }

          switch (alt38) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:348:12: ',' param
            {
              char_literal130 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_paramList2790);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal130);

              pushFollow(FOLLOW_param_in_paramList2792);
              param131 = param();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_param.add(param131.getTree());

            }
              break;

            default:
              break loop38;
          }
        } while (true);

        // AST REWRITE
        // elements: param
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 348:41: -> ( param )+
          {
            if (!(stream_param.hasNext())) {
              throw new RewriteEarlyExitException();
            }
            while (stream_param.hasNext()) {
              adaptor.addChild(root_0, stream_param.nextTree());

            }
            stream_param.reset();

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 37, paramList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "paramList"

  public static class param_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "param"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:351:1: param : ( type )? ID annotationList -> ^( PARAM ^( OPTION ( type )? ) ID annotationList ) ;
  public final AntlrPilarParser.param_return param()
      throws RecognitionException {
    AntlrPilarParser.param_return retval = new AntlrPilarParser.param_return();
    retval.start = input.LT(1);
    int param_StartIndex = input.index();
    Object root_0 = null;

    Token ID133 = null;
    AntlrPilarParser.type_return type132 = null;

    AntlrPilarParser.annotationList_return annotationList134 = null;

    Object ID133_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 38)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:352:2: ( ( type )? ID annotationList -> ^( PARAM ^( OPTION ( type )? ) ID annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:352:4: ( type )? ID annotationList
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:352:4: ( type )?
        int alt39 = 2;
        int LA39_0 = input.LA(1);

        if ((LA39_0 == TYPEVARID || LA39_0 == 167 || LA39_0 == 175)) {
          alt39 = 1;
        } else if ((LA39_0 == ID)) {
          int LA39_2 = input.LA(2);

          if ((LA39_2 == ID || LA39_2 == 175 || LA39_2 == 200
              || (LA39_2 >= 213 && LA39_2 <= 214) || LA39_2 == 223)) {
            alt39 = 1;
          } else if ((LA39_2 == 165)) {
            int LA39_3 = input.LA(3);

            if (((LA39_3 >= ID && LA39_3 <= TYPEVARID) || LA39_3 == 167 || LA39_3 == 175)) {
              alt39 = 1;
            }
          }
        }
        switch (alt39) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_param2827);
            type132 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type132.getTree());

          }
            break;

        }

        ID133 = (Token) match(input, ID, FOLLOW_ID_in_param2830);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID133);

        pushFollow(FOLLOW_annotationList_in_param2832);
        annotationList134 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList134.getTree());

        // AST REWRITE
        // elements: annotationList, ID, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 352:41: -> ^( PARAM ^( OPTION ( type )? ) ID annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:352:44: ^( PARAM ^( OPTION ( type )? ) ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PARAM, "PARAM"),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:352:52: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:352:61: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 38, param_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "param"

  public static class paramVariable_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "paramVariable"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:355:1: paramVariable : ( type )? ID '...' annotationList -> ^( PARAM_VARIABLE ^( OPTION ( type )? ) ID annotationList ) ;
  public final AntlrPilarParser.paramVariable_return paramVariable()
      throws RecognitionException {
    AntlrPilarParser.paramVariable_return retval = new AntlrPilarParser.paramVariable_return();
    retval.start = input.LT(1);
    int paramVariable_StartIndex = input.index();
    Object root_0 = null;

    Token ID136 = null;
    Token string_literal137 = null;
    AntlrPilarParser.type_return type135 = null;

    AntlrPilarParser.annotationList_return annotationList138 = null;

    Object ID136_tree = null;
    Object string_literal137_tree = null;
    RewriteRuleTokenStream stream_183 = new RewriteRuleTokenStream(adaptor,
        "token 183");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 39)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:356:2: ( ( type )? ID '...' annotationList -> ^( PARAM_VARIABLE ^( OPTION ( type )? ) ID annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:356:4: ( type )? ID '...' annotationList
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:356:4: ( type )?
        int alt40 = 2;
        int LA40_0 = input.LA(1);

        if ((LA40_0 == TYPEVARID || LA40_0 == 167 || LA40_0 == 175)) {
          alt40 = 1;
        } else if ((LA40_0 == ID)) {
          int LA40_2 = input.LA(2);

          if ((LA40_2 == ID || LA40_2 == 165 || LA40_2 == 175 || LA40_2 == 200
              || (LA40_2 >= 213 && LA40_2 <= 214) || LA40_2 == 223)) {
            alt40 = 1;
          }
        }
        switch (alt40) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_paramVariable2873);
            type135 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type135.getTree());

          }
            break;

        }

        ID136 = (Token) match(input, ID, FOLLOW_ID_in_paramVariable2876);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID136);

        string_literal137 = (Token) match(
            input,
            183,
            FOLLOW_183_in_paramVariable2878);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_183.add(string_literal137);

        pushFollow(FOLLOW_annotationList_in_paramVariable2880);
        annotationList138 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList138.getTree());

        // AST REWRITE
        // elements: ID, annotationList, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 356:41: -> ^( PARAM_VARIABLE ^( OPTION ( type )? ) ID annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:356:44: ^( PARAM_VARIABLE ^( OPTION ( type )? ) ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PARAM_VARIABLE, "PARAM_VARIABLE"),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:356:61: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:356:70: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 39, paramVariable_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "paramVariable"

  public static class virtualSetDeclaration_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "virtualSetDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:359:1: virtualSetDeclaration : t= 'vset' ID annotationList '{' vsetElement ( ',' vsetElement )* '}' -> ^( VSET[$t] ID annotationList ^( LIST ( vsetElement )+ ) ) ;
  public final AntlrPilarParser.virtualSetDeclaration_return virtualSetDeclaration()
      throws RecognitionException {
    AntlrPilarParser.virtualSetDeclaration_return retval = new AntlrPilarParser.virtualSetDeclaration_return();
    retval.start = input.LT(1);
    int virtualSetDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID139 = null;
    Token char_literal141 = null;
    Token char_literal143 = null;
    Token char_literal145 = null;
    AntlrPilarParser.annotationList_return annotationList140 = null;

    AntlrPilarParser.vsetElement_return vsetElement142 = null;

    AntlrPilarParser.vsetElement_return vsetElement144 = null;

    Object t_tree = null;
    Object ID139_tree = null;
    Object char_literal141_tree = null;
    Object char_literal143_tree = null;
    Object char_literal145_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_184 = new RewriteRuleTokenStream(adaptor,
        "token 184");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_vsetElement = new RewriteRuleSubtreeStream(
        adaptor, "rule vsetElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 40)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:360:2: (t= 'vset' ID annotationList '{' vsetElement ( ',' vsetElement )* '}' -> ^( VSET[$t] ID annotationList ^( LIST ( vsetElement )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:360:4: t= 'vset' ID annotationList '{' vsetElement ( ',' vsetElement )* '}'
      {
        t = (Token) match(input, 184, FOLLOW_184_in_virtualSetDeclaration2918);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_184.add(t);

        ID139 = (Token) match(input, ID, FOLLOW_ID_in_virtualSetDeclaration2920);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID139);

        pushFollow(FOLLOW_annotationList_in_virtualSetDeclaration2922);
        annotationList140 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList140.getTree());
        char_literal141 = (Token) match(
            input,
            175,
            FOLLOW_175_in_virtualSetDeclaration2927);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal141);

        pushFollow(FOLLOW_vsetElement_in_virtualSetDeclaration2932);
        vsetElement142 = vsetElement();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_vsetElement.add(vsetElement142.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:362:16: ( ',' vsetElement )*
        loop41: do {
          int alt41 = 2;
          int LA41_0 = input.LA(1);

          if ((LA41_0 == 170)) {
            alt41 = 1;
          }

          switch (alt41) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:362:18: ',' vsetElement
            {
              char_literal143 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_virtualSetDeclaration2936);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal143);

              pushFollow(FOLLOW_vsetElement_in_virtualSetDeclaration2938);
              vsetElement144 = vsetElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_vsetElement.add(vsetElement144.getTree());

            }
              break;

            default:
              break loop41;
          }
        } while (true);

        char_literal145 = (Token) match(
            input,
            176,
            FOLLOW_176_in_virtualSetDeclaration2946);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal145);

        // AST REWRITE
        // elements: ID, annotationList, vsetElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 363:41: -> ^( VSET[$t] ID annotationList ^( LIST ( vsetElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:363:44: ^( VSET[$t] ID annotationList ^( LIST ( vsetElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(VSET, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:363:73: ^( LIST ( vsetElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_vsetElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_vsetElement.hasNext()) {
                  adaptor.addChild(root_2, stream_vsetElement.nextTree());

                }
                stream_vsetElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 40, virtualSetDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "virtualSetDeclaration"

  public static class vsetElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "vsetElement"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:366:1: vsetElement : name annotationList -> ^( VSET_ELEMENT name annotationList ) ;
  public final AntlrPilarParser.vsetElement_return vsetElement()
      throws RecognitionException {
    AntlrPilarParser.vsetElement_return retval = new AntlrPilarParser.vsetElement_return();
    retval.start = input.LT(1);
    int vsetElement_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.name_return name146 = null;

    AntlrPilarParser.annotationList_return annotationList147 = null;

    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 41)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:367:2: ( name annotationList -> ^( VSET_ELEMENT name annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:367:4: name annotationList
      {
        pushFollow(FOLLOW_name_in_vsetElement3008);
        name146 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name146.getTree());
        pushFollow(FOLLOW_annotationList_in_vsetElement3010);
        annotationList147 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList147.getTree());

        // AST REWRITE
        // elements: annotationList, name
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 367:41: -> ^( VSET_ELEMENT name annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:367:44: ^( VSET_ELEMENT name annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(VSET_ELEMENT, "VSET_ELEMENT"),
                  root_1);

              adaptor.addChild(root_1, stream_name.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 41, vsetElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "vsetElement"

  public static class funexpDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "funexpDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:370:1: funexpDeclaration : t= 'fun' ID annotationList '=' funExp -> ^( FUN[$t] ID annotationList funExp ) ;
  public final AntlrPilarParser.funexpDeclaration_return funexpDeclaration()
      throws RecognitionException {
    AntlrPilarParser.funexpDeclaration_return retval = new AntlrPilarParser.funexpDeclaration_return();
    retval.start = input.LT(1);
    int funexpDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID148 = null;
    Token char_literal150 = null;
    AntlrPilarParser.annotationList_return annotationList149 = null;

    AntlrPilarParser.funExp_return funExp151 = null;

    Object t_tree = null;
    Object ID148_tree = null;
    Object char_literal150_tree = null;
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_185 = new RewriteRuleTokenStream(adaptor,
        "token 185");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_funExp = new RewriteRuleSubtreeStream(
        adaptor, "rule funExp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 42)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:371:2: (t= 'fun' ID annotationList '=' funExp -> ^( FUN[$t] ID annotationList funExp ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:371:4: t= 'fun' ID annotationList '=' funExp
      {
        t = (Token) match(input, 185, FOLLOW_185_in_funexpDeclaration3050);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_185.add(t);

        ID148 = (Token) match(input, ID, FOLLOW_ID_in_funexpDeclaration3052);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID148);

        pushFollow(FOLLOW_annotationList_in_funexpDeclaration3054);
        annotationList149 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList149.getTree());
        char_literal150 = (Token) match(
            input,
            171,
            FOLLOW_171_in_funexpDeclaration3056);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_171.add(char_literal150);

        pushFollow(FOLLOW_funExp_in_funexpDeclaration3061);
        funExp151 = funExp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_funExp.add(funExp151.getTree());

        // AST REWRITE
        // elements: funExp, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 372:41: -> ^( FUN[$t] ID annotationList funExp )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:372:44: ^( FUN[$t] ID annotationList funExp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(FUN, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_funExp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 42, funexpDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "funexpDeclaration"

  public static class extDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:375:1: extDeclaration : t= 'extension' ( typeVarTuple )? ID annotationList '{' ( extElement )+ '}' -> ^( EXTENSION[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( LIST ( extElement )+ ) ) ;
  public final AntlrPilarParser.extDeclaration_return extDeclaration()
      throws RecognitionException {
    AntlrPilarParser.extDeclaration_return retval = new AntlrPilarParser.extDeclaration_return();
    retval.start = input.LT(1);
    int extDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID153 = null;
    Token char_literal155 = null;
    Token char_literal157 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple152 = null;

    AntlrPilarParser.annotationList_return annotationList154 = null;

    AntlrPilarParser.extElement_return extElement156 = null;

    Object t_tree = null;
    Object ID153_tree = null;
    Object char_literal155_tree = null;
    Object char_literal157_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_186 = new RewriteRuleTokenStream(adaptor,
        "token 186");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_extElement = new RewriteRuleSubtreeStream(
        adaptor, "rule extElement");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 43)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:376:2: (t= 'extension' ( typeVarTuple )? ID annotationList '{' ( extElement )+ '}' -> ^( EXTENSION[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( LIST ( extElement )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:376:4: t= 'extension' ( typeVarTuple )? ID annotationList '{' ( extElement )+ '}'
      {
        t = (Token) match(input, 186, FOLLOW_186_in_extDeclaration3117);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_186.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:376:18: ( typeVarTuple )?
        int alt42 = 2;
        int LA42_0 = input.LA(1);

        if ((LA42_0 == 165)) {
          alt42 = 1;
        }
        switch (alt42) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_extDeclaration3119);
            typeVarTuple152 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple152.getTree());

          }
            break;

        }

        ID153 = (Token) match(input, ID, FOLLOW_ID_in_extDeclaration3125);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID153);

        pushFollow(FOLLOW_annotationList_in_extDeclaration3127);
        annotationList154 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList154.getTree());
        char_literal155 = (Token) match(
            input,
            175,
            FOLLOW_175_in_extDeclaration3132);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal155);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:378:8: ( extElement )+
        int cnt43 = 0;
        loop43: do {
          int alt43 = 2;
          int LA43_0 = input.LA(1);

          if (((LA43_0 >= 187 && LA43_0 <= 190))) {
            alt43 = 1;
          }

          switch (alt43) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: extElement
            {
              pushFollow(FOLLOW_extElement_in_extDeclaration3134);
              extElement156 = extElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_extElement.add(extElement156.getTree());

            }
              break;

            default:
              if (cnt43 >= 1) break loop43;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(43, input);
              throw eee;
          }
          cnt43++;
        } while (true);

        char_literal157 = (Token) match(
            input,
            176,
            FOLLOW_176_in_extDeclaration3137);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal157);

        // AST REWRITE
        // elements: typeVarTuple, ID, annotationList, extElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 378:41: -> ^( EXTENSION[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( LIST ( extElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:378:44: ^( EXTENSION[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( LIST ( extElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(EXTENSION, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:378:60: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:378:69: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:378:102: ^( LIST ( extElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_extElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_extElement.hasNext()) {
                  adaptor.addChild(root_2, stream_extElement.nextTree());

                }
                stream_extElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 43, extDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extDeclaration"

  public static class extElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extElement"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:381:1: extElement : ( typeExtension | actionExtension | expExtension | procExtension );
  public final AntlrPilarParser.extElement_return extElement()
      throws RecognitionException {
    AntlrPilarParser.extElement_return retval = new AntlrPilarParser.extElement_return();
    retval.start = input.LT(1);
    int extElement_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.typeExtension_return typeExtension158 = null;

    AntlrPilarParser.actionExtension_return actionExtension159 = null;

    AntlrPilarParser.expExtension_return expExtension160 = null;

    AntlrPilarParser.procExtension_return procExtension161 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 44)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:382:2: ( typeExtension | actionExtension | expExtension | procExtension )
      int alt44 = 4;
      switch (input.LA(1)) {
        case 187: {
          alt44 = 1;
        }
          break;
        case 188: {
          alt44 = 2;
        }
          break;
        case 189: {
          alt44 = 3;
        }
          break;
        case 190: {
          alt44 = 4;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 44, 0, input);

          throw nvae;
      }

      switch (alt44) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:382:4: typeExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_typeExtension_in_extElement3191);
          typeExtension158 = typeExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, typeExtension158.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:383:4: actionExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_actionExtension_in_extElement3197);
          actionExtension159 = actionExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, actionExtension159.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:384:4: expExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_expExtension_in_extElement3203);
          expExtension160 = expExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, expExtension160.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:385:4: procExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_procExtension_in_extElement3208);
          procExtension161 = procExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, procExtension161.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 44, extElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extElement"

  public static class typeExtension_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeExtension"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:388:1: typeExtension : t= 'typedef' ( typeVarTuple )? ID annotationList ( ';' | ( extendClause )? '{' ( typeExtensionMember )* '}' ) -> ^( TYPE_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( OPTION ( extendClause )? ) ^( LIST ( typeExtensionMember )* ) ) ;
  public final AntlrPilarParser.typeExtension_return typeExtension()
      throws RecognitionException {
    AntlrPilarParser.typeExtension_return retval = new AntlrPilarParser.typeExtension_return();
    retval.start = input.LT(1);
    int typeExtension_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID163 = null;
    Token char_literal165 = null;
    Token char_literal167 = null;
    Token char_literal169 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple162 = null;

    AntlrPilarParser.annotationList_return annotationList164 = null;

    AntlrPilarParser.extendClause_return extendClause166 = null;

    AntlrPilarParser.typeExtensionMember_return typeExtensionMember168 = null;

    Object t_tree = null;
    Object ID163_tree = null;
    Object char_literal165_tree = null;
    Object char_literal167_tree = null;
    Object char_literal169_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_187 = new RewriteRuleTokenStream(adaptor,
        "token 187");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_typeExtensionMember = new RewriteRuleSubtreeStream(
        adaptor, "rule typeExtensionMember");
    RewriteRuleSubtreeStream stream_extendClause = new RewriteRuleSubtreeStream(
        adaptor, "rule extendClause");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 45)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:389:2: (t= 'typedef' ( typeVarTuple )? ID annotationList ( ';' | ( extendClause )? '{' ( typeExtensionMember )* '}' ) -> ^( TYPE_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( OPTION ( extendClause )? ) ^( LIST ( typeExtensionMember )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:389:4: t= 'typedef' ( typeVarTuple )? ID annotationList ( ';' | ( extendClause )? '{' ( typeExtensionMember )* '}' )
      {
        t = (Token) match(input, 187, FOLLOW_187_in_typeExtension3221);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_187.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:389:16: ( typeVarTuple )?
        int alt45 = 2;
        int LA45_0 = input.LA(1);

        if ((LA45_0 == 165)) {
          alt45 = 1;
        }
        switch (alt45) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_typeExtension3223);
            typeVarTuple162 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple162.getTree());

          }
            break;

        }

        ID163 = (Token) match(input, ID, FOLLOW_ID_in_typeExtension3229);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID163);

        pushFollow(FOLLOW_annotationList_in_typeExtension3231);
        annotationList164 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList164.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:391:4: ( ';' | ( extendClause )? '{' ( typeExtensionMember )* '}' )
        int alt48 = 2;
        int LA48_0 = input.LA(1);

        if ((LA48_0 == 173)) {
          alt48 = 1;
        } else if ((LA48_0 == 175 || LA48_0 == 180)) {
          alt48 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 48, 0, input);

          throw nvae;
        }
        switch (alt48) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:391:6: ';'
          {
            char_literal165 = (Token) match(
                input,
                173,
                FOLLOW_173_in_typeExtension3238);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_173.add(char_literal165);

          }
            break;
          case 2:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:392:6: ( extendClause )? '{' ( typeExtensionMember )* '}'
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:392:6: ( extendClause )?
            int alt46 = 2;
            int LA46_0 = input.LA(1);

            if ((LA46_0 == 180)) {
              alt46 = 1;
            }
            switch (alt46) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: extendClause
              {
                pushFollow(FOLLOW_extendClause_in_typeExtension3245);
                extendClause166 = extendClause();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_extendClause.add(extendClause166.getTree());

              }
                break;

            }

            char_literal167 = (Token) match(
                input,
                175,
                FOLLOW_175_in_typeExtension3253);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_175.add(char_literal167);

            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:10: ( typeExtensionMember )*
            loop47: do {
              int alt47 = 2;
              int LA47_0 = input.LA(1);

              if ((LA47_0 == ID || (LA47_0 >= 188 && LA47_0 <= 190))) {
                alt47 = 1;
              }

              switch (alt47) {
                case 1:
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeExtensionMember
                {
                  pushFollow(FOLLOW_typeExtensionMember_in_typeExtension3255);
                  typeExtensionMember168 = typeExtensionMember();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_typeExtensionMember.add(typeExtensionMember168
                        .getTree());

                }
                  break;

                default:
                  break loop47;
              }
            } while (true);

            char_literal169 = (Token) match(
                input,
                176,
                FOLLOW_176_in_typeExtension3258);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_176.add(char_literal169);

          }
            break;

        }

        // AST REWRITE
        // elements: extendClause, annotationList, typeVarTuple, typeExtensionMember, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 393:41: -> ^( TYPE_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( OPTION ( extendClause )? ) ^( LIST ( typeExtensionMember )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:44: ^( TYPE_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( OPTION ( extendClause )? ) ^( LIST ( typeExtensionMember )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE_EXT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:59: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:68: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:101: ^( OPTION ( extendClause )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:110: ( extendClause )?
                if (stream_extendClause.hasNext()) {
                  adaptor.addChild(root_2, stream_extendClause.nextTree());

                }
                stream_extendClause.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:126: ^( LIST ( typeExtensionMember )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:133: ( typeExtensionMember )*
                while (stream_typeExtensionMember.hasNext()) {
                  adaptor.addChild(
                      root_2,
                      stream_typeExtensionMember.nextTree());

                }
                stream_typeExtensionMember.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 45, typeExtension_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeExtension"

  public static class typeExtensionMember_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeExtensionMember"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:396:1: typeExtensionMember : ( typeExtensionAttributeBinding | actionExtension | expExtension | procExtension );
  public final AntlrPilarParser.typeExtensionMember_return typeExtensionMember()
      throws RecognitionException {
    AntlrPilarParser.typeExtensionMember_return retval = new AntlrPilarParser.typeExtensionMember_return();
    retval.start = input.LT(1);
    int typeExtensionMember_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.typeExtensionAttributeBinding_return typeExtensionAttributeBinding170 = null;

    AntlrPilarParser.actionExtension_return actionExtension171 = null;

    AntlrPilarParser.expExtension_return expExtension172 = null;

    AntlrPilarParser.procExtension_return procExtension173 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 46)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:397:2: ( typeExtensionAttributeBinding | actionExtension | expExtension | procExtension )
      int alt49 = 4;
      switch (input.LA(1)) {
        case ID: {
          alt49 = 1;
        }
          break;
        case 188: {
          alt49 = 2;
        }
          break;
        case 189: {
          alt49 = 3;
        }
          break;
        case 190: {
          alt49 = 4;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 49, 0, input);

          throw nvae;
      }

      switch (alt49) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:397:4: typeExtensionAttributeBinding
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_typeExtensionAttributeBinding_in_typeExtensionMember3309);
          typeExtensionAttributeBinding170 = typeExtensionAttributeBinding();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor
                .addChild(root_0, typeExtensionAttributeBinding170.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:398:4: actionExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_actionExtension_in_typeExtensionMember3314);
          actionExtension171 = actionExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, actionExtension171.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:399:4: expExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_expExtension_in_typeExtensionMember3319);
          expExtension172 = expExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, expExtension172.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:400:4: procExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_procExtension_in_typeExtensionMember3324);
          procExtension173 = procExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, procExtension173.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 46, typeExtensionMember_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeExtensionMember"

  public static class typeExtensionAttributeBinding_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeExtensionAttributeBinding"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:403:1: typeExtensionAttributeBinding : id1= ID '=' id2= ID annotationList ';' -> ^( TYPE_EXT_ATTRIBUTE_BINDING[$id1] $id1 $id2 annotationList ) ;
  public final AntlrPilarParser.typeExtensionAttributeBinding_return typeExtensionAttributeBinding()
      throws RecognitionException {
    AntlrPilarParser.typeExtensionAttributeBinding_return retval = new AntlrPilarParser.typeExtensionAttributeBinding_return();
    retval.start = input.LT(1);
    int typeExtensionAttributeBinding_StartIndex = input.index();
    Object root_0 = null;

    Token id1 = null;
    Token id2 = null;
    Token char_literal174 = null;
    Token char_literal176 = null;
    AntlrPilarParser.annotationList_return annotationList175 = null;

    Object id1_tree = null;
    Object id2_tree = null;
    Object char_literal174_tree = null;
    Object char_literal176_tree = null;
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 47)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:404:2: (id1= ID '=' id2= ID annotationList ';' -> ^( TYPE_EXT_ATTRIBUTE_BINDING[$id1] $id1 $id2 annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:404:4: id1= ID '=' id2= ID annotationList ';'
      {
        id1 = (Token) match(
            input,
            ID,
            FOLLOW_ID_in_typeExtensionAttributeBinding3337);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(id1);

        char_literal174 = (Token) match(
            input,
            171,
            FOLLOW_171_in_typeExtensionAttributeBinding3339);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_171.add(char_literal174);

        id2 = (Token) match(
            input,
            ID,
            FOLLOW_ID_in_typeExtensionAttributeBinding3343);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(id2);

        pushFollow(FOLLOW_annotationList_in_typeExtensionAttributeBinding3348);
        annotationList175 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList175.getTree());
        char_literal176 = (Token) match(
            input,
            173,
            FOLLOW_173_in_typeExtensionAttributeBinding3350);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal176);

        // AST REWRITE
        // elements: id2, id1, annotationList
        // token labels: id2, id1
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_id2 = new RewriteRuleTokenStream(
              adaptor, "token id2", id2);
          RewriteRuleTokenStream stream_id1 = new RewriteRuleTokenStream(
              adaptor, "token id1", id1);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 405:41: -> ^( TYPE_EXT_ATTRIBUTE_BINDING[$id1] $id1 $id2 annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:405:44: ^( TYPE_EXT_ATTRIBUTE_BINDING[$id1] $id1 $id2 annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE_EXT_ATTRIBUTE_BINDING, id1),
                  root_1);

              adaptor.addChild(root_1, stream_id1.nextNode());
              adaptor.addChild(root_1, stream_id2.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 47, typeExtensionAttributeBinding_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeExtensionAttributeBinding"

  public static class actionExtension_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "actionExtension"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:408:1: actionExtension : t= 'actiondef' ( typeVarTuple )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( ACTION_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID ^( OPTION ( extParamList )? ) annotationList ) ;
  public final AntlrPilarParser.actionExtension_return actionExtension()
      throws RecognitionException {
    AntlrPilarParser.actionExtension_return retval = new AntlrPilarParser.actionExtension_return();
    retval.start = input.LT(1);
    int actionExtension_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID178 = null;
    Token char_literal179 = null;
    Token char_literal181 = null;
    Token char_literal183 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple177 = null;

    AntlrPilarParser.extParamList_return extParamList180 = null;

    AntlrPilarParser.annotationList_return annotationList182 = null;

    Object t_tree = null;
    Object ID178_tree = null;
    Object char_literal179_tree = null;
    Object char_literal181_tree = null;
    Object char_literal183_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_188 = new RewriteRuleTokenStream(adaptor,
        "token 188");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_extParamList = new RewriteRuleSubtreeStream(
        adaptor, "rule extParamList");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 48)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:409:2: (t= 'actiondef' ( typeVarTuple )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( ACTION_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID ^( OPTION ( extParamList )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:409:4: t= 'actiondef' ( typeVarTuple )? ID ( '(' extParamList ')' )? annotationList ';'
      {
        t = (Token) match(input, 188, FOLLOW_188_in_actionExtension3396);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_188.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:409:18: ( typeVarTuple )?
        int alt50 = 2;
        int LA50_0 = input.LA(1);

        if ((LA50_0 == 165)) {
          alt50 = 1;
        }
        switch (alt50) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_actionExtension3398);
            typeVarTuple177 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple177.getTree());

          }
            break;

        }

        ID178 = (Token) match(input, ID, FOLLOW_ID_in_actionExtension3401);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID178);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:410:4: ( '(' extParamList ')' )?
        int alt51 = 2;
        int LA51_0 = input.LA(1);

        if ((LA51_0 == 167)) {
          alt51 = 1;
        }
        switch (alt51) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:410:6: '(' extParamList ')'
          {
            char_literal179 = (Token) match(
                input,
                167,
                FOLLOW_167_in_actionExtension3408);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_167.add(char_literal179);

            pushFollow(FOLLOW_extParamList_in_actionExtension3410);
            extParamList180 = extParamList();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_extParamList.add(extParamList180.getTree());
            char_literal181 = (Token) match(
                input,
                168,
                FOLLOW_168_in_actionExtension3412);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_168.add(char_literal181);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_actionExtension3420);
        annotationList182 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList182.getTree());
        char_literal183 = (Token) match(
            input,
            173,
            FOLLOW_173_in_actionExtension3422);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal183);

        // AST REWRITE
        // elements: typeVarTuple, ID, annotationList, extParamList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 411:41: -> ^( ACTION_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID ^( OPTION ( extParamList )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:411:44: ^( ACTION_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID ^( OPTION ( extParamList )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ACTION_EXT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:411:61: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:411:70: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:411:88: ^( OPTION ( extParamList )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:411:97: ( extParamList )?
                if (stream_extParamList.hasNext()) {
                  adaptor.addChild(root_2, stream_extParamList.nextTree());

                }
                stream_extParamList.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 48, actionExtension_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "actionExtension"

  public static class expExtension_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "expExtension"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:414:1: expExtension : t= 'expdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( EXP_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList ) ;
  public final AntlrPilarParser.expExtension_return expExtension()
      throws RecognitionException {
    AntlrPilarParser.expExtension_return retval = new AntlrPilarParser.expExtension_return();
    retval.start = input.LT(1);
    int expExtension_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID186 = null;
    Token char_literal187 = null;
    Token char_literal189 = null;
    Token char_literal191 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple184 = null;

    AntlrPilarParser.type_return type185 = null;

    AntlrPilarParser.extParamList_return extParamList188 = null;

    AntlrPilarParser.annotationList_return annotationList190 = null;

    Object t_tree = null;
    Object ID186_tree = null;
    Object char_literal187_tree = null;
    Object char_literal189_tree = null;
    Object char_literal191_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_189 = new RewriteRuleTokenStream(adaptor,
        "token 189");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_extParamList = new RewriteRuleSubtreeStream(
        adaptor, "rule extParamList");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 49)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:415:2: (t= 'expdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( EXP_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:415:4: t= 'expdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';'
      {
        t = (Token) match(input, 189, FOLLOW_189_in_expExtension3478);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_189.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:415:15: ( typeVarTuple )?
        int alt52 = 2;
        int LA52_0 = input.LA(1);

        if ((LA52_0 == 165)) {
          alt52 = 1;
        }
        switch (alt52) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_expExtension3480);
            typeVarTuple184 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple184.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:415:29: ( type )?
        int alt53 = 2;
        int LA53_0 = input.LA(1);

        if ((LA53_0 == TYPEVARID || LA53_0 == 167 || LA53_0 == 175)) {
          alt53 = 1;
        } else if ((LA53_0 == ID)) {
          int LA53_2 = input.LA(2);

          if ((LA53_2 == ID || LA53_2 == 175 || LA53_2 == 200
              || (LA53_2 >= 213 && LA53_2 <= 214) || LA53_2 == 223)) {
            alt53 = 1;
          } else if ((LA53_2 == 165)) {
            int LA53_3 = input.LA(3);

            if (((LA53_3 >= ID && LA53_3 <= TYPEVARID) || LA53_3 == 167 || LA53_3 == 175)) {
              alt53 = 1;
            }
          }
        }
        switch (alt53) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_expExtension3483);
            type185 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type185.getTree());

          }
            break;

        }

        ID186 = (Token) match(input, ID, FOLLOW_ID_in_expExtension3486);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID186);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:416:4: ( '(' extParamList ')' )?
        int alt54 = 2;
        int LA54_0 = input.LA(1);

        if ((LA54_0 == 167)) {
          alt54 = 1;
        }
        switch (alt54) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:416:6: '(' extParamList ')'
          {
            char_literal187 = (Token) match(
                input,
                167,
                FOLLOW_167_in_expExtension3494);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_167.add(char_literal187);

            pushFollow(FOLLOW_extParamList_in_expExtension3496);
            extParamList188 = extParamList();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_extParamList.add(extParamList188.getTree());
            char_literal189 = (Token) match(
                input,
                168,
                FOLLOW_168_in_expExtension3498);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_168.add(char_literal189);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_expExtension3506);
        annotationList190 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList190.getTree());
        char_literal191 = (Token) match(
            input,
            173,
            FOLLOW_173_in_expExtension3508);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal191);

        // AST REWRITE
        // elements: annotationList, extParamList, type, typeVarTuple, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 417:41: -> ^( EXP_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:44: ^( EXP_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(EXP_EXT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:58: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:67: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:82: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:91: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:101: ^( OPTION ( extParamList )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:110: ( extParamList )?
                if (stream_extParamList.hasNext()) {
                  adaptor.addChild(root_2, stream_extParamList.nextTree());

                }
                stream_extParamList.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 49, expExtension_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "expExtension"

  public static class procExtension_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "procExtension"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:420:1: procExtension : t= 'procdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( PROC_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList ) ;
  public final AntlrPilarParser.procExtension_return procExtension()
      throws RecognitionException {
    AntlrPilarParser.procExtension_return retval = new AntlrPilarParser.procExtension_return();
    retval.start = input.LT(1);
    int procExtension_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID194 = null;
    Token char_literal195 = null;
    Token char_literal197 = null;
    Token char_literal199 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple192 = null;

    AntlrPilarParser.type_return type193 = null;

    AntlrPilarParser.extParamList_return extParamList196 = null;

    AntlrPilarParser.annotationList_return annotationList198 = null;

    Object t_tree = null;
    Object ID194_tree = null;
    Object char_literal195_tree = null;
    Object char_literal197_tree = null;
    Object char_literal199_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_190 = new RewriteRuleTokenStream(adaptor,
        "token 190");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_extParamList = new RewriteRuleSubtreeStream(
        adaptor, "rule extParamList");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 50)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:421:2: (t= 'procdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( PROC_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:421:4: t= 'procdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';'
      {
        t = (Token) match(input, 190, FOLLOW_190_in_procExtension3571);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_190.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:421:16: ( typeVarTuple )?
        int alt55 = 2;
        int LA55_0 = input.LA(1);

        if ((LA55_0 == 165)) {
          alt55 = 1;
        }
        switch (alt55) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_procExtension3573);
            typeVarTuple192 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple192.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:421:30: ( type )?
        int alt56 = 2;
        int LA56_0 = input.LA(1);

        if ((LA56_0 == TYPEVARID || LA56_0 == 167 || LA56_0 == 175)) {
          alt56 = 1;
        } else if ((LA56_0 == ID)) {
          int LA56_2 = input.LA(2);

          if ((LA56_2 == ID || LA56_2 == 175 || LA56_2 == 200
              || (LA56_2 >= 213 && LA56_2 <= 214) || LA56_2 == 223)) {
            alt56 = 1;
          } else if ((LA56_2 == 165)) {
            int LA56_3 = input.LA(3);

            if (((LA56_3 >= ID && LA56_3 <= TYPEVARID) || LA56_3 == 167 || LA56_3 == 175)) {
              alt56 = 1;
            }
          }
        }
        switch (alt56) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_procExtension3576);
            type193 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type193.getTree());

          }
            break;

        }

        ID194 = (Token) match(input, ID, FOLLOW_ID_in_procExtension3579);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID194);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:422:4: ( '(' extParamList ')' )?
        int alt57 = 2;
        int LA57_0 = input.LA(1);

        if ((LA57_0 == 167)) {
          alt57 = 1;
        }
        switch (alt57) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:422:6: '(' extParamList ')'
          {
            char_literal195 = (Token) match(
                input,
                167,
                FOLLOW_167_in_procExtension3586);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_167.add(char_literal195);

            pushFollow(FOLLOW_extParamList_in_procExtension3588);
            extParamList196 = extParamList();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_extParamList.add(extParamList196.getTree());
            char_literal197 = (Token) match(
                input,
                168,
                FOLLOW_168_in_procExtension3590);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_168.add(char_literal197);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_procExtension3598);
        annotationList198 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList198.getTree());
        char_literal199 = (Token) match(
            input,
            173,
            FOLLOW_173_in_procExtension3600);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal199);

        // AST REWRITE
        // elements: type, annotationList, ID, typeVarTuple, extParamList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 423:41: -> ^( PROC_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:44: ^( PROC_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PROC_EXT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:59: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:68: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:83: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:92: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:102: ^( OPTION ( extParamList )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:111: ( extParamList )?
                if (stream_extParamList.hasNext()) {
                  adaptor.addChild(root_2, stream_extParamList.nextTree());

                }
                stream_extParamList.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 50, procExtension_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "procExtension"

  public static class extParamList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extParamList"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:426:1: extParamList : ( extParamVariable -> ^( LIST ( extParamVariable )? ) | extParam ( ',' extParam )* ( extParamVariable )? -> ^( LIST ( extParam )+ ( extParamVariable )? ) );
  public final AntlrPilarParser.extParamList_return extParamList()
      throws RecognitionException {
    AntlrPilarParser.extParamList_return retval = new AntlrPilarParser.extParamList_return();
    retval.start = input.LT(1);
    int extParamList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal202 = null;
    AntlrPilarParser.extParamVariable_return extParamVariable200 = null;

    AntlrPilarParser.extParam_return extParam201 = null;

    AntlrPilarParser.extParam_return extParam203 = null;

    AntlrPilarParser.extParamVariable_return extParamVariable204 = null;

    Object char_literal202_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleSubtreeStream stream_extParamVariable = new RewriteRuleSubtreeStream(
        adaptor, "rule extParamVariable");
    RewriteRuleSubtreeStream stream_extParam = new RewriteRuleSubtreeStream(
        adaptor, "rule extParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 51)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:427:2: ( extParamVariable -> ^( LIST ( extParamVariable )? ) | extParam ( ',' extParam )* ( extParamVariable )? -> ^( LIST ( extParam )+ ( extParamVariable )? ) )
      int alt60 = 2;
      alt60 = dfa60.predict(input);
      switch (alt60) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:427:4: extParamVariable
        {
          pushFollow(FOLLOW_extParamVariable_in_extParamList3662);
          extParamVariable200 = extParamVariable();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_extParamVariable.add(extParamVariable200.getTree());

          // AST REWRITE
          // elements: extParamVariable
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 427:41: -> ^( LIST ( extParamVariable )? )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:427:44: ^( LIST ( extParamVariable )? )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:427:51: ( extParamVariable )?
                if (stream_extParamVariable.hasNext()) {
                  adaptor.addChild(root_1, stream_extParamVariable.nextTree());

                }
                stream_extParamVariable.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:428:4: extParam ( ',' extParam )* ( extParamVariable )?
        {
          pushFollow(FOLLOW_extParam_in_extParamList3696);
          extParam201 = extParam();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_extParam.add(extParam201.getTree());
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:428:13: ( ',' extParam )*
          loop58: do {
            int alt58 = 2;
            int LA58_0 = input.LA(1);

            if ((LA58_0 == 170)) {
              alt58 = 1;
            }

            switch (alt58) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:428:15: ',' extParam
              {
                char_literal202 = (Token) match(
                    input,
                    170,
                    FOLLOW_170_in_extParamList3700);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_170.add(char_literal202);

                pushFollow(FOLLOW_extParam_in_extParamList3702);
                extParam203 = extParam();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_extParam.add(extParam203.getTree());

              }
                break;

              default:
                break loop58;
            }
          } while (true);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:4: ( extParamVariable )?
          int alt59 = 2;
          int LA59_0 = input.LA(1);

          if (((LA59_0 >= ID && LA59_0 <= TYPEVARID) || LA59_0 == 167
              || LA59_0 == 175 || LA59_0 == 183)) {
            alt59 = 1;
          }
          switch (alt59) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: extParamVariable
            {
              pushFollow(FOLLOW_extParamVariable_in_extParamList3710);
              extParamVariable204 = extParamVariable();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_extParamVariable.add(extParamVariable204.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: extParamVariable, extParam
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 429:41: -> ^( LIST ( extParam )+ ( extParamVariable )? )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:44: ^( LIST ( extParam )+ ( extParamVariable )? )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                if (!(stream_extParam.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_extParam.hasNext()) {
                  adaptor.addChild(root_1, stream_extParam.nextTree());

                }
                stream_extParam.reset();
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:61: ( extParamVariable )?
                if (stream_extParamVariable.hasNext()) {
                  adaptor.addChild(root_1, stream_extParamVariable.nextTree());

                }
                stream_extParamVariable.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 51, extParamList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extParamList"

  public static class extParam_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extParam"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:432:1: extParam : ( type )? ( ID )? annotationList -> ^( EXT_PARAM ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList ) ;
  public final AntlrPilarParser.extParam_return extParam()
      throws RecognitionException {
    AntlrPilarParser.extParam_return retval = new AntlrPilarParser.extParam_return();
    retval.start = input.LT(1);
    int extParam_StartIndex = input.index();
    Object root_0 = null;

    Token ID206 = null;
    AntlrPilarParser.type_return type205 = null;

    AntlrPilarParser.annotationList_return annotationList207 = null;

    Object ID206_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 52)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:2: ( ( type )? ( ID )? annotationList -> ^( EXT_PARAM ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:4: ( type )? ( ID )? annotationList
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:4: ( type )?
        int alt61 = 2;
        alt61 = dfa61.predict(input);
        switch (alt61) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_extParam3753);
            type205 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type205.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:10: ( ID )?
        int alt62 = 2;
        int LA62_0 = input.LA(1);

        if ((LA62_0 == ID)) {
          int LA62_1 = input.LA(2);

          if ((synpred74_AntlrPilar())) {
            alt62 = 1;
          }
        }
        switch (alt62) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ID
          {
            ID206 = (Token) match(input, ID, FOLLOW_ID_in_extParam3756);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(ID206);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_extParam3759);
        annotationList207 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList207.getTree());

        // AST REWRITE
        // elements: annotationList, type, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 433:41: -> ^( EXT_PARAM ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:44: ^( EXT_PARAM ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(EXT_PARAM, "EXT_PARAM"),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:56: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:65: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:72: ^( OPTION ( ID )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:81: ( ID )?
                if (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 52, extParam_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extParam"

  public static class extParamVariable_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extParamVariable"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:436:1: extParamVariable : ( type )? ( ID )? '...' annotationList -> ^( EXT_PARAM_VARIABLE ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList ) ;
  public final AntlrPilarParser.extParamVariable_return extParamVariable()
      throws RecognitionException {
    AntlrPilarParser.extParamVariable_return retval = new AntlrPilarParser.extParamVariable_return();
    retval.start = input.LT(1);
    int extParamVariable_StartIndex = input.index();
    Object root_0 = null;

    Token ID209 = null;
    Token string_literal210 = null;
    AntlrPilarParser.type_return type208 = null;

    AntlrPilarParser.annotationList_return annotationList211 = null;

    Object ID209_tree = null;
    Object string_literal210_tree = null;
    RewriteRuleTokenStream stream_183 = new RewriteRuleTokenStream(adaptor,
        "token 183");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 53)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:437:2: ( ( type )? ( ID )? '...' annotationList -> ^( EXT_PARAM_VARIABLE ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:437:4: ( type )? ( ID )? '...' annotationList
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:437:4: ( type )?
        int alt63 = 2;
        int LA63_0 = input.LA(1);

        if ((LA63_0 == TYPEVARID || LA63_0 == 167 || LA63_0 == 175)) {
          alt63 = 1;
        } else if ((LA63_0 == ID)) {
          int LA63_2 = input.LA(2);

          if ((synpred75_AntlrPilar())) {
            alt63 = 1;
          }
        }
        switch (alt63) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_extParamVariable3804);
            type208 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type208.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:437:10: ( ID )?
        int alt64 = 2;
        int LA64_0 = input.LA(1);

        if ((LA64_0 == ID)) {
          alt64 = 1;
        }
        switch (alt64) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ID
          {
            ID209 = (Token) match(input, ID, FOLLOW_ID_in_extParamVariable3807);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(ID209);

          }
            break;

        }

        string_literal210 = (Token) match(
            input,
            183,
            FOLLOW_183_in_extParamVariable3814);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_183.add(string_literal210);

        pushFollow(FOLLOW_annotationList_in_extParamVariable3816);
        annotationList211 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList211.getTree());

        // AST REWRITE
        // elements: ID, type, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 438:41: -> ^( EXT_PARAM_VARIABLE ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:438:44: ^( EXT_PARAM_VARIABLE ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                  EXT_PARAM_VARIABLE,
                  "EXT_PARAM_VARIABLE"), root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:438:65: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:438:74: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:438:81: ^( OPTION ( ID )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:438:90: ( ID )?
                if (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 53, extParamVariable_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extParamVariable"

  public static class body_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "body"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:441:1: body : t= '{' ( localVarsDeclaration )? ( location )+ ( catchClause )* '}' -> ^( BODY[$t] ^( OPTION ( localVarsDeclaration )? ) ^( LIST ( location )+ ) ^( LIST ( catchClause )* ) ) ;
  public final AntlrPilarParser.body_return body() throws RecognitionException {
    AntlrPilarParser.body_return retval = new AntlrPilarParser.body_return();
    retval.start = input.LT(1);
    int body_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal215 = null;
    AntlrPilarParser.localVarsDeclaration_return localVarsDeclaration212 = null;

    AntlrPilarParser.location_return location213 = null;

    AntlrPilarParser.catchClause_return catchClause214 = null;

    Object t_tree = null;
    Object char_literal215_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_localVarsDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule localVarsDeclaration");
    RewriteRuleSubtreeStream stream_catchClause = new RewriteRuleSubtreeStream(
        adaptor, "rule catchClause");
    RewriteRuleSubtreeStream stream_location = new RewriteRuleSubtreeStream(
        adaptor, "rule location");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 54)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:442:2: (t= '{' ( localVarsDeclaration )? ( location )+ ( catchClause )* '}' -> ^( BODY[$t] ^( OPTION ( localVarsDeclaration )? ) ^( LIST ( location )+ ) ^( LIST ( catchClause )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:442:4: t= '{' ( localVarsDeclaration )? ( location )+ ( catchClause )* '}'
      {
        t = (Token) match(input, 175, FOLLOW_175_in_body3868);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:442:10: ( localVarsDeclaration )?
        int alt65 = 2;
        int LA65_0 = input.LA(1);

        if ((LA65_0 == 191)) {
          alt65 = 1;
        }
        switch (alt65) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: localVarsDeclaration
          {
            pushFollow(FOLLOW_localVarsDeclaration_in_body3870);
            localVarsDeclaration212 = localVarsDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_localVarsDeclaration
                  .add(localVarsDeclaration212.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:443:4: ( location )+
        int cnt66 = 0;
        loop66: do {
          int alt66 = 2;
          int LA66_0 = input.LA(1);

          if ((LA66_0 == LOCID)) {
            alt66 = 1;
          }

          switch (alt66) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: location
            {
              pushFollow(FOLLOW_location_in_body3877);
              location213 = location();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_location.add(location213.getTree());

            }
              break;

            default:
              if (cnt66 >= 1) break loop66;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(66, input);
              throw eee;
          }
          cnt66++;
        } while (true);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:4: ( catchClause )*
        loop67: do {
          int alt67 = 2;
          int LA67_0 = input.LA(1);

          if ((LA67_0 == 209)) {
            alt67 = 1;
          }

          switch (alt67) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: catchClause
            {
              pushFollow(FOLLOW_catchClause_in_body3884);
              catchClause214 = catchClause();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_catchClause.add(catchClause214.getTree());

            }
              break;

            default:
              break loop67;
          }
        } while (true);

        char_literal215 = (Token) match(input, 176, FOLLOW_176_in_body3887);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal215);

        // AST REWRITE
        // elements: location, catchClause, localVarsDeclaration
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 444:41: -> ^( BODY[$t] ^( OPTION ( localVarsDeclaration )? ) ^( LIST ( location )+ ) ^( LIST ( catchClause )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:44: ^( BODY[$t] ^( OPTION ( localVarsDeclaration )? ) ^( LIST ( location )+ ) ^( LIST ( catchClause )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(BODY, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:55: ^( OPTION ( localVarsDeclaration )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:64: ( localVarsDeclaration )?
                if (stream_localVarsDeclaration.hasNext()) {
                  adaptor.addChild(
                      root_2,
                      stream_localVarsDeclaration.nextTree());

                }
                stream_localVarsDeclaration.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:87: ^( LIST ( location )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_location.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_location.hasNext()) {
                  adaptor.addChild(root_2, stream_location.nextTree());

                }
                stream_location.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:105: ^( LIST ( catchClause )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:112: ( catchClause )*
                while (stream_catchClause.hasNext()) {
                  adaptor.addChild(root_2, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 54, body_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "body"

  public static class localVarsDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "localVarsDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:447:1: localVarsDeclaration : t= 'local' ( localVarDeclaration )+ -> ^( LIST[$t] ( localVarDeclaration )+ ) ;
  public final AntlrPilarParser.localVarsDeclaration_return localVarsDeclaration()
      throws RecognitionException {
    AntlrPilarParser.localVarsDeclaration_return retval = new AntlrPilarParser.localVarsDeclaration_return();
    retval.start = input.LT(1);
    int localVarsDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.localVarDeclaration_return localVarDeclaration216 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_191 = new RewriteRuleTokenStream(adaptor,
        "token 191");
    RewriteRuleSubtreeStream stream_localVarDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule localVarDeclaration");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 55)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:448:2: (t= 'local' ( localVarDeclaration )+ -> ^( LIST[$t] ( localVarDeclaration )+ ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:448:4: t= 'local' ( localVarDeclaration )+
      {
        t = (Token) match(input, 191, FOLLOW_191_in_localVarsDeclaration3948);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_191.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:448:14: ( localVarDeclaration )+
        int cnt68 = 0;
        loop68: do {
          int alt68 = 2;
          int LA68_0 = input.LA(1);

          if (((LA68_0 >= ID && LA68_0 <= TYPEVARID) || LA68_0 == 167 || LA68_0 == 175)) {
            alt68 = 1;
          }

          switch (alt68) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: localVarDeclaration
            {
              pushFollow(FOLLOW_localVarDeclaration_in_localVarsDeclaration3950);
              localVarDeclaration216 = localVarDeclaration();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_localVarDeclaration
                    .add(localVarDeclaration216.getTree());

            }
              break;

            default:
              if (cnt68 >= 1) break loop68;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(68, input);
              throw eee;
          }
          cnt68++;
        } while (true);

        // AST REWRITE
        // elements: localVarDeclaration
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 448:41: -> ^( LIST[$t] ( localVarDeclaration )+ )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:448:44: ^( LIST[$t] ( localVarDeclaration )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, t),
                  root_1);

              if (!(stream_localVarDeclaration.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_localVarDeclaration.hasNext()) {
                adaptor.addChild(root_1, stream_localVarDeclaration.nextTree());

              }
              stream_localVarDeclaration.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 55, localVarsDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "localVarsDeclaration"

  public static class localVarDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "localVarDeclaration"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:451:1: localVarDeclaration : ( type )? localVarFragment ( ',' localVarFragment )* ';' -> ^( LOCAL ^( OPTION ( type )? ) ^( LIST ( localVarFragment )+ ) ) ;
  public final AntlrPilarParser.localVarDeclaration_return localVarDeclaration()
      throws RecognitionException {
    AntlrPilarParser.localVarDeclaration_return retval = new AntlrPilarParser.localVarDeclaration_return();
    retval.start = input.LT(1);
    int localVarDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal219 = null;
    Token char_literal221 = null;
    AntlrPilarParser.type_return type217 = null;

    AntlrPilarParser.localVarFragment_return localVarFragment218 = null;

    AntlrPilarParser.localVarFragment_return localVarFragment220 = null;

    Object char_literal219_tree = null;
    Object char_literal221_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleSubtreeStream stream_localVarFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule localVarFragment");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 56)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:452:2: ( ( type )? localVarFragment ( ',' localVarFragment )* ';' -> ^( LOCAL ^( OPTION ( type )? ) ^( LIST ( localVarFragment )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:452:4: ( type )? localVarFragment ( ',' localVarFragment )* ';'
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:452:4: ( type )?
        int alt69 = 2;
        int LA69_0 = input.LA(1);

        if ((LA69_0 == TYPEVARID || LA69_0 == 167 || LA69_0 == 175)) {
          alt69 = 1;
        } else if ((LA69_0 == ID)) {
          int LA69_2 = input.LA(2);

          if ((LA69_2 == ID || LA69_2 == 175 || LA69_2 == 200
              || (LA69_2 >= 213 && LA69_2 <= 214) || LA69_2 == 223)) {
            alt69 = 1;
          } else if ((LA69_2 == 165)) {
            int LA69_3 = input.LA(3);

            if (((LA69_3 >= ID && LA69_3 <= TYPEVARID) || LA69_3 == 167 || LA69_3 == 175)) {
              alt69 = 1;
            }
          }
        }
        switch (alt69) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_localVarDeclaration3978);
            type217 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type217.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_localVarFragment_in_localVarDeclaration3981);
        localVarFragment218 = localVarFragment();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_localVarFragment.add(localVarFragment218.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:453:4: ( ',' localVarFragment )*
        loop70: do {
          int alt70 = 2;
          int LA70_0 = input.LA(1);

          if ((LA70_0 == 170)) {
            alt70 = 1;
          }

          switch (alt70) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:453:6: ',' localVarFragment
            {
              char_literal219 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_localVarDeclaration3989);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal219);

              pushFollow(FOLLOW_localVarFragment_in_localVarDeclaration3991);
              localVarFragment220 = localVarFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_localVarFragment.add(localVarFragment220.getTree());

            }
              break;

            default:
              break loop70;
          }
        } while (true);

        char_literal221 = (Token) match(
            input,
            173,
            FOLLOW_173_in_localVarDeclaration3996);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal221);

        // AST REWRITE
        // elements: localVarFragment, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 453:41: -> ^( LOCAL ^( OPTION ( type )? ) ^( LIST ( localVarFragment )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:453:44: ^( LOCAL ^( OPTION ( type )? ) ^( LIST ( localVarFragment )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LOCAL, "LOCAL"),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:453:52: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:453:61: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:453:68: ^( LIST ( localVarFragment )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_localVarFragment.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_localVarFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_localVarFragment.nextTree());

                }
                stream_localVarFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 56, localVarDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "localVarDeclaration"

  public static class localVarFragment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "localVarFragment"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:456:1: localVarFragment : t= ID annotationList -> ^( LOCAL_FRAGMENT[$t] ID annotationList ) ;
  public final AntlrPilarParser.localVarFragment_return localVarFragment()
      throws RecognitionException {
    AntlrPilarParser.localVarFragment_return retval = new AntlrPilarParser.localVarFragment_return();
    retval.start = input.LT(1);
    int localVarFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList222 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 57)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:457:2: (t= ID annotationList -> ^( LOCAL_FRAGMENT[$t] ID annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:457:4: t= ID annotationList
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_localVarFragment4036);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        pushFollow(FOLLOW_annotationList_in_localVarFragment4038);
        annotationList222 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList222.getTree());

        // AST REWRITE
        // elements: ID, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 457:41: -> ^( LOCAL_FRAGMENT[$t] ID annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:457:44: ^( LOCAL_FRAGMENT[$t] ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LOCAL_FRAGMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 57, localVarFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "localVarFragment"

  public static class location_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "location"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:460:1: location : t= LOCID angleGroupedAnnotationList ( transformation ( '|' transformation )* )? -> ^( LOCATION[$t] LOCID angleGroupedAnnotationList ^( LIST ( transformation )* ) ) ;
  public final AntlrPilarParser.location_return location()
      throws RecognitionException {
    AntlrPilarParser.location_return retval = new AntlrPilarParser.location_return();
    retval.start = input.LT(1);
    int location_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal225 = null;
    AntlrPilarParser.angleGroupedAnnotationList_return angleGroupedAnnotationList223 = null;

    AntlrPilarParser.transformation_return transformation224 = null;

    AntlrPilarParser.transformation_return transformation226 = null;

    Object t_tree = null;
    Object char_literal225_tree = null;
    RewriteRuleTokenStream stream_LOCID = new RewriteRuleTokenStream(adaptor,
        "token LOCID");
    RewriteRuleTokenStream stream_192 = new RewriteRuleTokenStream(adaptor,
        "token 192");
    RewriteRuleSubtreeStream stream_transformation = new RewriteRuleSubtreeStream(
        adaptor, "rule transformation");
    RewriteRuleSubtreeStream stream_angleGroupedAnnotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule angleGroupedAnnotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 58)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:461:2: (t= LOCID angleGroupedAnnotationList ( transformation ( '|' transformation )* )? -> ^( LOCATION[$t] LOCID angleGroupedAnnotationList ^( LIST ( transformation )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:461:4: t= LOCID angleGroupedAnnotationList ( transformation ( '|' transformation )* )?
      {
        t = (Token) match(input, LOCID, FOLLOW_LOCID_in_location4088);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LOCID.add(t);

        pushFollow(FOLLOW_angleGroupedAnnotationList_in_location4090);
        angleGroupedAnnotationList223 = angleGroupedAnnotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_angleGroupedAnnotationList.add(angleGroupedAnnotationList223
              .getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:462:4: ( transformation ( '|' transformation )* )?
        int alt72 = 2;
        switch (input.LA(1)) {
          case HEX_LIT:
          case DEC_LIT:
          case OCT_LIT:
          case ID:
          case GLOBALID:
          case ADD_OP:
          case MUL_OP:
          case UN_OP:
          case CHAR_LIT:
          case STRING_LIT:
          case SYMBOL_LIT:
          case RAW_LIT:
          case BIN_LIT:
          case FLOAT_LIT:
          case RATIONAL_LIT:
          case 167:
          case 175:
          case 192:
          case 194:
          case 195:
          case 196:
          case 197:
          case 199:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 213:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 221: {
            alt72 = 1;
          }
            break;
          case EOF: {
            int LA72_2 = input.LA(2);

            if ((synpred84_AntlrPilar())) {
              alt72 = 1;
            }
          }
            break;
          case 209: {
            int LA72_3 = input.LA(2);

            if ((synpred84_AntlrPilar())) {
              alt72 = 1;
            }
          }
            break;
          case 176: {
            int LA72_4 = input.LA(2);

            if ((synpred84_AntlrPilar())) {
              alt72 = 1;
            }
          }
            break;
          case LOCID: {
            int LA72_5 = input.LA(2);

            if ((synpred84_AntlrPilar())) {
              alt72 = 1;
            }
          }
            break;
        }

        switch (alt72) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:462:6: transformation ( '|' transformation )*
          {
            pushFollow(FOLLOW_transformation_in_location4098);
            transformation224 = transformation();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_transformation.add(transformation224.getTree());
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:463:6: ( '|' transformation )*
            loop71: do {
              int alt71 = 2;
              int LA71_0 = input.LA(1);

              if ((LA71_0 == 192)) {
                alt71 = 1;
              }

              switch (alt71) {
                case 1:
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:463:8: '|' transformation
                {
                  char_literal225 = (Token) match(
                      input,
                      192,
                      FOLLOW_192_in_location4108);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_192.add(char_literal225);

                  pushFollow(FOLLOW_transformation_in_location4110);
                  transformation226 = transformation();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_transformation.add(transformation226.getTree());

                }
                  break;

                default:
                  break loop71;
              }
            } while (true);

          }
            break;

        }

        // AST REWRITE
        // elements: LOCID, angleGroupedAnnotationList, transformation
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 464:41: -> ^( LOCATION[$t] LOCID angleGroupedAnnotationList ^( LIST ( transformation )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:464:44: ^( LOCATION[$t] LOCID angleGroupedAnnotationList ^( LIST ( transformation )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LOCATION, t),
                  root_1);

              adaptor.addChild(root_1, stream_LOCID.nextNode());
              adaptor.addChild(
                  root_1,
                  stream_angleGroupedAnnotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:464:92: ^( LIST ( transformation )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:464:99: ( transformation )*
                while (stream_transformation.hasNext()) {
                  adaptor.addChild(root_2, stream_transformation.nextTree());

                }
                stream_transformation.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 58, location_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "location"

  public static class transformation_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "transformation"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:467:1: transformation : parenGroupedAnnotationList ( guard )? seqTransformation -> ^( TRANSFORMATION parenGroupedAnnotationList ^( OPTION ( guard )? ) seqTransformation ) ;
  public final AntlrPilarParser.transformation_return transformation()
      throws RecognitionException {
    AntlrPilarParser.transformation_return retval = new AntlrPilarParser.transformation_return();
    retval.start = input.LT(1);
    int transformation_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.parenGroupedAnnotationList_return parenGroupedAnnotationList227 = null;

    AntlrPilarParser.guard_return guard228 = null;

    AntlrPilarParser.seqTransformation_return seqTransformation229 = null;

    RewriteRuleSubtreeStream stream_parenGroupedAnnotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule parenGroupedAnnotationList");
    RewriteRuleSubtreeStream stream_guard = new RewriteRuleSubtreeStream(
        adaptor, "rule guard");
    RewriteRuleSubtreeStream stream_seqTransformation = new RewriteRuleSubtreeStream(
        adaptor, "rule seqTransformation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 59)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:468:2: ( parenGroupedAnnotationList ( guard )? seqTransformation -> ^( TRANSFORMATION parenGroupedAnnotationList ^( OPTION ( guard )? ) seqTransformation ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:468:4: parenGroupedAnnotationList ( guard )? seqTransformation
      {
        pushFollow(FOLLOW_parenGroupedAnnotationList_in_transformation4195);
        parenGroupedAnnotationList227 = parenGroupedAnnotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_parenGroupedAnnotationList.add(parenGroupedAnnotationList227
              .getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:468:31: ( guard )?
        int alt73 = 2;
        alt73 = dfa73.predict(input);
        switch (alt73) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: guard
          {
            pushFollow(FOLLOW_guard_in_transformation4197);
            guard228 = guard();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_guard.add(guard228.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_seqTransformation_in_transformation4204);
        seqTransformation229 = seqTransformation();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_seqTransformation.add(seqTransformation229.getTree());

        // AST REWRITE
        // elements: guard, seqTransformation, parenGroupedAnnotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 469:41: -> ^( TRANSFORMATION parenGroupedAnnotationList ^( OPTION ( guard )? ) seqTransformation )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:469:44: ^( TRANSFORMATION parenGroupedAnnotationList ^( OPTION ( guard )? ) seqTransformation )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TRANSFORMATION, "TRANSFORMATION"),
                  root_1);

              adaptor.addChild(
                  root_1,
                  stream_parenGroupedAnnotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:469:88: ^( OPTION ( guard )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:469:97: ( guard )?
                if (stream_guard.hasNext()) {
                  adaptor.addChild(root_2, stream_guard.nextTree());

                }
                stream_guard.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_seqTransformation.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 59, transformation_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "transformation"

  public static class guard_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "guard"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:472:1: guard : ( exp annotationList '+>' -> ^( EXP_GUARD exp annotationList ) | t= 'else' annotationList -> ^( ELSE_GUARD[$t] annotationList ) );
  public final AntlrPilarParser.guard_return guard()
      throws RecognitionException {
    AntlrPilarParser.guard_return retval = new AntlrPilarParser.guard_return();
    retval.start = input.LT(1);
    int guard_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal232 = null;
    AntlrPilarParser.exp_return exp230 = null;

    AntlrPilarParser.annotationList_return annotationList231 = null;

    AntlrPilarParser.annotationList_return annotationList233 = null;

    Object t_tree = null;
    Object string_literal232_tree = null;
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleTokenStream stream_193 = new RewriteRuleTokenStream(adaptor,
        "token 193");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 60)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:473:2: ( exp annotationList '+>' -> ^( EXP_GUARD exp annotationList ) | t= 'else' annotationList -> ^( ELSE_GUARD[$t] annotationList ) )
      int alt74 = 2;
      int LA74_0 = input.LA(1);

      if (((LA74_0 >= HEX_LIT && LA74_0 <= OCT_LIT) || LA74_0 == ID
          || LA74_0 == GLOBALID || (LA74_0 >= ADD_OP && LA74_0 <= RATIONAL_LIT)
          || LA74_0 == 167 || LA74_0 == 175 || LA74_0 == 202 || LA74_0 == 206
          || LA74_0 == 213 || (LA74_0 >= 215 && LA74_0 <= 219) || LA74_0 == 221)) {
        alt74 = 1;
      } else if ((LA74_0 == 194)) {
        alt74 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 74, 0, input);

        throw nvae;
      }
      switch (alt74) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:473:4: exp annotationList '+>'
        {
          pushFollow(FOLLOW_exp_in_guard4252);
          exp230 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp230.getTree());
          pushFollow(FOLLOW_annotationList_in_guard4254);
          annotationList231 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList231.getTree());
          string_literal232 = (Token) match(input, 193, FOLLOW_193_in_guard4256);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_193.add(string_literal232);

          // AST REWRITE
          // elements: annotationList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 473:41: -> ^( EXP_GUARD exp annotationList )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:473:44: ^( EXP_GUARD exp annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(EXP_GUARD, "EXP_GUARD"),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:474:4: t= 'else' annotationList
        {
          t = (Token) match(input, 194, FOLLOW_194_in_guard4286);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_194.add(t);

          pushFollow(FOLLOW_annotationList_in_guard4288);
          annotationList233 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList233.getTree());

          // AST REWRITE
          // elements: annotationList
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 474:41: -> ^( ELSE_GUARD[$t] annotationList )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:474:44: ^( ELSE_GUARD[$t] annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ELSE_GUARD, t),
                    root_1);

                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 60, guard_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "guard"

  public static class lhsList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "lhsList"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:477:1: lhsList : lhs ( ',' lhs )* -> ^( LIST ( lhs )+ ) ;
  public final AntlrPilarParser.lhsList_return lhsList()
      throws RecognitionException {
    AntlrPilarParser.lhsList_return retval = new AntlrPilarParser.lhsList_return();
    retval.start = input.LT(1);
    int lhsList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal235 = null;
    AntlrPilarParser.lhs_return lhs234 = null;

    AntlrPilarParser.lhs_return lhs236 = null;

    Object char_literal235_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleSubtreeStream stream_lhs = new RewriteRuleSubtreeStream(adaptor,
        "rule lhs");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 61)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:478:2: ( lhs ( ',' lhs )* -> ^( LIST ( lhs )+ ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:478:4: lhs ( ',' lhs )*
      {
        pushFollow(FOLLOW_lhs_in_lhsList4321);
        lhs234 = lhs();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_lhs.add(lhs234.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:478:8: ( ',' lhs )*
        loop75: do {
          int alt75 = 2;
          int LA75_0 = input.LA(1);

          if ((LA75_0 == 170)) {
            alt75 = 1;
          }

          switch (alt75) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:478:10: ',' lhs
            {
              char_literal235 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_lhsList4325);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal235);

              pushFollow(FOLLOW_lhs_in_lhsList4327);
              lhs236 = lhs();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_lhs.add(lhs236.getTree());

            }
              break;

            default:
              break loop75;
          }
        } while (true);

        // AST REWRITE
        // elements: lhs
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 478:41: -> ^( LIST ( lhs )+ )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:478:44: ^( LIST ( lhs )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, "LIST"),
                  root_1);

              if (!(stream_lhs.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_lhs.hasNext()) {
                adaptor.addChild(root_1, stream_lhs.nextTree());

              }
              stream_lhs.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 61, lhsList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "lhsList"

  public static class lhs_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "lhs"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:481:1: lhs : exp annotationList -> ^( LHS exp annotationList ) ;
  public final AntlrPilarParser.lhs_return lhs() throws RecognitionException {
    AntlrPilarParser.lhs_return retval = new AntlrPilarParser.lhs_return();
    retval.start = input.LT(1);
    int lhs_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.exp_return exp237 = null;

    AntlrPilarParser.annotationList_return annotationList238 = null;

    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 62)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:482:2: ( exp annotationList -> ^( LHS exp annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:482:4: exp annotationList
      {
        pushFollow(FOLLOW_exp_in_lhs4370);
        exp237 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp237.getTree());
        pushFollow(FOLLOW_annotationList_in_lhs4372);
        annotationList238 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList238.getTree());

        // AST REWRITE
        // elements: exp, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 482:41: -> ^( LHS exp annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:482:44: ^( LHS exp annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LHS, "LHS"),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 62, lhs_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "lhs"

  public static class seqTransformation_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "seqTransformation"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:485:1: seqTransformation : ( action )* ( jump )? -> ^( LIST ( action )* ) ^( OPTION ( jump )? ) ;
  public final AntlrPilarParser.seqTransformation_return seqTransformation()
      throws RecognitionException {
    AntlrPilarParser.seqTransformation_return retval = new AntlrPilarParser.seqTransformation_return();
    retval.start = input.LT(1);
    int seqTransformation_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.action_return action239 = null;

    AntlrPilarParser.jump_return jump240 = null;

    RewriteRuleSubtreeStream stream_action = new RewriteRuleSubtreeStream(
        adaptor, "rule action");
    RewriteRuleSubtreeStream stream_jump = new RewriteRuleSubtreeStream(
        adaptor, "rule jump");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 63)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:2: ( ( action )* ( jump )? -> ^( LIST ( action )* ) ^( OPTION ( jump )? ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:4: ( action )* ( jump )?
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:4: ( action )*
        loop76: do {
          int alt76 = 2;
          alt76 = dfa76.predict(input);
          switch (alt76) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: action
            {
              pushFollow(FOLLOW_action_in_seqTransformation4412);
              action239 = action();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_action.add(action239.getTree());

            }
              break;

            default:
              break loop76;
          }
        } while (true);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:12: ( jump )?
        int alt77 = 2;
        int LA77_0 = input.LA(1);

        if (((LA77_0 >= 202 && LA77_0 <= 206))) {
          alt77 = 1;
        }
        switch (alt77) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: jump
          {
            pushFollow(FOLLOW_jump_in_seqTransformation4415);
            jump240 = jump();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_jump.add(jump240.getTree());

          }
            break;

        }

        // AST REWRITE
        // elements: jump, action
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 486:41: -> ^( LIST ( action )* ) ^( OPTION ( jump )? )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:45: ^( LIST ( action )* )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, "LIST"),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:52: ( action )*
              while (stream_action.hasNext()) {
                adaptor.addChild(root_1, stream_action.nextTree());

              }
              stream_action.reset();

              adaptor.addChild(root_0, root_1);
            }
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:61: ^( OPTION ( jump )? )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(OPTION, "OPTION"),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:70: ( jump )?
              if (stream_jump.hasNext()) {
                adaptor.addChild(root_1, stream_jump.nextTree());

              }
              stream_jump.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 63, seqTransformation_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "seqTransformation"

  public static class action_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "action"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:489:1: action : (t= 'assert' exp annotationList ';' -> ^( ASSERT[$t] exp annotationList ) | t= 'assume' exp annotationList ';' -> ^( ASSUME[$t] exp annotationList ) | t= 'throw' exp annotationList ';' -> ^( THROW[$t] exp annotationList ) | assignment | startThread | extCall );
  public final AntlrPilarParser.action_return action()
      throws RecognitionException {
    AntlrPilarParser.action_return retval = new AntlrPilarParser.action_return();
    retval.start = input.LT(1);
    int action_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal243 = null;
    Token char_literal246 = null;
    Token char_literal249 = null;
    AntlrPilarParser.exp_return exp241 = null;

    AntlrPilarParser.annotationList_return annotationList242 = null;

    AntlrPilarParser.exp_return exp244 = null;

    AntlrPilarParser.annotationList_return annotationList245 = null;

    AntlrPilarParser.exp_return exp247 = null;

    AntlrPilarParser.annotationList_return annotationList248 = null;

    AntlrPilarParser.assignment_return assignment250 = null;

    AntlrPilarParser.startThread_return startThread251 = null;

    AntlrPilarParser.extCall_return extCall252 = null;

    Object t_tree = null;
    Object char_literal243_tree = null;
    Object char_literal246_tree = null;
    Object char_literal249_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_195 = new RewriteRuleTokenStream(adaptor,
        "token 195");
    RewriteRuleTokenStream stream_197 = new RewriteRuleTokenStream(adaptor,
        "token 197");
    RewriteRuleTokenStream stream_196 = new RewriteRuleTokenStream(adaptor,
        "token 196");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 64)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:490:2: (t= 'assert' exp annotationList ';' -> ^( ASSERT[$t] exp annotationList ) | t= 'assume' exp annotationList ';' -> ^( ASSUME[$t] exp annotationList ) | t= 'throw' exp annotationList ';' -> ^( THROW[$t] exp annotationList ) | assignment | startThread | extCall )
      int alt78 = 6;
      alt78 = dfa78.predict(input);
      switch (alt78) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:490:4: t= 'assert' exp annotationList ';'
        {
          t = (Token) match(input, 195, FOLLOW_195_in_action4469);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_195.add(t);

          pushFollow(FOLLOW_exp_in_action4471);
          exp241 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp241.getTree());
          pushFollow(FOLLOW_annotationList_in_action4473);
          annotationList242 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList242.getTree());
          char_literal243 = (Token) match(input, 173, FOLLOW_173_in_action4475);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_173.add(char_literal243);

          // AST REWRITE
          // elements: exp, annotationList
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 490:41: -> ^( ASSERT[$t] exp annotationList )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:490:44: ^( ASSERT[$t] exp annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ASSERT, t),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:491:4: t= 'assume' exp annotationList ';'
        {
          t = (Token) match(input, 196, FOLLOW_196_in_action4496);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_196.add(t);

          pushFollow(FOLLOW_exp_in_action4498);
          exp244 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp244.getTree());
          pushFollow(FOLLOW_annotationList_in_action4500);
          annotationList245 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList245.getTree());
          char_literal246 = (Token) match(input, 173, FOLLOW_173_in_action4502);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_173.add(char_literal246);

          // AST REWRITE
          // elements: annotationList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 491:41: -> ^( ASSUME[$t] exp annotationList )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:491:44: ^( ASSUME[$t] exp annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ASSUME, t),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:492:4: t= 'throw' exp annotationList ';'
        {
          t = (Token) match(input, 197, FOLLOW_197_in_action4523);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_197.add(t);

          pushFollow(FOLLOW_exp_in_action4525);
          exp247 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp247.getTree());
          pushFollow(FOLLOW_annotationList_in_action4527);
          annotationList248 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList248.getTree());
          char_literal249 = (Token) match(input, 173, FOLLOW_173_in_action4529);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_173.add(char_literal249);

          // AST REWRITE
          // elements: annotationList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 492:41: -> ^( THROW[$t] exp annotationList )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:492:44: ^( THROW[$t] exp annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(THROW, t),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:493:4: assignment
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_assignment_in_action4549);
          assignment250 = assignment();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, assignment250.getTree());

        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:494:4: startThread
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_startThread_in_action4555);
          startThread251 = startThread();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, startThread251.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:495:4: extCall
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_extCall_in_action4560);
          extCall252 = extCall();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, extCall252.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 64, action_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "action"

  public static class assignment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "assignment"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:498:1: assignment : lhsList (t= ':=' | t= ACTION_EXT_OP ) rhs ( ',' rhs )* annotationList ';' -> ^( ASSIGN lhsList $t ^( LIST ( rhs )+ ) annotationList ) ;
  public final AntlrPilarParser.assignment_return assignment()
      throws RecognitionException {
    AntlrPilarParser.assignment_return retval = new AntlrPilarParser.assignment_return();
    retval.start = input.LT(1);
    int assignment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal255 = null;
    Token char_literal258 = null;
    AntlrPilarParser.lhsList_return lhsList253 = null;

    AntlrPilarParser.rhs_return rhs254 = null;

    AntlrPilarParser.rhs_return rhs256 = null;

    AntlrPilarParser.annotationList_return annotationList257 = null;

    Object t_tree = null;
    Object char_literal255_tree = null;
    Object char_literal258_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_198 = new RewriteRuleTokenStream(adaptor,
        "token 198");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ACTION_EXT_OP = new RewriteRuleTokenStream(
        adaptor, "token ACTION_EXT_OP");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_lhsList = new RewriteRuleSubtreeStream(
        adaptor, "rule lhsList");
    RewriteRuleSubtreeStream stream_rhs = new RewriteRuleSubtreeStream(adaptor,
        "rule rhs");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 65)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:499:2: ( lhsList (t= ':=' | t= ACTION_EXT_OP ) rhs ( ',' rhs )* annotationList ';' -> ^( ASSIGN lhsList $t ^( LIST ( rhs )+ ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:499:4: lhsList (t= ':=' | t= ACTION_EXT_OP ) rhs ( ',' rhs )* annotationList ';'
      {
        pushFollow(FOLLOW_lhsList_in_assignment4571);
        lhsList253 = lhsList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_lhsList.add(lhsList253.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:500:4: (t= ':=' | t= ACTION_EXT_OP )
        int alt79 = 2;
        int LA79_0 = input.LA(1);

        if ((LA79_0 == 198)) {
          alt79 = 1;
        } else if ((LA79_0 == ACTION_EXT_OP)) {
          alt79 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 79, 0, input);

          throw nvae;
        }
        switch (alt79) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:500:6: t= ':='
          {
            t = (Token) match(input, 198, FOLLOW_198_in_assignment4581);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_198.add(t);

          }
            break;
          case 2:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:501:6: t= ACTION_EXT_OP
          {
            t = (Token) match(
                input,
                ACTION_EXT_OP,
                FOLLOW_ACTION_EXT_OP_in_assignment4591);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ACTION_EXT_OP.add(t);

          }
            break;

        }

        pushFollow(FOLLOW_rhs_in_assignment4597);
        rhs254 = rhs();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_rhs.add(rhs254.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:502:8: ( ',' rhs )*
        loop80: do {
          int alt80 = 2;
          int LA80_0 = input.LA(1);

          if ((LA80_0 == 170)) {
            alt80 = 1;
          }

          switch (alt80) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:502:10: ',' rhs
            {
              char_literal255 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_assignment4601);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal255);

              pushFollow(FOLLOW_rhs_in_assignment4603);
              rhs256 = rhs();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_rhs.add(rhs256.getTree());

            }
              break;

            default:
              break loop80;
          }
        } while (true);

        pushFollow(FOLLOW_annotationList_in_assignment4611);
        annotationList257 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList257.getTree());
        char_literal258 = (Token) match(
            input,
            173,
            FOLLOW_173_in_assignment4613);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal258);

        // AST REWRITE
        // elements: lhsList, t, annotationList, rhs
        // token labels: t
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(adaptor,
              "token t", t);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 503:41: -> ^( ASSIGN lhsList $t ^( LIST ( rhs )+ ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:503:44: ^( ASSIGN lhsList $t ^( LIST ( rhs )+ ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ASSIGN, "ASSIGN"),
                  root_1);

              adaptor.addChild(root_1, stream_lhsList.nextTree());
              adaptor.addChild(root_1, stream_t.nextNode());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:503:64: ^( LIST ( rhs )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_rhs.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_rhs.hasNext()) {
                  adaptor.addChild(root_2, stream_rhs.nextTree());

                }
                stream_rhs.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 65, assignment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "assignment"

  public static class rhs_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "rhs"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:506:1: rhs : annotationList exp -> ^( RHS annotationList exp ) ;
  public final AntlrPilarParser.rhs_return rhs() throws RecognitionException {
    AntlrPilarParser.rhs_return retval = new AntlrPilarParser.rhs_return();
    retval.start = input.LT(1);
    int rhs_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.annotationList_return annotationList259 = null;

    AntlrPilarParser.exp_return exp260 = null;

    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 66)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:507:2: ( annotationList exp -> ^( RHS annotationList exp ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:507:4: annotationList exp
      {
        pushFollow(FOLLOW_annotationList_in_rhs4662);
        annotationList259 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList259.getTree());
        pushFollow(FOLLOW_exp_in_rhs4664);
        exp260 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp260.getTree());

        // AST REWRITE
        // elements: annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 507:41: -> ^( RHS annotationList exp )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:507:44: ^( RHS annotationList exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(RHS, "RHS"),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 66, rhs_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "rhs"

  public static class startThread_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "startThread"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:510:1: startThread : t= 'start' name ( '[' num= exp ']' )? (arg= exp )? annotationList ';' -> ^( START[$t] name ^( OPTION ( $num)? ) ^( OPTION ( $arg)? ) annotationList ) ;
  public final AntlrPilarParser.startThread_return startThread()
      throws RecognitionException {
    AntlrPilarParser.startThread_return retval = new AntlrPilarParser.startThread_return();
    retval.start = input.LT(1);
    int startThread_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal262 = null;
    Token char_literal263 = null;
    Token char_literal265 = null;
    AntlrPilarParser.exp_return num = null;

    AntlrPilarParser.exp_return arg = null;

    AntlrPilarParser.name_return name261 = null;

    AntlrPilarParser.annotationList_return annotationList264 = null;

    Object t_tree = null;
    Object char_literal262_tree = null;
    Object char_literal263_tree = null;
    Object char_literal265_tree = null;
    RewriteRuleTokenStream stream_199 = new RewriteRuleTokenStream(adaptor,
        "token 199");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 67)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:511:2: (t= 'start' name ( '[' num= exp ']' )? (arg= exp )? annotationList ';' -> ^( START[$t] name ^( OPTION ( $num)? ) ^( OPTION ( $arg)? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:511:4: t= 'start' name ( '[' num= exp ']' )? (arg= exp )? annotationList ';'
      {
        t = (Token) match(input, 199, FOLLOW_199_in_startThread4705);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_199.add(t);

        pushFollow(FOLLOW_name_in_startThread4707);
        name261 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name261.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:512:4: ( '[' num= exp ']' )?
        int alt81 = 2;
        int LA81_0 = input.LA(1);

        if ((LA81_0 == 200)) {
          alt81 = 1;
        }
        switch (alt81) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:512:6: '[' num= exp ']'
          {
            char_literal262 = (Token) match(
                input,
                200,
                FOLLOW_200_in_startThread4714);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_200.add(char_literal262);

            pushFollow(FOLLOW_exp_in_startThread4718);
            num = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(num.getTree());
            char_literal263 = (Token) match(
                input,
                201,
                FOLLOW_201_in_startThread4720);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_201.add(char_literal263);

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:513:4: (arg= exp )?
        int alt82 = 2;
        int LA82_0 = input.LA(1);

        if (((LA82_0 >= HEX_LIT && LA82_0 <= OCT_LIT) || LA82_0 == ID
            || LA82_0 == GLOBALID
            || (LA82_0 >= ADD_OP && LA82_0 <= RATIONAL_LIT) || LA82_0 == 167
            || LA82_0 == 175 || LA82_0 == 202 || LA82_0 == 206 || LA82_0 == 213
            || (LA82_0 >= 215 && LA82_0 <= 219) || LA82_0 == 221)) {
          alt82 = 1;
        }
        switch (alt82) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:513:5: arg= exp
          {
            pushFollow(FOLLOW_exp_in_startThread4731);
            arg = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(arg.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_startThread4739);
        annotationList264 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList264.getTree());
        char_literal265 = (Token) match(
            input,
            173,
            FOLLOW_173_in_startThread4741);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal265);

        // AST REWRITE
        // elements: num, arg, name, annotationList
        // token labels: 
        // rule labels: arg, retval, num
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_arg = new RewriteRuleSubtreeStream(
              adaptor, "rule arg", arg != null ? arg.tree : null);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_num = new RewriteRuleSubtreeStream(
              adaptor, "rule num", num != null ? num.tree : null);

          root_0 = (Object) adaptor.nil();
          // 514:41: -> ^( START[$t] name ^( OPTION ( $num)? ) ^( OPTION ( $arg)? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:514:44: ^( START[$t] name ^( OPTION ( $num)? ) ^( OPTION ( $arg)? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(START, t),
                  root_1);

              adaptor.addChild(root_1, stream_name.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:514:61: ^( OPTION ( $num)? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:514:70: ( $num)?
                if (stream_num.hasNext()) {
                  adaptor.addChild(root_2, stream_num.nextTree());

                }
                stream_num.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:514:77: ^( OPTION ( $arg)? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:514:86: ( $arg)?
                if (stream_arg.hasNext()) {
                  adaptor.addChild(root_2, stream_arg.nextTree());

                }
                stream_arg.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 67, startThread_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "startThread"

  public static class extCall_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extCall"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:517:1: extCall : exp annotationList ';' -> ^( ACTION_EXT_CALL exp annotationList ) ;
  public final AntlrPilarParser.extCall_return extCall()
      throws RecognitionException {
    AntlrPilarParser.extCall_return retval = new AntlrPilarParser.extCall_return();
    retval.start = input.LT(1);
    int extCall_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal268 = null;
    AntlrPilarParser.exp_return exp266 = null;

    AntlrPilarParser.annotationList_return annotationList267 = null;

    Object char_literal268_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 68)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:518:2: ( exp annotationList ';' -> ^( ACTION_EXT_CALL exp annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:518:4: exp annotationList ';'
      {
        pushFollow(FOLLOW_exp_in_extCall4798);
        exp266 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp266.getTree());
        pushFollow(FOLLOW_annotationList_in_extCall4800);
        annotationList267 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList267.getTree());
        char_literal268 = (Token) match(input, 173, FOLLOW_173_in_extCall4802);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal268);

        // AST REWRITE
        // elements: annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 518:41: -> ^( ACTION_EXT_CALL exp annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:518:44: ^( ACTION_EXT_CALL exp annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ACTION_EXT_CALL, "ACTION_EXT_CALL"),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 68, extCall_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extCall"

  public static class jump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "jump"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:521:1: jump : ( gotoJump | returnJump | ifThenJump ( 'else' ifThenJump )* ( ifElseJump )? annotationList ';' -> ^( IF_JUMP ^( LIST ( ifThenJump )+ ) ^( OPTION ( ifElseJump )? ) annotationList ) | t= 'switch' exp ( switchCaseJump )+ ( switchDefaultJump )? annotationList ';' -> ^( SWITCH_JUMP[$t] exp ^( LIST ( switchCaseJump )+ ) ^( OPTION ( switchDefaultJump )? ) annotationList ) | t= 'call' ( nameExp ':=' )? exp annotationList ';' ( gotoJump )? -> ^( CALL_JUMP[$t] ^( OPTION ( nameExp )? ) exp ^( OPTION ( gotoJump )? ) annotationList ) );
  public final AntlrPilarParser.jump_return jump() throws RecognitionException {
    AntlrPilarParser.jump_return retval = new AntlrPilarParser.jump_return();
    retval.start = input.LT(1);
    int jump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal272 = null;
    Token char_literal276 = null;
    Token char_literal281 = null;
    Token string_literal283 = null;
    Token char_literal286 = null;
    AntlrPilarParser.gotoJump_return gotoJump269 = null;

    AntlrPilarParser.returnJump_return returnJump270 = null;

    AntlrPilarParser.ifThenJump_return ifThenJump271 = null;

    AntlrPilarParser.ifThenJump_return ifThenJump273 = null;

    AntlrPilarParser.ifElseJump_return ifElseJump274 = null;

    AntlrPilarParser.annotationList_return annotationList275 = null;

    AntlrPilarParser.exp_return exp277 = null;

    AntlrPilarParser.switchCaseJump_return switchCaseJump278 = null;

    AntlrPilarParser.switchDefaultJump_return switchDefaultJump279 = null;

    AntlrPilarParser.annotationList_return annotationList280 = null;

    AntlrPilarParser.nameExp_return nameExp282 = null;

    AntlrPilarParser.exp_return exp284 = null;

    AntlrPilarParser.annotationList_return annotationList285 = null;

    AntlrPilarParser.gotoJump_return gotoJump287 = null;

    Object t_tree = null;
    Object string_literal272_tree = null;
    Object char_literal276_tree = null;
    Object char_literal281_tree = null;
    Object string_literal283_tree = null;
    Object char_literal286_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_198 = new RewriteRuleTokenStream(adaptor,
        "token 198");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_switchDefaultJump = new RewriteRuleSubtreeStream(
        adaptor, "rule switchDefaultJump");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_gotoJump = new RewriteRuleSubtreeStream(
        adaptor, "rule gotoJump");
    RewriteRuleSubtreeStream stream_ifThenJump = new RewriteRuleSubtreeStream(
        adaptor, "rule ifThenJump");
    RewriteRuleSubtreeStream stream_nameExp = new RewriteRuleSubtreeStream(
        adaptor, "rule nameExp");
    RewriteRuleSubtreeStream stream_ifElseJump = new RewriteRuleSubtreeStream(
        adaptor, "rule ifElseJump");
    RewriteRuleSubtreeStream stream_switchCaseJump = new RewriteRuleSubtreeStream(
        adaptor, "rule switchCaseJump");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 69)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:522:2: ( gotoJump | returnJump | ifThenJump ( 'else' ifThenJump )* ( ifElseJump )? annotationList ';' -> ^( IF_JUMP ^( LIST ( ifThenJump )+ ) ^( OPTION ( ifElseJump )? ) annotationList ) | t= 'switch' exp ( switchCaseJump )+ ( switchDefaultJump )? annotationList ';' -> ^( SWITCH_JUMP[$t] exp ^( LIST ( switchCaseJump )+ ) ^( OPTION ( switchDefaultJump )? ) annotationList ) | t= 'call' ( nameExp ':=' )? exp annotationList ';' ( gotoJump )? -> ^( CALL_JUMP[$t] ^( OPTION ( nameExp )? ) exp ^( OPTION ( gotoJump )? ) annotationList ) )
      int alt89 = 5;
      switch (input.LA(1)) {
        case 204: {
          alt89 = 1;
        }
          break;
        case 205: {
          alt89 = 2;
        }
          break;
        case 206: {
          alt89 = 3;
        }
          break;
        case 202: {
          alt89 = 4;
        }
          break;
        case 203: {
          alt89 = 5;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 89, 0, input);

          throw nvae;
      }

      switch (alt89) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:522:4: gotoJump
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_gotoJump_in_jump4837);
          gotoJump269 = gotoJump();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, gotoJump269.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:523:4: returnJump
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_returnJump_in_jump4842);
          returnJump270 = returnJump();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, returnJump270.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:524:4: ifThenJump ( 'else' ifThenJump )* ( ifElseJump )? annotationList ';'
        {
          pushFollow(FOLLOW_ifThenJump_in_jump4847);
          ifThenJump271 = ifThenJump();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_ifThenJump.add(ifThenJump271.getTree());
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:525:4: ( 'else' ifThenJump )*
          loop83: do {
            int alt83 = 2;
            int LA83_0 = input.LA(1);

            if ((LA83_0 == 194)) {
              int LA83_1 = input.LA(2);

              if ((LA83_1 == 206)) {
                alt83 = 1;
              }

            }

            switch (alt83) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:525:6: 'else' ifThenJump
              {
                string_literal272 = (Token) match(
                    input,
                    194,
                    FOLLOW_194_in_jump4854);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_194.add(string_literal272);

                pushFollow(FOLLOW_ifThenJump_in_jump4856);
                ifThenJump273 = ifThenJump();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_ifThenJump.add(ifThenJump273.getTree());

              }
                break;

              default:
                break loop83;
            }
          } while (true);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:526:4: ( ifElseJump )?
          int alt84 = 2;
          int LA84_0 = input.LA(1);

          if ((LA84_0 == 194)) {
            alt84 = 1;
          }
          switch (alt84) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ifElseJump
            {
              pushFollow(FOLLOW_ifElseJump_in_jump4864);
              ifElseJump274 = ifElseJump();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_ifElseJump.add(ifElseJump274.getTree());

            }
              break;

          }

          pushFollow(FOLLOW_annotationList_in_jump4871);
          annotationList275 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList275.getTree());
          char_literal276 = (Token) match(input, 173, FOLLOW_173_in_jump4873);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_173.add(char_literal276);

          // AST REWRITE
          // elements: ifThenJump, annotationList, ifElseJump
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 527:41: -> ^( IF_JUMP ^( LIST ( ifThenJump )+ ) ^( OPTION ( ifElseJump )? ) annotationList )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:527:44: ^( IF_JUMP ^( LIST ( ifThenJump )+ ) ^( OPTION ( ifElseJump )? ) annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(IF_JUMP, "IF_JUMP"),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:527:54: ^( LIST ( ifThenJump )+ )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  if (!(stream_ifThenJump.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_ifThenJump.hasNext()) {
                    adaptor.addChild(root_2, stream_ifThenJump.nextTree());

                  }
                  stream_ifThenJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:527:74: ^( OPTION ( ifElseJump )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:527:83: ( ifElseJump )?
                  if (stream_ifElseJump.hasNext()) {
                    adaptor.addChild(root_2, stream_ifElseJump.nextTree());

                  }
                  stream_ifElseJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:528:4: t= 'switch' exp ( switchCaseJump )+ ( switchDefaultJump )? annotationList ';'
        {
          t = (Token) match(input, 202, FOLLOW_202_in_jump4920);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_202.add(t);

          pushFollow(FOLLOW_exp_in_jump4922);
          exp277 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp277.getTree());
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:528:19: ( switchCaseJump )+
          int cnt85 = 0;
          loop85: do {
            int alt85 = 2;
            int LA85_0 = input.LA(1);

            if ((LA85_0 == 192)) {
              int LA85_1 = input.LA(2);

              if (((LA85_1 >= HEX_LIT && LA85_1 <= OCT_LIT) || LA85_1 == ID
                  || LA85_1 == GLOBALID
                  || (LA85_1 >= ADD_OP && LA85_1 <= RATIONAL_LIT)
                  || LA85_1 == 167 || LA85_1 == 175 || LA85_1 == 202
                  || LA85_1 == 206 || LA85_1 == 213
                  || (LA85_1 >= 215 && LA85_1 <= 219) || LA85_1 == 221)) {
                alt85 = 1;
              }

            }

            switch (alt85) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: switchCaseJump
              {
                pushFollow(FOLLOW_switchCaseJump_in_jump4924);
                switchCaseJump278 = switchCaseJump();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_switchCaseJump.add(switchCaseJump278.getTree());

              }
                break;

              default:
                if (cnt85 >= 1) break loop85;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(85, input);
                throw eee;
            }
            cnt85++;
          } while (true);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:529:4: ( switchDefaultJump )?
          int alt86 = 2;
          int LA86_0 = input.LA(1);

          if ((LA86_0 == 192)) {
            alt86 = 1;
          }
          switch (alt86) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: switchDefaultJump
            {
              pushFollow(FOLLOW_switchDefaultJump_in_jump4936);
              switchDefaultJump279 = switchDefaultJump();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_switchDefaultJump.add(switchDefaultJump279.getTree());

            }
              break;

          }

          pushFollow(FOLLOW_annotationList_in_jump4942);
          annotationList280 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList280.getTree());
          char_literal281 = (Token) match(input, 173, FOLLOW_173_in_jump4944);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_173.add(char_literal281);

          // AST REWRITE
          // elements: annotationList, switchDefaultJump, switchCaseJump, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 530:41: -> ^( SWITCH_JUMP[$t] exp ^( LIST ( switchCaseJump )+ ) ^( OPTION ( switchDefaultJump )? ) annotationList )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:530:44: ^( SWITCH_JUMP[$t] exp ^( LIST ( switchCaseJump )+ ) ^( OPTION ( switchDefaultJump )? ) annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(SWITCH_JUMP, t),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:530:66: ^( LIST ( switchCaseJump )+ )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  if (!(stream_switchCaseJump.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_switchCaseJump.hasNext()) {
                    adaptor.addChild(root_2, stream_switchCaseJump.nextTree());

                  }
                  stream_switchCaseJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:530:90: ^( OPTION ( switchDefaultJump )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:530:99: ( switchDefaultJump )?
                  if (stream_switchDefaultJump.hasNext()) {
                    adaptor.addChild(
                        root_2,
                        stream_switchDefaultJump.nextTree());

                  }
                  stream_switchDefaultJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:531:4: t= 'call' ( nameExp ':=' )? exp annotationList ';' ( gotoJump )?
        {
          t = (Token) match(input, 203, FOLLOW_203_in_jump4994);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_203.add(t);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:532:4: ( nameExp ':=' )?
          int alt87 = 2;
          alt87 = dfa87.predict(input);
          switch (alt87) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:532:6: nameExp ':='
            {
              pushFollow(FOLLOW_nameExp_in_jump5001);
              nameExp282 = nameExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_nameExp.add(nameExp282.getTree());
              string_literal283 = (Token) match(
                  input,
                  198,
                  FOLLOW_198_in_jump5003);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_198.add(string_literal283);

            }
              break;

          }

          pushFollow(FOLLOW_exp_in_jump5011);
          exp284 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp284.getTree());
          pushFollow(FOLLOW_annotationList_in_jump5013);
          annotationList285 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList285.getTree());
          char_literal286 = (Token) match(input, 173, FOLLOW_173_in_jump5015);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_173.add(char_literal286);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:4: ( gotoJump )?
          int alt88 = 2;
          int LA88_0 = input.LA(1);

          if ((LA88_0 == 204)) {
            alt88 = 1;
          }
          switch (alt88) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:6: gotoJump
            {
              pushFollow(FOLLOW_gotoJump_in_jump5022);
              gotoJump287 = gotoJump();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_gotoJump.add(gotoJump287.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: nameExp, annotationList, gotoJump, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 534:41: -> ^( CALL_JUMP[$t] ^( OPTION ( nameExp )? ) exp ^( OPTION ( gotoJump )? ) annotationList )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:44: ^( CALL_JUMP[$t] ^( OPTION ( nameExp )? ) exp ^( OPTION ( gotoJump )? ) annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(CALL_JUMP, t),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:60: ^( OPTION ( nameExp )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:69: ( nameExp )?
                  if (stream_nameExp.hasNext()) {
                    adaptor.addChild(root_2, stream_nameExp.nextTree());

                  }
                  stream_nameExp.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exp.nextTree());
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:83: ^( OPTION ( gotoJump )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:92: ( gotoJump )?
                  if (stream_gotoJump.hasNext()) {
                    adaptor.addChild(root_2, stream_gotoJump.nextTree());

                  }
                  stream_gotoJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 69, jump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "jump"

  public static class gotoJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "gotoJump"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:537:1: gotoJump : t= 'goto' ID annotationList ';' -> ^( GOTO[$t] ID annotationList ) ;
  public final AntlrPilarParser.gotoJump_return gotoJump()
      throws RecognitionException {
    AntlrPilarParser.gotoJump_return retval = new AntlrPilarParser.gotoJump_return();
    retval.start = input.LT(1);
    int gotoJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID288 = null;
    Token char_literal290 = null;
    AntlrPilarParser.annotationList_return annotationList289 = null;

    Object t_tree = null;
    Object ID288_tree = null;
    Object char_literal290_tree = null;
    RewriteRuleTokenStream stream_204 = new RewriteRuleTokenStream(adaptor,
        "token 204");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 70)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:538:2: (t= 'goto' ID annotationList ';' -> ^( GOTO[$t] ID annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:538:4: t= 'goto' ID annotationList ';'
      {
        t = (Token) match(input, 204, FOLLOW_204_in_gotoJump5087);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_204.add(t);

        ID288 = (Token) match(input, ID, FOLLOW_ID_in_gotoJump5089);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID288);

        pushFollow(FOLLOW_annotationList_in_gotoJump5091);
        annotationList289 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList289.getTree());
        char_literal290 = (Token) match(input, 173, FOLLOW_173_in_gotoJump5093);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal290);

        // AST REWRITE
        // elements: annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 538:41: -> ^( GOTO[$t] ID annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:538:44: ^( GOTO[$t] ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(GOTO, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 70, gotoJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "gotoJump"

  public static class returnJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "returnJump"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:541:1: returnJump : t= 'return' ( exp )? annotationList ';' -> ^( RETURN[$t] ^( OPTION ( exp )? ) annotationList ) ;
  public final AntlrPilarParser.returnJump_return returnJump()
      throws RecognitionException {
    AntlrPilarParser.returnJump_return retval = new AntlrPilarParser.returnJump_return();
    retval.start = input.LT(1);
    int returnJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal293 = null;
    AntlrPilarParser.exp_return exp291 = null;

    AntlrPilarParser.annotationList_return annotationList292 = null;

    Object t_tree = null;
    Object char_literal293_tree = null;
    RewriteRuleTokenStream stream_205 = new RewriteRuleTokenStream(adaptor,
        "token 205");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 71)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:542:2: (t= 'return' ( exp )? annotationList ';' -> ^( RETURN[$t] ^( OPTION ( exp )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:542:4: t= 'return' ( exp )? annotationList ';'
      {
        t = (Token) match(input, 205, FOLLOW_205_in_returnJump5123);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_205.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:542:15: ( exp )?
        int alt90 = 2;
        int LA90_0 = input.LA(1);

        if (((LA90_0 >= HEX_LIT && LA90_0 <= OCT_LIT) || LA90_0 == ID
            || LA90_0 == GLOBALID
            || (LA90_0 >= ADD_OP && LA90_0 <= RATIONAL_LIT) || LA90_0 == 167
            || LA90_0 == 175 || LA90_0 == 202 || LA90_0 == 206 || LA90_0 == 213
            || (LA90_0 >= 215 && LA90_0 <= 219) || LA90_0 == 221)) {
          alt90 = 1;
        }
        switch (alt90) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: exp
          {
            pushFollow(FOLLOW_exp_in_returnJump5125);
            exp291 = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(exp291.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_returnJump5128);
        annotationList292 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList292.getTree());
        char_literal293 = (Token) match(
            input,
            173,
            FOLLOW_173_in_returnJump5130);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal293);

        // AST REWRITE
        // elements: exp, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 542:41: -> ^( RETURN[$t] ^( OPTION ( exp )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:542:44: ^( RETURN[$t] ^( OPTION ( exp )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(RETURN, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:542:57: ^( OPTION ( exp )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:542:66: ( exp )?
                if (stream_exp.hasNext()) {
                  adaptor.addChild(root_2, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 71, returnJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "returnJump"

  public static class ifThenJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "ifThenJump"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:545:1: ifThenJump : t= 'if' exp 'then' annotationList 'goto' ID -> ^( IF_THEN_JUMP[$t] exp annotationList ID ) ;
  public final AntlrPilarParser.ifThenJump_return ifThenJump()
      throws RecognitionException {
    AntlrPilarParser.ifThenJump_return retval = new AntlrPilarParser.ifThenJump_return();
    retval.start = input.LT(1);
    int ifThenJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal295 = null;
    Token string_literal297 = null;
    Token ID298 = null;
    AntlrPilarParser.exp_return exp294 = null;

    AntlrPilarParser.annotationList_return annotationList296 = null;

    Object t_tree = null;
    Object string_literal295_tree = null;
    Object string_literal297_tree = null;
    Object ID298_tree = null;
    RewriteRuleTokenStream stream_204 = new RewriteRuleTokenStream(adaptor,
        "token 204");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_206 = new RewriteRuleTokenStream(adaptor,
        "token 206");
    RewriteRuleTokenStream stream_207 = new RewriteRuleTokenStream(adaptor,
        "token 207");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 72)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:546:2: (t= 'if' exp 'then' annotationList 'goto' ID -> ^( IF_THEN_JUMP[$t] exp annotationList ID ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:546:4: t= 'if' exp 'then' annotationList 'goto' ID
      {
        t = (Token) match(input, 206, FOLLOW_206_in_ifThenJump5161);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_206.add(t);

        pushFollow(FOLLOW_exp_in_ifThenJump5163);
        exp294 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp294.getTree());
        string_literal295 = (Token) match(
            input,
            207,
            FOLLOW_207_in_ifThenJump5165);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_207.add(string_literal295);

        pushFollow(FOLLOW_annotationList_in_ifThenJump5167);
        annotationList296 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList296.getTree());
        string_literal297 = (Token) match(
            input,
            204,
            FOLLOW_204_in_ifThenJump5173);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_204.add(string_literal297);

        ID298 = (Token) match(input, ID, FOLLOW_ID_in_ifThenJump5175);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID298);

        // AST REWRITE
        // elements: ID, annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 547:41: -> ^( IF_THEN_JUMP[$t] exp annotationList ID )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:547:44: ^( IF_THEN_JUMP[$t] exp annotationList ID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(IF_THEN_JUMP, t),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 72, ifThenJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "ifThenJump"

  public static class ifElseJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "ifElseJump"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:550:1: ifElseJump : t= 'else' annotationList 'goto' ID -> ^( IF_ELSE_JUMP[$t] annotationList ID ) ;
  public final AntlrPilarParser.ifElseJump_return ifElseJump()
      throws RecognitionException {
    AntlrPilarParser.ifElseJump_return retval = new AntlrPilarParser.ifElseJump_return();
    retval.start = input.LT(1);
    int ifElseJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal300 = null;
    Token ID301 = null;
    AntlrPilarParser.annotationList_return annotationList299 = null;

    Object t_tree = null;
    Object string_literal300_tree = null;
    Object ID301_tree = null;
    RewriteRuleTokenStream stream_204 = new RewriteRuleTokenStream(adaptor,
        "token 204");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 73)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:551:2: (t= 'else' annotationList 'goto' ID -> ^( IF_ELSE_JUMP[$t] annotationList ID ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:551:4: t= 'else' annotationList 'goto' ID
      {
        t = (Token) match(input, 194, FOLLOW_194_in_ifElseJump5228);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_194.add(t);

        pushFollow(FOLLOW_annotationList_in_ifElseJump5230);
        annotationList299 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList299.getTree());
        string_literal300 = (Token) match(
            input,
            204,
            FOLLOW_204_in_ifElseJump5232);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_204.add(string_literal300);

        ID301 = (Token) match(input, ID, FOLLOW_ID_in_ifElseJump5234);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID301);

        // AST REWRITE
        // elements: annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 551:41: -> ^( IF_ELSE_JUMP[$t] annotationList ID )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:551:44: ^( IF_ELSE_JUMP[$t] annotationList ID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(IF_ELSE_JUMP, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 73, ifElseJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "ifElseJump"

  public static class switchCaseJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "switchCaseJump"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:554:1: switchCaseJump : t= '|' exp '=>' annotationList 'goto' ID -> ^( SWITCH_CASE_JUMP[$t] exp annotationList ID ) ;
  public final AntlrPilarParser.switchCaseJump_return switchCaseJump()
      throws RecognitionException {
    AntlrPilarParser.switchCaseJump_return retval = new AntlrPilarParser.switchCaseJump_return();
    retval.start = input.LT(1);
    int switchCaseJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal303 = null;
    Token string_literal305 = null;
    Token ID306 = null;
    AntlrPilarParser.exp_return exp302 = null;

    AntlrPilarParser.annotationList_return annotationList304 = null;

    Object t_tree = null;
    Object string_literal303_tree = null;
    Object string_literal305_tree = null;
    Object ID306_tree = null;
    RewriteRuleTokenStream stream_204 = new RewriteRuleTokenStream(adaptor,
        "token 204");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_208 = new RewriteRuleTokenStream(adaptor,
        "token 208");
    RewriteRuleTokenStream stream_192 = new RewriteRuleTokenStream(adaptor,
        "token 192");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 74)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:555:2: (t= '|' exp '=>' annotationList 'goto' ID -> ^( SWITCH_CASE_JUMP[$t] exp annotationList ID ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:555:4: t= '|' exp '=>' annotationList 'goto' ID
      {
        t = (Token) match(input, 192, FOLLOW_192_in_switchCaseJump5261);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_192.add(t);

        pushFollow(FOLLOW_exp_in_switchCaseJump5263);
        exp302 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp302.getTree());
        string_literal303 = (Token) match(
            input,
            208,
            FOLLOW_208_in_switchCaseJump5270);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_208.add(string_literal303);

        pushFollow(FOLLOW_annotationList_in_switchCaseJump5272);
        annotationList304 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList304.getTree());
        string_literal305 = (Token) match(
            input,
            204,
            FOLLOW_204_in_switchCaseJump5274);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_204.add(string_literal305);

        ID306 = (Token) match(input, ID, FOLLOW_ID_in_switchCaseJump5276);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID306);

        // AST REWRITE
        // elements: exp, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 556:41: -> ^( SWITCH_CASE_JUMP[$t] exp annotationList ID )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:556:44: ^( SWITCH_CASE_JUMP[$t] exp annotationList ID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(SWITCH_CASE_JUMP, t),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 74, switchCaseJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "switchCaseJump"

  public static class switchDefaultJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "switchDefaultJump"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:559:1: switchDefaultJump : t= '|' '=>' annotationList 'goto' ID -> ^( SWITCH_DEFAULT_JUMP[$t] annotationList ID ) ;
  public final AntlrPilarParser.switchDefaultJump_return switchDefaultJump()
      throws RecognitionException {
    AntlrPilarParser.switchDefaultJump_return retval = new AntlrPilarParser.switchDefaultJump_return();
    retval.start = input.LT(1);
    int switchDefaultJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal307 = null;
    Token string_literal309 = null;
    Token ID310 = null;
    AntlrPilarParser.annotationList_return annotationList308 = null;

    Object t_tree = null;
    Object string_literal307_tree = null;
    Object string_literal309_tree = null;
    Object ID310_tree = null;
    RewriteRuleTokenStream stream_204 = new RewriteRuleTokenStream(adaptor,
        "token 204");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_208 = new RewriteRuleTokenStream(adaptor,
        "token 208");
    RewriteRuleTokenStream stream_192 = new RewriteRuleTokenStream(adaptor,
        "token 192");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 75)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:560:2: (t= '|' '=>' annotationList 'goto' ID -> ^( SWITCH_DEFAULT_JUMP[$t] annotationList ID ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:560:4: t= '|' '=>' annotationList 'goto' ID
      {
        t = (Token) match(input, 192, FOLLOW_192_in_switchDefaultJump5309);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_192.add(t);

        string_literal307 = (Token) match(
            input,
            208,
            FOLLOW_208_in_switchDefaultJump5311);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_208.add(string_literal307);

        pushFollow(FOLLOW_annotationList_in_switchDefaultJump5313);
        annotationList308 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList308.getTree());
        string_literal309 = (Token) match(
            input,
            204,
            FOLLOW_204_in_switchDefaultJump5315);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_204.add(string_literal309);

        ID310 = (Token) match(input, ID, FOLLOW_ID_in_switchDefaultJump5317);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID310);

        // AST REWRITE
        // elements: annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 560:41: -> ^( SWITCH_DEFAULT_JUMP[$t] annotationList ID )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:560:44: ^( SWITCH_DEFAULT_JUMP[$t] annotationList ID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(SWITCH_DEFAULT_JUMP, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 75, switchDefaultJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "switchDefaultJump"

  public static class catchClause_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "catchClause"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:563:1: catchClause : t= 'catch' annotationList ( type )? (local= ID )? '@' '[' from= ID '..' to= ID ']' jump -> ^( CATCH_CLAUSE[$t] annotationList ^( OPTION ( type )? ) ^( OPTION ( $local)? ) $from $to ( jump )? ) ;
  public final AntlrPilarParser.catchClause_return catchClause()
      throws RecognitionException {
    AntlrPilarParser.catchClause_return retval = new AntlrPilarParser.catchClause_return();
    retval.start = input.LT(1);
    int catchClause_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token local = null;
    Token from = null;
    Token to = null;
    Token char_literal313 = null;
    Token char_literal314 = null;
    Token string_literal315 = null;
    Token char_literal316 = null;
    AntlrPilarParser.annotationList_return annotationList311 = null;

    AntlrPilarParser.type_return type312 = null;

    AntlrPilarParser.jump_return jump317 = null;

    Object t_tree = null;
    Object local_tree = null;
    Object from_tree = null;
    Object to_tree = null;
    Object char_literal313_tree = null;
    Object char_literal314_tree = null;
    Object string_literal315_tree = null;
    Object char_literal316_tree = null;
    RewriteRuleTokenStream stream_210 = new RewriteRuleTokenStream(adaptor,
        "token 210");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleTokenStream stream_209 = new RewriteRuleTokenStream(adaptor,
        "token 209");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    RewriteRuleSubtreeStream stream_jump = new RewriteRuleSubtreeStream(
        adaptor, "rule jump");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 76)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:564:2: (t= 'catch' annotationList ( type )? (local= ID )? '@' '[' from= ID '..' to= ID ']' jump -> ^( CATCH_CLAUSE[$t] annotationList ^( OPTION ( type )? ) ^( OPTION ( $local)? ) $from $to ( jump )? ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:564:4: t= 'catch' annotationList ( type )? (local= ID )? '@' '[' from= ID '..' to= ID ']' jump
      {
        t = (Token) match(input, 209, FOLLOW_209_in_catchClause5342);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_209.add(t);

        pushFollow(FOLLOW_annotationList_in_catchClause5344);
        annotationList311 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList311.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:565:4: ( type )?
        int alt91 = 2;
        int LA91_0 = input.LA(1);

        if ((LA91_0 == TYPEVARID || LA91_0 == 167 || LA91_0 == 175)) {
          alt91 = 1;
        } else if ((LA91_0 == ID)) {
          int LA91_2 = input.LA(2);

          if ((synpred110_AntlrPilar())) {
            alt91 = 1;
          }
        }
        switch (alt91) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_catchClause5349);
            type312 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type312.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:565:10: (local= ID )?
        int alt92 = 2;
        int LA92_0 = input.LA(1);

        if ((LA92_0 == ID)) {
          alt92 = 1;
        }
        switch (alt92) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:565:11: local= ID
          {
            local = (Token) match(input, ID, FOLLOW_ID_in_catchClause5355);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(local);

          }
            break;

        }

        char_literal313 = (Token) match(
            input,
            169,
            FOLLOW_169_in_catchClause5362);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_169.add(char_literal313);

        char_literal314 = (Token) match(
            input,
            200,
            FOLLOW_200_in_catchClause5364);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_200.add(char_literal314);

        from = (Token) match(input, ID, FOLLOW_ID_in_catchClause5368);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(from);

        string_literal315 = (Token) match(
            input,
            210,
            FOLLOW_210_in_catchClause5370);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_210.add(string_literal315);

        to = (Token) match(input, ID, FOLLOW_ID_in_catchClause5377);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(to);

        char_literal316 = (Token) match(
            input,
            201,
            FOLLOW_201_in_catchClause5379);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_201.add(char_literal316);

        pushFollow(FOLLOW_jump_in_catchClause5384);
        jump317 = jump();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_jump.add(jump317.getTree());

        // AST REWRITE
        // elements: jump, type, annotationList, local, to, from
        // token labels: to, from, local
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_to = new RewriteRuleTokenStream(
              adaptor, "token to", to);
          RewriteRuleTokenStream stream_from = new RewriteRuleTokenStream(
              adaptor, "token from", from);
          RewriteRuleTokenStream stream_local = new RewriteRuleTokenStream(
              adaptor, "token local", local);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 568:41: -> ^( CATCH_CLAUSE[$t] annotationList ^( OPTION ( type )? ) ^( OPTION ( $local)? ) $from $to ( jump )? )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:568:44: ^( CATCH_CLAUSE[$t] annotationList ^( OPTION ( type )? ) ^( OPTION ( $local)? ) $from $to ( jump )? )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(CATCH_CLAUSE, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:568:78: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:568:87: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:568:94: ^( OPTION ( $local)? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:568:103: ( $local)?
                if (stream_local.hasNext()) {
                  adaptor.addChild(root_2, stream_local.nextNode());

                }
                stream_local.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_from.nextNode());
              adaptor.addChild(root_1, stream_to.nextNode());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:568:122: ( jump )?
              if (stream_jump.hasNext()) {
                adaptor.addChild(root_1, stream_jump.nextTree());

              }
              stream_jump.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 76, catchClause_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "catchClause"

  public static class exp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "exp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:571:1: exp : conditionalExp ;
  public final AntlrPilarParser.exp_return exp() throws RecognitionException {
    AntlrPilarParser.exp_return retval = new AntlrPilarParser.exp_return();
    retval.start = input.LT(1);
    int exp_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.conditionalExp_return conditionalExp318 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 77)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:572:2: ( conditionalExp )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:572:4: conditionalExp
      {
        root_0 = (Object) adaptor.nil();

        pushFollow(FOLLOW_conditionalExp_in_exp5461);
        conditionalExp318 = conditionalExp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          adaptor.addChild(root_0, conditionalExp318.getTree());

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 77, exp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "exp"

  public static class conditionalExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "conditionalExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:575:1: conditionalExp : ( conditionalImplyExp | ifThenExp ( 'else' ifThenExp )* ifElseExp -> ^( IF_EXP ^( LIST ( ifThenExp )+ ) ifElseExp ) | 'switch' exp ( switchCaseExp )* ( switchDefaultExp )? -> ^( SWITCH_EXP exp ^( LIST ( switchCaseExp )* ) ^( OPTION ( switchDefaultExp )? ) ) );
  public final AntlrPilarParser.conditionalExp_return conditionalExp()
      throws RecognitionException {
    AntlrPilarParser.conditionalExp_return retval = new AntlrPilarParser.conditionalExp_return();
    retval.start = input.LT(1);
    int conditionalExp_StartIndex = input.index();
    Object root_0 = null;

    Token string_literal321 = null;
    Token string_literal324 = null;
    AntlrPilarParser.conditionalImplyExp_return conditionalImplyExp319 = null;

    AntlrPilarParser.ifThenExp_return ifThenExp320 = null;

    AntlrPilarParser.ifThenExp_return ifThenExp322 = null;

    AntlrPilarParser.ifElseExp_return ifElseExp323 = null;

    AntlrPilarParser.exp_return exp325 = null;

    AntlrPilarParser.switchCaseExp_return switchCaseExp326 = null;

    AntlrPilarParser.switchDefaultExp_return switchDefaultExp327 = null;

    Object string_literal321_tree = null;
    Object string_literal324_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_ifElseExp = new RewriteRuleSubtreeStream(
        adaptor, "rule ifElseExp");
    RewriteRuleSubtreeStream stream_ifThenExp = new RewriteRuleSubtreeStream(
        adaptor, "rule ifThenExp");
    RewriteRuleSubtreeStream stream_switchDefaultExp = new RewriteRuleSubtreeStream(
        adaptor, "rule switchDefaultExp");
    RewriteRuleSubtreeStream stream_switchCaseExp = new RewriteRuleSubtreeStream(
        adaptor, "rule switchCaseExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 78)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:576:2: ( conditionalImplyExp | ifThenExp ( 'else' ifThenExp )* ifElseExp -> ^( IF_EXP ^( LIST ( ifThenExp )+ ) ifElseExp ) | 'switch' exp ( switchCaseExp )* ( switchDefaultExp )? -> ^( SWITCH_EXP exp ^( LIST ( switchCaseExp )* ) ^( OPTION ( switchDefaultExp )? ) ) )
      int alt96 = 3;
      switch (input.LA(1)) {
        case HEX_LIT:
        case DEC_LIT:
        case OCT_LIT:
        case ID:
        case GLOBALID:
        case ADD_OP:
        case MUL_OP:
        case UN_OP:
        case CHAR_LIT:
        case STRING_LIT:
        case SYMBOL_LIT:
        case RAW_LIT:
        case BIN_LIT:
        case FLOAT_LIT:
        case RATIONAL_LIT:
        case 167:
        case 175:
        case 213:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 221: {
          alt96 = 1;
        }
          break;
        case 206: {
          alt96 = 2;
        }
          break;
        case 202: {
          alt96 = 3;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 96, 0, input);

          throw nvae;
      }

      switch (alt96) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:576:4: conditionalImplyExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_conditionalImplyExp_in_conditionalExp5474);
          conditionalImplyExp319 = conditionalImplyExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, conditionalImplyExp319.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:577:4: ifThenExp ( 'else' ifThenExp )* ifElseExp
        {
          pushFollow(FOLLOW_ifThenExp_in_conditionalExp5479);
          ifThenExp320 = ifThenExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_ifThenExp.add(ifThenExp320.getTree());
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:578:4: ( 'else' ifThenExp )*
          loop93: do {
            int alt93 = 2;
            int LA93_0 = input.LA(1);

            if ((LA93_0 == 194)) {
              int LA93_1 = input.LA(2);

              if ((synpred113_AntlrPilar())) {
                alt93 = 1;
              }

            }

            switch (alt93) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:578:5: 'else' ifThenExp
              {
                string_literal321 = (Token) match(
                    input,
                    194,
                    FOLLOW_194_in_conditionalExp5485);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_194.add(string_literal321);

                pushFollow(FOLLOW_ifThenExp_in_conditionalExp5487);
                ifThenExp322 = ifThenExp();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_ifThenExp.add(ifThenExp322.getTree());

              }
                break;

              default:
                break loop93;
            }
          } while (true);

          pushFollow(FOLLOW_ifElseExp_in_conditionalExp5494);
          ifElseExp323 = ifElseExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_ifElseExp.add(ifElseExp323.getTree());

          // AST REWRITE
          // elements: ifElseExp, ifThenExp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 579:41: -> ^( IF_EXP ^( LIST ( ifThenExp )+ ) ifElseExp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:579:44: ^( IF_EXP ^( LIST ( ifThenExp )+ ) ifElseExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(IF_EXP, "IF_EXP"),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:579:53: ^( LIST ( ifThenExp )+ )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  if (!(stream_ifThenExp.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_ifThenExp.hasNext()) {
                    adaptor.addChild(root_2, stream_ifThenExp.nextTree());

                  }
                  stream_ifThenExp.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_ifElseExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:580:4: 'switch' exp ( switchCaseExp )* ( switchDefaultExp )?
        {
          string_literal324 = (Token) match(
              input,
              202,
              FOLLOW_202_in_conditionalExp5541);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_202.add(string_literal324);

          pushFollow(FOLLOW_exp_in_conditionalExp5543);
          exp325 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp325.getTree());
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:580:17: ( switchCaseExp )*
          loop94: do {
            int alt94 = 2;
            int LA94_0 = input.LA(1);

            if ((LA94_0 == 192)) {
              int LA94_1 = input.LA(2);

              if ((synpred115_AntlrPilar())) {
                alt94 = 1;
              }

            }

            switch (alt94) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: switchCaseExp
              {
                pushFollow(FOLLOW_switchCaseExp_in_conditionalExp5545);
                switchCaseExp326 = switchCaseExp();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_switchCaseExp.add(switchCaseExp326.getTree());

              }
                break;

              default:
                break loop94;
            }
          } while (true);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:4: ( switchDefaultExp )?
          int alt95 = 2;
          int LA95_0 = input.LA(1);

          if ((LA95_0 == 192)) {
            int LA95_1 = input.LA(2);

            if ((synpred116_AntlrPilar())) {
              alt95 = 1;
            }
          }
          switch (alt95) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: switchDefaultExp
            {
              pushFollow(FOLLOW_switchDefaultExp_in_conditionalExp5561);
              switchDefaultExp327 = switchDefaultExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_switchDefaultExp.add(switchDefaultExp327.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: exp, switchCaseExp, switchDefaultExp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 581:41: -> ^( SWITCH_EXP exp ^( LIST ( switchCaseExp )* ) ^( OPTION ( switchDefaultExp )? ) )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:44: ^( SWITCH_EXP exp ^( LIST ( switchCaseExp )* ) ^( OPTION ( switchDefaultExp )? ) )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(SWITCH_EXP, "SWITCH_EXP"),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:61: ^( LIST ( switchCaseExp )* )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:68: ( switchCaseExp )*
                  while (stream_switchCaseExp.hasNext()) {
                    adaptor.addChild(root_2, stream_switchCaseExp.nextTree());

                  }
                  stream_switchCaseExp.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:84: ^( OPTION ( switchDefaultExp )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:93: ( switchDefaultExp )?
                  if (stream_switchDefaultExp.hasNext()) {
                    adaptor
                        .addChild(root_2, stream_switchDefaultExp.nextTree());

                  }
                  stream_switchDefaultExp.reset();

                  adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 78, conditionalExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "conditionalExp"

  public static class ifThenExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "ifThenExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:584:1: ifThenExp : t= 'if' e1= exp 'then' annotationList e2= exp -> ^( IF_THEN_EXP[$t] $e1 annotationList $e2) ;
  public final AntlrPilarParser.ifThenExp_return ifThenExp()
      throws RecognitionException {
    AntlrPilarParser.ifThenExp_return retval = new AntlrPilarParser.ifThenExp_return();
    retval.start = input.LT(1);
    int ifThenExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal328 = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    AntlrPilarParser.annotationList_return annotationList329 = null;

    Object t_tree = null;
    Object string_literal328_tree = null;
    RewriteRuleTokenStream stream_206 = new RewriteRuleTokenStream(adaptor,
        "token 206");
    RewriteRuleTokenStream stream_207 = new RewriteRuleTokenStream(adaptor,
        "token 207");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 79)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:585:2: (t= 'if' e1= exp 'then' annotationList e2= exp -> ^( IF_THEN_EXP[$t] $e1 annotationList $e2) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:585:4: t= 'if' e1= exp 'then' annotationList e2= exp
      {
        t = (Token) match(input, 206, FOLLOW_206_in_ifThenExp5616);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_206.add(t);

        pushFollow(FOLLOW_exp_in_ifThenExp5620);
        e1 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e1.getTree());
        string_literal328 = (Token) match(
            input,
            207,
            FOLLOW_207_in_ifThenExp5622);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_207.add(string_literal328);

        pushFollow(FOLLOW_annotationList_in_ifThenExp5624);
        annotationList329 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList329.getTree());
        pushFollow(FOLLOW_exp_in_ifThenExp5635);
        e2 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e2.getTree());

        // AST REWRITE
        // elements: e1, annotationList, e2
        // token labels: 
        // rule labels: retval, e1, e2
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
              adaptor, "rule e1", e1 != null ? e1.tree : null);
          RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
              adaptor, "rule e2", e2 != null ? e2.tree : null);

          root_0 = (Object) adaptor.nil();
          // 586:41: -> ^( IF_THEN_EXP[$t] $e1 annotationList $e2)
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:586:44: ^( IF_THEN_EXP[$t] $e1 annotationList $e2)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(IF_THEN_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_e1.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_e2.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 79, ifThenExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "ifThenExp"

  public static class ifElseExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "ifElseExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:589:1: ifElseExp : t= 'else' annotationList exp -> ^( IF_ELSE_EXP[$t] annotationList exp ) ;
  public final AntlrPilarParser.ifElseExp_return ifElseExp()
      throws RecognitionException {
    AntlrPilarParser.ifElseExp_return retval = new AntlrPilarParser.ifElseExp_return();
    retval.start = input.LT(1);
    int ifElseExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList330 = null;

    AntlrPilarParser.exp_return exp331 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 80)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:590:2: (t= 'else' annotationList exp -> ^( IF_ELSE_EXP[$t] annotationList exp ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:590:4: t= 'else' annotationList exp
      {
        t = (Token) match(input, 194, FOLLOW_194_in_ifElseExp5690);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_194.add(t);

        pushFollow(FOLLOW_annotationList_in_ifElseExp5692);
        annotationList330 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList330.getTree());
        pushFollow(FOLLOW_exp_in_ifElseExp5694);
        exp331 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp331.getTree());

        // AST REWRITE
        // elements: annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 590:41: -> ^( IF_ELSE_EXP[$t] annotationList exp )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:590:44: ^( IF_ELSE_EXP[$t] annotationList exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(IF_ELSE_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 80, ifElseExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "ifElseExp"

  public static class switchCaseExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "switchCaseExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:593:1: switchCaseExp : t= '|' e1= exp '=>' annotationList e2= exp -> ^( SWITCH_CASE_EXP[$t] $e1 annotationList $e2) ;
  public final AntlrPilarParser.switchCaseExp_return switchCaseExp()
      throws RecognitionException {
    AntlrPilarParser.switchCaseExp_return retval = new AntlrPilarParser.switchCaseExp_return();
    retval.start = input.LT(1);
    int switchCaseExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal332 = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    AntlrPilarParser.annotationList_return annotationList333 = null;

    Object t_tree = null;
    Object string_literal332_tree = null;
    RewriteRuleTokenStream stream_208 = new RewriteRuleTokenStream(adaptor,
        "token 208");
    RewriteRuleTokenStream stream_192 = new RewriteRuleTokenStream(adaptor,
        "token 192");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 81)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:594:2: (t= '|' e1= exp '=>' annotationList e2= exp -> ^( SWITCH_CASE_EXP[$t] $e1 annotationList $e2) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:594:4: t= '|' e1= exp '=>' annotationList e2= exp
      {
        t = (Token) match(input, 192, FOLLOW_192_in_switchCaseExp5728);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_192.add(t);

        pushFollow(FOLLOW_exp_in_switchCaseExp5732);
        e1 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e1.getTree());
        string_literal332 = (Token) match(
            input,
            208,
            FOLLOW_208_in_switchCaseExp5734);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_208.add(string_literal332);

        pushFollow(FOLLOW_annotationList_in_switchCaseExp5739);
        annotationList333 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList333.getTree());
        pushFollow(FOLLOW_exp_in_switchCaseExp5743);
        e2 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e2.getTree());

        // AST REWRITE
        // elements: e2, annotationList, e1
        // token labels: 
        // rule labels: retval, e1, e2
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
              adaptor, "rule e1", e1 != null ? e1.tree : null);
          RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
              adaptor, "rule e2", e2 != null ? e2.tree : null);

          root_0 = (Object) adaptor.nil();
          // 595:41: -> ^( SWITCH_CASE_EXP[$t] $e1 annotationList $e2)
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:595:44: ^( SWITCH_CASE_EXP[$t] $e1 annotationList $e2)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(SWITCH_CASE_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_e1.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_e2.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 81, switchCaseExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "switchCaseExp"

  public static class switchDefaultExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "switchDefaultExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:598:1: switchDefaultExp : t= '|' '=>' annotationList exp -> ^( SWITCH_DEFAULT_EXP[$t] annotationList exp ) ;
  public final AntlrPilarParser.switchDefaultExp_return switchDefaultExp()
      throws RecognitionException {
    AntlrPilarParser.switchDefaultExp_return retval = new AntlrPilarParser.switchDefaultExp_return();
    retval.start = input.LT(1);
    int switchDefaultExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal334 = null;
    AntlrPilarParser.annotationList_return annotationList335 = null;

    AntlrPilarParser.exp_return exp336 = null;

    Object t_tree = null;
    Object string_literal334_tree = null;
    RewriteRuleTokenStream stream_208 = new RewriteRuleTokenStream(adaptor,
        "token 208");
    RewriteRuleTokenStream stream_192 = new RewriteRuleTokenStream(adaptor,
        "token 192");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 82)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:599:2: (t= '|' '=>' annotationList exp -> ^( SWITCH_DEFAULT_EXP[$t] annotationList exp ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:599:4: t= '|' '=>' annotationList exp
      {
        t = (Token) match(input, 192, FOLLOW_192_in_switchDefaultExp5786);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_192.add(t);

        string_literal334 = (Token) match(
            input,
            208,
            FOLLOW_208_in_switchDefaultExp5788);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_208.add(string_literal334);

        pushFollow(FOLLOW_annotationList_in_switchDefaultExp5790);
        annotationList335 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList335.getTree());
        pushFollow(FOLLOW_exp_in_switchDefaultExp5792);
        exp336 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp336.getTree());

        // AST REWRITE
        // elements: annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 599:41: -> ^( SWITCH_DEFAULT_EXP[$t] annotationList exp )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:599:44: ^( SWITCH_DEFAULT_EXP[$t] annotationList exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(SWITCH_DEFAULT_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 82, switchDefaultExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "switchDefaultExp"

  public static class conditionalImplyExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "conditionalImplyExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:602:1: conditionalImplyExp : (c1= conditionalOrExp -> $c1) (t= '==>' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) | t= '<==' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) )* ;
  public final AntlrPilarParser.conditionalImplyExp_return conditionalImplyExp()
      throws RecognitionException {
    AntlrPilarParser.conditionalImplyExp_return retval = new AntlrPilarParser.conditionalImplyExp_return();
    retval.start = input.LT(1);
    int conditionalImplyExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.conditionalOrExp_return c1 = null;

    AntlrPilarParser.conditionalOrExp_return c2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_211 = new RewriteRuleTokenStream(adaptor,
        "token 211");
    RewriteRuleTokenStream stream_212 = new RewriteRuleTokenStream(adaptor,
        "token 212");
    RewriteRuleSubtreeStream stream_conditionalOrExp = new RewriteRuleSubtreeStream(
        adaptor, "rule conditionalOrExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 83)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:603:2: ( (c1= conditionalOrExp -> $c1) (t= '==>' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) | t= '<==' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:603:4: (c1= conditionalOrExp -> $c1) (t= '==>' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) | t= '<==' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:603:4: (c1= conditionalOrExp -> $c1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:603:6: c1= conditionalOrExp
        {
          pushFollow(FOLLOW_conditionalOrExp_in_conditionalImplyExp5825);
          c1 = conditionalOrExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_conditionalOrExp.add(c1.getTree());

          // AST REWRITE
          // elements: c1
          // token labels: 
          // rule labels: retval, c1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_c1 = new RewriteRuleSubtreeStream(
                adaptor, "rule c1", c1 != null ? c1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 603:41: -> $c1
            {
              adaptor.addChild(root_0, stream_c1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:604:6: (t= '==>' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) | t= '<==' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) )*
        loop97: do {
          int alt97 = 3;
          int LA97_0 = input.LA(1);

          if ((LA97_0 == 211)) {
            int LA97_2 = input.LA(2);

            if ((synpred117_AntlrPilar())) {
              alt97 = 1;
            }

          } else if ((LA97_0 == 212)) {
            int LA97_3 = input.LA(2);

            if ((synpred118_AntlrPilar())) {
              alt97 = 2;
            }

          }

          switch (alt97) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:604:8: t= '==>' c2= conditionalOrExp
            {
              t = (Token) match(
                  input,
                  211,
                  FOLLOW_211_in_conditionalImplyExp5856);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_211.add(t);

              pushFollow(FOLLOW_conditionalOrExp_in_conditionalImplyExp5860);
              c2 = conditionalOrExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_conditionalOrExp.add(c2.getTree());

              // AST REWRITE
              // elements: conditionalImplyExp, t, c2
              // token labels: t
              // rule labels: retval, c2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_c2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule c2", c2 != null ? c2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 604:41: -> ^( BINARY $t $conditionalImplyExp $c2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:604:44: ^( BINARY $t $conditionalImplyExp $c2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_c2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:605:8: t= '<==' c2= conditionalOrExp
            {
              t = (Token) match(
                  input,
                  212,
                  FOLLOW_212_in_conditionalImplyExp5891);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_212.add(t);

              pushFollow(FOLLOW_conditionalOrExp_in_conditionalImplyExp5895);
              c2 = conditionalOrExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_conditionalOrExp.add(c2.getTree());

              // AST REWRITE
              // elements: c2, conditionalImplyExp, t
              // token labels: t
              // rule labels: retval, c2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_c2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule c2", c2 != null ? c2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 605:41: -> ^( BINARY $t $conditionalImplyExp $c2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:605:44: ^( BINARY $t $conditionalImplyExp $c2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_c2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop97;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 83, conditionalImplyExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "conditionalImplyExp"

  public static class conditionalOrExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "conditionalOrExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:609:1: conditionalOrExp : (c1= conditionalAndExp -> $c1) (t= COND_OR_OP c2= conditionalAndExp -> ^( BINARY $t $conditionalOrExp $c2) )* ;
  public final AntlrPilarParser.conditionalOrExp_return conditionalOrExp()
      throws RecognitionException {
    AntlrPilarParser.conditionalOrExp_return retval = new AntlrPilarParser.conditionalOrExp_return();
    retval.start = input.LT(1);
    int conditionalOrExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.conditionalAndExp_return c1 = null;

    AntlrPilarParser.conditionalAndExp_return c2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_COND_OR_OP = new RewriteRuleTokenStream(
        adaptor, "token COND_OR_OP");
    RewriteRuleSubtreeStream stream_conditionalAndExp = new RewriteRuleSubtreeStream(
        adaptor, "rule conditionalAndExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 84)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:2: ( (c1= conditionalAndExp -> $c1) (t= COND_OR_OP c2= conditionalAndExp -> ^( BINARY $t $conditionalOrExp $c2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:4: (c1= conditionalAndExp -> $c1) (t= COND_OR_OP c2= conditionalAndExp -> ^( BINARY $t $conditionalOrExp $c2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:4: (c1= conditionalAndExp -> $c1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:6: c1= conditionalAndExp
        {
          pushFollow(FOLLOW_conditionalAndExp_in_conditionalOrExp5939);
          c1 = conditionalAndExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_conditionalAndExp.add(c1.getTree());

          // AST REWRITE
          // elements: c1
          // token labels: 
          // rule labels: retval, c1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_c1 = new RewriteRuleSubtreeStream(
                adaptor, "rule c1", c1 != null ? c1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 610:41: -> $c1
            {
              adaptor.addChild(root_0, stream_c1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:611:6: (t= COND_OR_OP c2= conditionalAndExp -> ^( BINARY $t $conditionalOrExp $c2) )*
        loop98: do {
          int alt98 = 2;
          int LA98_0 = input.LA(1);

          if ((LA98_0 == COND_OR_OP)) {
            int LA98_2 = input.LA(2);

            if ((synpred119_AntlrPilar())) {
              alt98 = 1;
            }

          }

          switch (alt98) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:611:8: t= COND_OR_OP c2= conditionalAndExp
            {
              t = (Token) match(
                  input,
                  COND_OR_OP,
                  FOLLOW_COND_OR_OP_in_conditionalOrExp5970);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_COND_OR_OP.add(t);

              pushFollow(FOLLOW_conditionalAndExp_in_conditionalOrExp5982);
              c2 = conditionalAndExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_conditionalAndExp.add(c2.getTree());

              // AST REWRITE
              // elements: t, conditionalOrExp, c2
              // token labels: t
              // rule labels: retval, c2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_c2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule c2", c2 != null ? c2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 612:41: -> ^( BINARY $t $conditionalOrExp $c2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:612:44: ^( BINARY $t $conditionalOrExp $c2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_c2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop98;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 84, conditionalOrExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "conditionalOrExp"

  public static class conditionalAndExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "conditionalAndExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:616:1: conditionalAndExp : (i1= inclusiveOrExp -> $i1) (t= COND_AND_OP i2= inclusiveOrExp -> ^( BINARY $t $conditionalAndExp $i2) )* ;
  public final AntlrPilarParser.conditionalAndExp_return conditionalAndExp()
      throws RecognitionException {
    AntlrPilarParser.conditionalAndExp_return retval = new AntlrPilarParser.conditionalAndExp_return();
    retval.start = input.LT(1);
    int conditionalAndExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.inclusiveOrExp_return i1 = null;

    AntlrPilarParser.inclusiveOrExp_return i2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_COND_AND_OP = new RewriteRuleTokenStream(
        adaptor, "token COND_AND_OP");
    RewriteRuleSubtreeStream stream_inclusiveOrExp = new RewriteRuleSubtreeStream(
        adaptor, "rule inclusiveOrExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 85)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:617:2: ( (i1= inclusiveOrExp -> $i1) (t= COND_AND_OP i2= inclusiveOrExp -> ^( BINARY $t $conditionalAndExp $i2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:617:4: (i1= inclusiveOrExp -> $i1) (t= COND_AND_OP i2= inclusiveOrExp -> ^( BINARY $t $conditionalAndExp $i2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:617:4: (i1= inclusiveOrExp -> $i1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:617:6: i1= inclusiveOrExp
        {
          pushFollow(FOLLOW_inclusiveOrExp_in_conditionalAndExp6032);
          i1 = inclusiveOrExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_inclusiveOrExp.add(i1.getTree());

          // AST REWRITE
          // elements: i1
          // token labels: 
          // rule labels: retval, i1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_i1 = new RewriteRuleSubtreeStream(
                adaptor, "rule i1", i1 != null ? i1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 617:41: -> $i1
            {
              adaptor.addChild(root_0, stream_i1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:618:6: (t= COND_AND_OP i2= inclusiveOrExp -> ^( BINARY $t $conditionalAndExp $i2) )*
        loop99: do {
          int alt99 = 2;
          int LA99_0 = input.LA(1);

          if ((LA99_0 == COND_AND_OP)) {
            int LA99_2 = input.LA(2);

            if ((synpred120_AntlrPilar())) {
              alt99 = 1;
            }

          }

          switch (alt99) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:618:8: t= COND_AND_OP i2= inclusiveOrExp
            {
              t = (Token) match(
                  input,
                  COND_AND_OP,
                  FOLLOW_COND_AND_OP_in_conditionalAndExp6065);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_COND_AND_OP.add(t);

              pushFollow(FOLLOW_inclusiveOrExp_in_conditionalAndExp6069);
              i2 = inclusiveOrExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_inclusiveOrExp.add(i2.getTree());

              // AST REWRITE
              // elements: i2, conditionalAndExp, t
              // token labels: t
              // rule labels: retval, i2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_i2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule i2", i2 != null ? i2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 618:41: -> ^( BINARY $t $conditionalAndExp $i2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:618:44: ^( BINARY $t $conditionalAndExp $i2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_i2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop99;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 85, conditionalAndExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "conditionalAndExp"

  public static class inclusiveOrExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "inclusiveOrExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:622:1: inclusiveOrExp : (e1= exclusiveOrExp -> $e1) (t= OR_OP e2= exclusiveOrExp -> ^( BINARY $t $inclusiveOrExp $e2) )* ;
  public final AntlrPilarParser.inclusiveOrExp_return inclusiveOrExp()
      throws RecognitionException {
    AntlrPilarParser.inclusiveOrExp_return retval = new AntlrPilarParser.inclusiveOrExp_return();
    retval.start = input.LT(1);
    int inclusiveOrExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.exclusiveOrExp_return e1 = null;

    AntlrPilarParser.exclusiveOrExp_return e2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_OR_OP = new RewriteRuleTokenStream(adaptor,
        "token OR_OP");
    RewriteRuleSubtreeStream stream_exclusiveOrExp = new RewriteRuleSubtreeStream(
        adaptor, "rule exclusiveOrExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 86)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:623:2: ( (e1= exclusiveOrExp -> $e1) (t= OR_OP e2= exclusiveOrExp -> ^( BINARY $t $inclusiveOrExp $e2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:623:4: (e1= exclusiveOrExp -> $e1) (t= OR_OP e2= exclusiveOrExp -> ^( BINARY $t $inclusiveOrExp $e2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:623:4: (e1= exclusiveOrExp -> $e1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:623:6: e1= exclusiveOrExp
        {
          pushFollow(FOLLOW_exclusiveOrExp_in_inclusiveOrExp6108);
          e1 = exclusiveOrExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exclusiveOrExp.add(e1.getTree());

          // AST REWRITE
          // elements: e1
          // token labels: 
          // rule labels: retval, e1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
                adaptor, "rule e1", e1 != null ? e1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 623:41: -> $e1
            {
              adaptor.addChild(root_0, stream_e1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:6: (t= OR_OP e2= exclusiveOrExp -> ^( BINARY $t $inclusiveOrExp $e2) )*
        loop100: do {
          int alt100 = 2;
          int LA100_0 = input.LA(1);

          if ((LA100_0 == OR_OP)) {
            int LA100_2 = input.LA(2);

            if ((synpred121_AntlrPilar())) {
              alt100 = 1;
            }

          }

          switch (alt100) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:8: t= OR_OP e2= exclusiveOrExp
            {
              t = (Token) match(
                  input,
                  OR_OP,
                  FOLLOW_OR_OP_in_inclusiveOrExp6141);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_OR_OP.add(t);

              pushFollow(FOLLOW_exclusiveOrExp_in_inclusiveOrExp6145);
              e2 = exclusiveOrExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_exclusiveOrExp.add(e2.getTree());

              // AST REWRITE
              // elements: t, inclusiveOrExp, e2
              // token labels: t
              // rule labels: retval, e2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule e2", e2 != null ? e2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 624:41: -> ^( BINARY $t $inclusiveOrExp $e2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:44: ^( BINARY $t $inclusiveOrExp $e2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_e2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop100;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 86, inclusiveOrExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "inclusiveOrExp"

  public static class exclusiveOrExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "exclusiveOrExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:629:1: exclusiveOrExp : (a1= andExp -> $a1) (t= XOR_OP a2= andExp -> ^( BINARY $t $exclusiveOrExp $a2) )* ;
  public final AntlrPilarParser.exclusiveOrExp_return exclusiveOrExp()
      throws RecognitionException {
    AntlrPilarParser.exclusiveOrExp_return retval = new AntlrPilarParser.exclusiveOrExp_return();
    retval.start = input.LT(1);
    int exclusiveOrExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.andExp_return a1 = null;

    AntlrPilarParser.andExp_return a2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_XOR_OP = new RewriteRuleTokenStream(adaptor,
        "token XOR_OP");
    RewriteRuleSubtreeStream stream_andExp = new RewriteRuleSubtreeStream(
        adaptor, "rule andExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 87)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:2: ( (a1= andExp -> $a1) (t= XOR_OP a2= andExp -> ^( BINARY $t $exclusiveOrExp $a2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:4: (a1= andExp -> $a1) (t= XOR_OP a2= andExp -> ^( BINARY $t $exclusiveOrExp $a2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:4: (a1= andExp -> $a1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:6: a1= andExp
        {
          pushFollow(FOLLOW_andExp_in_exclusiveOrExp6191);
          a1 = andExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_andExp.add(a1.getTree());

          // AST REWRITE
          // elements: a1
          // token labels: 
          // rule labels: retval, a1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_a1 = new RewriteRuleSubtreeStream(
                adaptor, "rule a1", a1 != null ? a1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 630:41: -> $a1
            {
              adaptor.addChild(root_0, stream_a1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:631:6: (t= XOR_OP a2= andExp -> ^( BINARY $t $exclusiveOrExp $a2) )*
        loop101: do {
          int alt101 = 2;
          int LA101_0 = input.LA(1);

          if ((LA101_0 == XOR_OP)) {
            int LA101_2 = input.LA(2);

            if ((synpred122_AntlrPilar())) {
              alt101 = 1;
            }

          }

          switch (alt101) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:631:8: t= XOR_OP a2= andExp
            {
              t = (Token) match(
                  input,
                  XOR_OP,
                  FOLLOW_XOR_OP_in_exclusiveOrExp6232);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_XOR_OP.add(t);

              pushFollow(FOLLOW_andExp_in_exclusiveOrExp6236);
              a2 = andExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_andExp.add(a2.getTree());

              // AST REWRITE
              // elements: t, a2, exclusiveOrExp
              // token labels: t
              // rule labels: retval, a2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_a2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule a2", a2 != null ? a2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 631:41: -> ^( BINARY $t $exclusiveOrExp $a2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:631:44: ^( BINARY $t $exclusiveOrExp $a2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_a2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop101;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 87, exclusiveOrExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "exclusiveOrExp"

  public static class andExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "andExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:635:1: andExp : (e1= equalityExp -> $e1) (t= AND_OP e2= equalityExp -> ^( BINARY $t $andExp $e2) )* ;
  public final AntlrPilarParser.andExp_return andExp()
      throws RecognitionException {
    AntlrPilarParser.andExp_return retval = new AntlrPilarParser.andExp_return();
    retval.start = input.LT(1);
    int andExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.equalityExp_return e1 = null;

    AntlrPilarParser.equalityExp_return e2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_AND_OP = new RewriteRuleTokenStream(adaptor,
        "token AND_OP");
    RewriteRuleSubtreeStream stream_equalityExp = new RewriteRuleSubtreeStream(
        adaptor, "rule equalityExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 88)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:636:2: ( (e1= equalityExp -> $e1) (t= AND_OP e2= equalityExp -> ^( BINARY $t $andExp $e2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:636:4: (e1= equalityExp -> $e1) (t= AND_OP e2= equalityExp -> ^( BINARY $t $andExp $e2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:636:4: (e1= equalityExp -> $e1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:636:6: e1= equalityExp
        {
          pushFollow(FOLLOW_equalityExp_in_andExp6288);
          e1 = equalityExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_equalityExp.add(e1.getTree());

          // AST REWRITE
          // elements: e1
          // token labels: 
          // rule labels: retval, e1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
                adaptor, "rule e1", e1 != null ? e1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 636:41: -> $e1
            {
              adaptor.addChild(root_0, stream_e1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:6: (t= AND_OP e2= equalityExp -> ^( BINARY $t $andExp $e2) )*
        loop102: do {
          int alt102 = 2;
          int LA102_0 = input.LA(1);

          if ((LA102_0 == AND_OP)) {
            int LA102_2 = input.LA(2);

            if ((synpred123_AntlrPilar())) {
              alt102 = 1;
            }

          }

          switch (alt102) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:8: t= AND_OP e2= equalityExp
            {
              t = (Token) match(input, AND_OP, FOLLOW_AND_OP_in_andExp6324);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_AND_OP.add(t);

              pushFollow(FOLLOW_equalityExp_in_andExp6328);
              e2 = equalityExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_equalityExp.add(e2.getTree());

              // AST REWRITE
              // elements: t, e2, andExp
              // token labels: t
              // rule labels: retval, e2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule e2", e2 != null ? e2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 637:41: -> ^( BINARY $t $andExp $e2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:44: ^( BINARY $t $andExp $e2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_e2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop102;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 88, andExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "andExp"

  public static class equalityExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "equalityExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:641:1: equalityExp : (t1= typeTestExp -> $t1) (t= EQ_OP t2= typeTestExp -> ^( BINARY $t $equalityExp $t2) )* ;
  public final AntlrPilarParser.equalityExp_return equalityExp()
      throws RecognitionException {
    AntlrPilarParser.equalityExp_return retval = new AntlrPilarParser.equalityExp_return();
    retval.start = input.LT(1);
    int equalityExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.typeTestExp_return t1 = null;

    AntlrPilarParser.typeTestExp_return t2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_EQ_OP = new RewriteRuleTokenStream(adaptor,
        "token EQ_OP");
    RewriteRuleSubtreeStream stream_typeTestExp = new RewriteRuleSubtreeStream(
        adaptor, "rule typeTestExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 89)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:642:2: ( (t1= typeTestExp -> $t1) (t= EQ_OP t2= typeTestExp -> ^( BINARY $t $equalityExp $t2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:642:4: (t1= typeTestExp -> $t1) (t= EQ_OP t2= typeTestExp -> ^( BINARY $t $equalityExp $t2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:642:4: (t1= typeTestExp -> $t1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:642:6: t1= typeTestExp
        {
          pushFollow(FOLLOW_typeTestExp_in_equalityExp6375);
          t1 = typeTestExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_typeTestExp.add(t1.getTree());

          // AST REWRITE
          // elements: t1
          // token labels: 
          // rule labels: retval, t1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_t1 = new RewriteRuleSubtreeStream(
                adaptor, "rule t1", t1 != null ? t1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 642:41: -> $t1
            {
              adaptor.addChild(root_0, stream_t1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:6: (t= EQ_OP t2= typeTestExp -> ^( BINARY $t $equalityExp $t2) )*
        loop103: do {
          int alt103 = 2;
          int LA103_0 = input.LA(1);

          if ((LA103_0 == EQ_OP)) {
            int LA103_2 = input.LA(2);

            if ((synpred124_AntlrPilar())) {
              alt103 = 1;
            }

          }

          switch (alt103) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:8: t= EQ_OP t2= typeTestExp
            {
              t = (Token) match(input, EQ_OP, FOLLOW_EQ_OP_in_equalityExp6411);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_EQ_OP.add(t);

              pushFollow(FOLLOW_typeTestExp_in_equalityExp6415);
              t2 = typeTestExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeTestExp.add(t2.getTree());

              // AST REWRITE
              // elements: t2, t, equalityExp
              // token labels: t
              // rule labels: t2, retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_t2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule t2", t2 != null ? t2.tree : null);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 643:41: -> ^( BINARY $t $equalityExp $t2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:44: ^( BINARY $t $equalityExp $t2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_t2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop103;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 89, equalityExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "equalityExp"

  public static class typeTestExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeTestExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:647:1: typeTestExp : (r1= relationalExp -> $r1) (t= COLON_OP r2= relationalExp -> ^( BINARY $t $typeTestExp $r2) )* ;
  public final AntlrPilarParser.typeTestExp_return typeTestExp()
      throws RecognitionException {
    AntlrPilarParser.typeTestExp_return retval = new AntlrPilarParser.typeTestExp_return();
    retval.start = input.LT(1);
    int typeTestExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.relationalExp_return r1 = null;

    AntlrPilarParser.relationalExp_return r2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_COLON_OP = new RewriteRuleTokenStream(
        adaptor, "token COLON_OP");
    RewriteRuleSubtreeStream stream_relationalExp = new RewriteRuleSubtreeStream(
        adaptor, "rule relationalExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 90)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:648:2: ( (r1= relationalExp -> $r1) (t= COLON_OP r2= relationalExp -> ^( BINARY $t $typeTestExp $r2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:648:4: (r1= relationalExp -> $r1) (t= COLON_OP r2= relationalExp -> ^( BINARY $t $typeTestExp $r2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:648:4: (r1= relationalExp -> $r1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:648:6: r1= relationalExp
        {
          pushFollow(FOLLOW_relationalExp_in_typeTestExp6465);
          r1 = relationalExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_relationalExp.add(r1.getTree());

          // AST REWRITE
          // elements: r1
          // token labels: 
          // rule labels: retval, r1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_r1 = new RewriteRuleSubtreeStream(
                adaptor, "rule r1", r1 != null ? r1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 648:41: -> $r1
            {
              adaptor.addChild(root_0, stream_r1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:6: (t= COLON_OP r2= relationalExp -> ^( BINARY $t $typeTestExp $r2) )*
        loop104: do {
          int alt104 = 2;
          int LA104_0 = input.LA(1);

          if ((LA104_0 == COLON_OP)) {
            int LA104_2 = input.LA(2);

            if ((synpred125_AntlrPilar())) {
              alt104 = 1;
            }

          }

          switch (alt104) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:8: t= COLON_OP r2= relationalExp
            {
              t = (Token) match(
                  input,
                  COLON_OP,
                  FOLLOW_COLON_OP_in_typeTestExp6499);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_COLON_OP.add(t);

              pushFollow(FOLLOW_relationalExp_in_typeTestExp6503);
              r2 = relationalExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_relationalExp.add(r2.getTree());

              // AST REWRITE
              // elements: typeTestExp, t, r2
              // token labels: t
              // rule labels: retval, r2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_r2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule r2", r2 != null ? r2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 649:41: -> ^( BINARY $t $typeTestExp $r2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:44: ^( BINARY $t $typeTestExp $r2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_r2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop104;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 90, typeTestExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeTestExp"

  public static class relationalExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "relationalExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:653:1: relationalExp : (s1= shiftExp -> $s1) (t= REL_OP s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '<' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '>' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) )* ;
  public final AntlrPilarParser.relationalExp_return relationalExp()
      throws RecognitionException {
    AntlrPilarParser.relationalExp_return retval = new AntlrPilarParser.relationalExp_return();
    retval.start = input.LT(1);
    int relationalExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.shiftExp_return s1 = null;

    AntlrPilarParser.shiftExp_return s2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_REL_OP = new RewriteRuleTokenStream(adaptor,
        "token REL_OP");
    RewriteRuleTokenStream stream_166 = new RewriteRuleTokenStream(adaptor,
        "token 166");
    RewriteRuleTokenStream stream_165 = new RewriteRuleTokenStream(adaptor,
        "token 165");
    RewriteRuleSubtreeStream stream_shiftExp = new RewriteRuleSubtreeStream(
        adaptor, "rule shiftExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 91)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:654:2: ( (s1= shiftExp -> $s1) (t= REL_OP s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '<' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '>' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:654:4: (s1= shiftExp -> $s1) (t= REL_OP s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '<' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '>' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:654:4: (s1= shiftExp -> $s1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:654:6: s1= shiftExp
        {
          pushFollow(FOLLOW_shiftExp_in_relationalExp6547);
          s1 = shiftExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_shiftExp.add(s1.getTree());

          // AST REWRITE
          // elements: s1
          // token labels: 
          // rule labels: retval, s1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_s1 = new RewriteRuleSubtreeStream(
                adaptor, "rule s1", s1 != null ? s1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 654:41: -> $s1
            {
              adaptor.addChild(root_0, stream_s1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:6: (t= REL_OP s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '<' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '>' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) )*
        loop105: do {
          int alt105 = 4;
          switch (input.LA(1)) {
            case 166: {
              int LA105_2 = input.LA(2);

              if ((synpred128_AntlrPilar())) {
                alt105 = 3;
              }

            }
              break;
            case 165: {
              int LA105_3 = input.LA(2);

              if ((synpred127_AntlrPilar())) {
                alt105 = 2;
              }

            }
              break;
            case REL_OP: {
              int LA105_4 = input.LA(2);

              if ((synpred126_AntlrPilar())) {
                alt105 = 1;
              }

            }
              break;

          }

          switch (alt105) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:8: t= REL_OP s2= shiftExp
            {
              t = (Token) match(
                  input,
                  REL_OP,
                  FOLLOW_REL_OP_in_relationalExp6586);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_REL_OP.add(t);

              pushFollow(FOLLOW_shiftExp_in_relationalExp6590);
              s2 = shiftExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_shiftExp.add(s2.getTree());

              // AST REWRITE
              // elements: relationalExp, s2, t
              // token labels: t
              // rule labels: retval, s2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_s2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule s2", s2 != null ? s2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 655:41: -> ^( BINARY $t $relationalExp $s2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:44: ^( BINARY $t $relationalExp $s2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_s2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:656:8: t= '<' s2= shiftExp
            {
              t = (Token) match(input, 165, FOLLOW_165_in_relationalExp6628);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_165.add(t);

              pushFollow(FOLLOW_shiftExp_in_relationalExp6632);
              s2 = shiftExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_shiftExp.add(s2.getTree());

              // AST REWRITE
              // elements: s2, relationalExp, t
              // token labels: t
              // rule labels: retval, s2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_s2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule s2", s2 != null ? s2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 656:41: -> ^( BINARY $t $relationalExp $s2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:656:44: ^( BINARY $t $relationalExp $s2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_s2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 3:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:657:8: t= '>' s2= shiftExp
            {
              t = (Token) match(input, 166, FOLLOW_166_in_relationalExp6673);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_166.add(t);

              pushFollow(FOLLOW_shiftExp_in_relationalExp6677);
              s2 = shiftExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_shiftExp.add(s2.getTree());

              // AST REWRITE
              // elements: relationalExp, s2, t
              // token labels: t
              // rule labels: retval, s2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_s2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule s2", s2 != null ? s2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 657:41: -> ^( BINARY $t $relationalExp $s2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:657:44: ^( BINARY $t $relationalExp $s2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_s2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop105;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 91, relationalExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "relationalExp"

  public static class shiftExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "shiftExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:661:1: shiftExp : (a1= additiveExp -> $a1) (t= SHIFT_OP a2= additiveExp -> ^( BINARY $t $shiftExp $a2) )* ;
  public final AntlrPilarParser.shiftExp_return shiftExp()
      throws RecognitionException {
    AntlrPilarParser.shiftExp_return retval = new AntlrPilarParser.shiftExp_return();
    retval.start = input.LT(1);
    int shiftExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.additiveExp_return a1 = null;

    AntlrPilarParser.additiveExp_return a2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_SHIFT_OP = new RewriteRuleTokenStream(
        adaptor, "token SHIFT_OP");
    RewriteRuleSubtreeStream stream_additiveExp = new RewriteRuleSubtreeStream(
        adaptor, "rule additiveExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 92)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:662:2: ( (a1= additiveExp -> $a1) (t= SHIFT_OP a2= additiveExp -> ^( BINARY $t $shiftExp $a2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:662:4: (a1= additiveExp -> $a1) (t= SHIFT_OP a2= additiveExp -> ^( BINARY $t $shiftExp $a2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:662:4: (a1= additiveExp -> $a1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:662:6: a1= additiveExp
        {
          pushFollow(FOLLOW_additiveExp_in_shiftExp6730);
          a1 = additiveExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_additiveExp.add(a1.getTree());

          // AST REWRITE
          // elements: a1
          // token labels: 
          // rule labels: retval, a1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_a1 = new RewriteRuleSubtreeStream(
                adaptor, "rule a1", a1 != null ? a1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 662:41: -> $a1
            {
              adaptor.addChild(root_0, stream_a1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:6: (t= SHIFT_OP a2= additiveExp -> ^( BINARY $t $shiftExp $a2) )*
        loop106: do {
          int alt106 = 2;
          int LA106_0 = input.LA(1);

          if ((LA106_0 == SHIFT_OP)) {
            int LA106_2 = input.LA(2);

            if ((synpred129_AntlrPilar())) {
              alt106 = 1;
            }

          }

          switch (alt106) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:8: t= SHIFT_OP a2= additiveExp
            {
              t = (Token) match(
                  input,
                  SHIFT_OP,
                  FOLLOW_SHIFT_OP_in_shiftExp6766);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_SHIFT_OP.add(t);

              pushFollow(FOLLOW_additiveExp_in_shiftExp6770);
              a2 = additiveExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_additiveExp.add(a2.getTree());

              // AST REWRITE
              // elements: a2, shiftExp, t
              // token labels: t
              // rule labels: retval, a2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_a2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule a2", a2 != null ? a2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 663:41: -> ^( BINARY $t $shiftExp $a2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:44: ^( BINARY $t $shiftExp $a2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_a2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop106;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 92, shiftExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "shiftExp"

  public static class additiveExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "additiveExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:667:1: additiveExp : (m1= multiplicativeExp -> $m1) (t= ADD_OP m2= multiplicativeExp -> ^( BINARY $t $additiveExp $m2) )* ;
  public final AntlrPilarParser.additiveExp_return additiveExp()
      throws RecognitionException {
    AntlrPilarParser.additiveExp_return retval = new AntlrPilarParser.additiveExp_return();
    retval.start = input.LT(1);
    int additiveExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.multiplicativeExp_return m1 = null;

    AntlrPilarParser.multiplicativeExp_return m2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_ADD_OP = new RewriteRuleTokenStream(adaptor,
        "token ADD_OP");
    RewriteRuleSubtreeStream stream_multiplicativeExp = new RewriteRuleSubtreeStream(
        adaptor, "rule multiplicativeExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 93)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:668:2: ( (m1= multiplicativeExp -> $m1) (t= ADD_OP m2= multiplicativeExp -> ^( BINARY $t $additiveExp $m2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:668:4: (m1= multiplicativeExp -> $m1) (t= ADD_OP m2= multiplicativeExp -> ^( BINARY $t $additiveExp $m2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:668:4: (m1= multiplicativeExp -> $m1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:668:6: m1= multiplicativeExp
        {
          pushFollow(FOLLOW_multiplicativeExp_in_additiveExp6815);
          m1 = multiplicativeExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_multiplicativeExp.add(m1.getTree());

          // AST REWRITE
          // elements: m1
          // token labels: 
          // rule labels: retval, m1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_m1 = new RewriteRuleSubtreeStream(
                adaptor, "rule m1", m1 != null ? m1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 668:41: -> $m1
            {
              adaptor.addChild(root_0, stream_m1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:6: (t= ADD_OP m2= multiplicativeExp -> ^( BINARY $t $additiveExp $m2) )*
        loop107: do {
          int alt107 = 2;
          int LA107_0 = input.LA(1);

          if ((LA107_0 == ADD_OP)) {
            int LA107_2 = input.LA(2);

            if ((synpred130_AntlrPilar())) {
              alt107 = 1;
            }

          }

          switch (alt107) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:8: t= ADD_OP m2= multiplicativeExp
            {
              t = (Token) match(input, ADD_OP, FOLLOW_ADD_OP_in_additiveExp6845);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ADD_OP.add(t);

              pushFollow(FOLLOW_multiplicativeExp_in_additiveExp6849);
              m2 = multiplicativeExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_multiplicativeExp.add(m2.getTree());

              // AST REWRITE
              // elements: additiveExp, t, m2
              // token labels: t
              // rule labels: retval, m2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_m2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule m2", m2 != null ? m2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 669:41: -> ^( BINARY $t $additiveExp $m2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:44: ^( BINARY $t $additiveExp $m2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_m2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop107;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 93, additiveExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "additiveExp"

  public static class multiplicativeExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "multiplicativeExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:673:1: multiplicativeExp : (u1= unaryExp -> $u1) (t= MUL_OP u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) | t= '*' u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) )* ;
  public final AntlrPilarParser.multiplicativeExp_return multiplicativeExp()
      throws RecognitionException {
    AntlrPilarParser.multiplicativeExp_return retval = new AntlrPilarParser.multiplicativeExp_return();
    retval.start = input.LT(1);
    int multiplicativeExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.unaryExp_return u1 = null;

    AntlrPilarParser.unaryExp_return u2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_213 = new RewriteRuleTokenStream(adaptor,
        "token 213");
    RewriteRuleTokenStream stream_MUL_OP = new RewriteRuleTokenStream(adaptor,
        "token MUL_OP");
    RewriteRuleSubtreeStream stream_unaryExp = new RewriteRuleSubtreeStream(
        adaptor, "rule unaryExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 94)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:674:2: ( (u1= unaryExp -> $u1) (t= MUL_OP u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) | t= '*' u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:674:4: (u1= unaryExp -> $u1) (t= MUL_OP u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) | t= '*' u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:674:4: (u1= unaryExp -> $u1)
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:674:6: u1= unaryExp
        {
          pushFollow(FOLLOW_unaryExp_in_multiplicativeExp6891);
          u1 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_unaryExp.add(u1.getTree());

          // AST REWRITE
          // elements: u1
          // token labels: 
          // rule labels: retval, u1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_u1 = new RewriteRuleSubtreeStream(
                adaptor, "rule u1", u1 != null ? u1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 674:41: -> $u1
            {
              adaptor.addChild(root_0, stream_u1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:6: (t= MUL_OP u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) | t= '*' u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) )*
        loop108: do {
          int alt108 = 3;
          int LA108_0 = input.LA(1);

          if ((LA108_0 == MUL_OP)) {
            int LA108_2 = input.LA(2);

            if ((synpred131_AntlrPilar())) {
              alt108 = 1;
            }

          } else if ((LA108_0 == 213)) {
            int LA108_3 = input.LA(2);

            if ((synpred132_AntlrPilar())) {
              alt108 = 2;
            }

          }

          switch (alt108) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:8: t= MUL_OP u2= unaryExp
            {
              t = (Token) match(
                  input,
                  MUL_OP,
                  FOLLOW_MUL_OP_in_multiplicativeExp6931);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_MUL_OP.add(t);

              pushFollow(FOLLOW_unaryExp_in_multiplicativeExp6935);
              u2 = unaryExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_unaryExp.add(u2.getTree());

              // AST REWRITE
              // elements: u2, multiplicativeExp, t
              // token labels: t
              // rule labels: retval, u2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_u2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule u2", u2 != null ? u2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 675:41: -> ^( BINARY $t $multiplicativeExp $u2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:44: ^( BINARY $t $multiplicativeExp $u2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_u2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:676:8: t= '*' u2= unaryExp
            {
              t = (Token) match(input, 213, FOLLOW_213_in_multiplicativeExp6973);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_213.add(t);

              pushFollow(FOLLOW_unaryExp_in_multiplicativeExp6977);
              u2 = unaryExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_unaryExp.add(u2.getTree());

              // AST REWRITE
              // elements: t, u2, multiplicativeExp
              // token labels: t
              // rule labels: retval, u2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_u2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule u2", u2 != null ? u2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 676:41: -> ^( BINARY $t $multiplicativeExp $u2)
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:676:44: ^( BINARY $t $multiplicativeExp $u2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_u2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop108;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 94, multiplicativeExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "multiplicativeExp"

  public static class unaryExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "unaryExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:680:1: unaryExp : (t= UN_OP unaryExp -> ^( UNARY $t unaryExp ) | t= ADD_OP unaryExp -> ^( UNARY $t unaryExp ) | t= MUL_OP unaryExp -> ^( UNARY $t unaryExp ) | t= '*' unaryExp -> ^( UNARY $t unaryExp ) | castExp );
  public final AntlrPilarParser.unaryExp_return unaryExp()
      throws RecognitionException {
    AntlrPilarParser.unaryExp_return retval = new AntlrPilarParser.unaryExp_return();
    retval.start = input.LT(1);
    int unaryExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.unaryExp_return unaryExp337 = null;

    AntlrPilarParser.unaryExp_return unaryExp338 = null;

    AntlrPilarParser.unaryExp_return unaryExp339 = null;

    AntlrPilarParser.unaryExp_return unaryExp340 = null;

    AntlrPilarParser.castExp_return castExp341 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_213 = new RewriteRuleTokenStream(adaptor,
        "token 213");
    RewriteRuleTokenStream stream_UN_OP = new RewriteRuleTokenStream(adaptor,
        "token UN_OP");
    RewriteRuleTokenStream stream_MUL_OP = new RewriteRuleTokenStream(adaptor,
        "token MUL_OP");
    RewriteRuleTokenStream stream_ADD_OP = new RewriteRuleTokenStream(adaptor,
        "token ADD_OP");
    RewriteRuleSubtreeStream stream_unaryExp = new RewriteRuleSubtreeStream(
        adaptor, "rule unaryExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 95)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:681:2: (t= UN_OP unaryExp -> ^( UNARY $t unaryExp ) | t= ADD_OP unaryExp -> ^( UNARY $t unaryExp ) | t= MUL_OP unaryExp -> ^( UNARY $t unaryExp ) | t= '*' unaryExp -> ^( UNARY $t unaryExp ) | castExp )
      int alt109 = 5;
      switch (input.LA(1)) {
        case UN_OP: {
          alt109 = 1;
        }
          break;
        case ADD_OP: {
          alt109 = 2;
        }
          break;
        case MUL_OP: {
          alt109 = 3;
        }
          break;
        case 213: {
          alt109 = 4;
        }
          break;
        case HEX_LIT:
        case DEC_LIT:
        case OCT_LIT:
        case ID:
        case GLOBALID:
        case CHAR_LIT:
        case STRING_LIT:
        case SYMBOL_LIT:
        case RAW_LIT:
        case BIN_LIT:
        case FLOAT_LIT:
        case RATIONAL_LIT:
        case 167:
        case 175:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 221: {
          alt109 = 5;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 109, 0,
              input);

          throw nvae;
      }

      switch (alt109) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:681:4: t= UN_OP unaryExp
        {
          t = (Token) match(input, UN_OP, FOLLOW_UN_OP_in_unaryExp7036);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_UN_OP.add(t);

          pushFollow(FOLLOW_unaryExp_in_unaryExp7038);
          unaryExp337 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_unaryExp.add(unaryExp337.getTree());

          // AST REWRITE
          // elements: unaryExp, t
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 681:41: -> ^( UNARY $t unaryExp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:681:44: ^( UNARY $t unaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(UNARY, "UNARY"),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_unaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:682:4: t= ADD_OP unaryExp
        {
          t = (Token) match(input, ADD_OP, FOLLOW_ADD_OP_in_unaryExp7076);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_ADD_OP.add(t);

          pushFollow(FOLLOW_unaryExp_in_unaryExp7078);
          unaryExp338 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_unaryExp.add(unaryExp338.getTree());

          // AST REWRITE
          // elements: unaryExp, t
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 682:41: -> ^( UNARY $t unaryExp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:682:44: ^( UNARY $t unaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(UNARY, "UNARY"),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_unaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:683:4: t= MUL_OP unaryExp
        {
          t = (Token) match(input, MUL_OP, FOLLOW_MUL_OP_in_unaryExp7115);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_MUL_OP.add(t);

          pushFollow(FOLLOW_unaryExp_in_unaryExp7117);
          unaryExp339 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_unaryExp.add(unaryExp339.getTree());

          // AST REWRITE
          // elements: t, unaryExp
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 683:41: -> ^( UNARY $t unaryExp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:683:44: ^( UNARY $t unaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(UNARY, "UNARY"),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_unaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:684:4: t= '*' unaryExp
        {
          t = (Token) match(input, 213, FOLLOW_213_in_unaryExp7154);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_213.add(t);

          pushFollow(FOLLOW_unaryExp_in_unaryExp7156);
          unaryExp340 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_unaryExp.add(unaryExp340.getTree());

          // AST REWRITE
          // elements: t, unaryExp
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 684:41: -> ^( UNARY $t unaryExp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:684:44: ^( UNARY $t unaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(UNARY, "UNARY"),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_unaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:685:4: castExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_castExp_in_unaryExp7194);
          castExp341 = castExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, castExp341.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 95, unaryExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "unaryExp"

  public static class castExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "castExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:688:1: castExp : (t= '(' type ')' primaryExp -> ^( CAST[$t] type primaryExp ) | primaryExp );
  public final AntlrPilarParser.castExp_return castExp()
      throws RecognitionException {
    AntlrPilarParser.castExp_return retval = new AntlrPilarParser.castExp_return();
    retval.start = input.LT(1);
    int castExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal343 = null;
    AntlrPilarParser.type_return type342 = null;

    AntlrPilarParser.primaryExp_return primaryExp344 = null;

    AntlrPilarParser.primaryExp_return primaryExp345 = null;

    Object t_tree = null;
    Object char_literal343_tree = null;
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_primaryExp = new RewriteRuleSubtreeStream(
        adaptor, "rule primaryExp");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 96)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:689:2: (t= '(' type ')' primaryExp -> ^( CAST[$t] type primaryExp ) | primaryExp )
      int alt110 = 2;
      alt110 = dfa110.predict(input);
      switch (alt110) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:689:4: t= '(' type ')' primaryExp
        {
          t = (Token) match(input, 167, FOLLOW_167_in_castExp7207);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_167.add(t);

          pushFollow(FOLLOW_type_in_castExp7209);
          type342 = type();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_type.add(type342.getTree());
          char_literal343 = (Token) match(input, 168, FOLLOW_168_in_castExp7211);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_168.add(char_literal343);

          pushFollow(FOLLOW_primaryExp_in_castExp7213);
          primaryExp344 = primaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_primaryExp.add(primaryExp344.getTree());

          // AST REWRITE
          // elements: primaryExp, type
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 689:41: -> ^( CAST[$t] type primaryExp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:689:44: ^( CAST[$t] type primaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(CAST, t),
                    root_1);

                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_primaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:690:4: primaryExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_primaryExp_in_castExp7240);
          primaryExp345 = primaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, primaryExp345.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 96, castExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "castExp"

  public static class primaryExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "primaryExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:693:1: primaryExp : (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )* ;
  public final AntlrPilarParser.primaryExp_return primaryExp()
      throws RecognitionException {
    AntlrPilarParser.primaryExp_return retval = new AntlrPilarParser.primaryExp_return();
    retval.start = input.LT(1);
    int primaryExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal347 = null;
    Token ID348 = null;
    AntlrPilarParser.primary_return p = null;

    AntlrPilarParser.expList_return expList346 = null;

    AntlrPilarParser.callArg_return callArg349 = null;

    Object t_tree = null;
    Object char_literal347_tree = null;
    Object ID348_tree = null;
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleTokenStream stream_214 = new RewriteRuleTokenStream(adaptor,
        "token 214");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_callArg = new RewriteRuleSubtreeStream(
        adaptor, "rule callArg");
    RewriteRuleSubtreeStream stream_expList = new RewriteRuleSubtreeStream(
        adaptor, "rule expList");
    RewriteRuleSubtreeStream stream_primary = new RewriteRuleSubtreeStream(
        adaptor, "rule primary");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 97)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:694:2: ( (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:694:4: (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:694:4: (p= primary -> primary )
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:694:6: p= primary
        {
          pushFollow(FOLLOW_primary_in_primaryExp7256);
          p = primary();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_primary.add(p.getTree());

          // AST REWRITE
          // elements: primary
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 694:41: -> primary
            {
              adaptor.addChild(root_0, stream_primary.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:6: (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )*
        loop111: do {
          int alt111 = 4;
          alt111 = dfa111.predict(input);
          switch (alt111) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:8: t= '[' expList ']'
            {
              t = (Token) match(input, 200, FOLLOW_200_in_primaryExp7296);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_200.add(t);

              pushFollow(FOLLOW_expList_in_primaryExp7298);
              expList346 = expList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_expList.add(expList346.getTree());
              char_literal347 = (Token) match(
                  input,
                  201,
                  FOLLOW_201_in_primaryExp7300);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_201.add(char_literal347);

              // AST REWRITE
              // elements: primaryExp, expList
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 695:41: -> ^( INDEXING[$t] $primaryExp expList )
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:44: ^( INDEXING[$t] $primaryExp expList )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(INDEXING, t),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_expList.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:696:8: t= '.' ID
            {
              t = (Token) match(input, 214, FOLLOW_214_in_primaryExp7338);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_214.add(t);

              ID348 = (Token) match(input, ID, FOLLOW_ID_in_primaryExp7340);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID348);

              // AST REWRITE
              // elements: primaryExp, ID
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 696:41: -> ^( ACCESS[$t] $primaryExp ID )
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:696:44: ^( ACCESS[$t] $primaryExp ID )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(ACCESS, t),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_ID.nextNode());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 3:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:697:8: callArg
            {
              pushFollow(FOLLOW_callArg_in_primaryExp7385);
              callArg349 = callArg();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_callArg.add(callArg349.getTree());

              // AST REWRITE
              // elements: callArg, primaryExp
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 697:41: -> ^( CALL $primaryExp callArg )
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:697:44: ^( CALL $primaryExp callArg )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(CALL, "CALL"),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_callArg.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop111;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 97, primaryExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "primaryExp"

  public static class expList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "expList"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:701:1: expList : exp ( ',' exp )* -> ^( LIST ( exp )+ ) ;
  public final AntlrPilarParser.expList_return expList()
      throws RecognitionException {
    AntlrPilarParser.expList_return retval = new AntlrPilarParser.expList_return();
    retval.start = input.LT(1);
    int expList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal351 = null;
    AntlrPilarParser.exp_return exp350 = null;

    AntlrPilarParser.exp_return exp352 = null;

    Object char_literal351_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 98)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:2: ( exp ( ',' exp )* -> ^( LIST ( exp )+ ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:4: exp ( ',' exp )*
      {
        pushFollow(FOLLOW_exp_in_expList7440);
        exp350 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp350.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:8: ( ',' exp )*
        loop112: do {
          int alt112 = 2;
          int LA112_0 = input.LA(1);

          if ((LA112_0 == 170)) {
            alt112 = 1;
          }

          switch (alt112) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:10: ',' exp
            {
              char_literal351 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_expList7444);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal351);

              pushFollow(FOLLOW_exp_in_expList7446);
              exp352 = exp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_exp.add(exp352.getTree());

            }
              break;

            default:
              break loop112;
          }
        } while (true);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 702:41: -> ^( LIST ( exp )+ )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:44: ^( LIST ( exp )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, "LIST"),
                  root_1);

              if (!(stream_exp.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_exp.hasNext()) {
                adaptor.addChild(root_1, stream_exp.nextTree());

              }
              stream_exp.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 98, expList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "expList"

  public static class callArg_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "callArg"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:705:1: callArg : (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $callArg expList ) | t= '.' ID -> ^( ACCESS[$t] $callArg ID ) )* ;
  public final AntlrPilarParser.callArg_return callArg()
      throws RecognitionException {
    AntlrPilarParser.callArg_return retval = new AntlrPilarParser.callArg_return();
    retval.start = input.LT(1);
    int callArg_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal354 = null;
    Token ID355 = null;
    AntlrPilarParser.primary_return p = null;

    AntlrPilarParser.expList_return expList353 = null;

    Object t_tree = null;
    Object char_literal354_tree = null;
    Object ID355_tree = null;
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleTokenStream stream_214 = new RewriteRuleTokenStream(adaptor,
        "token 214");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_expList = new RewriteRuleSubtreeStream(
        adaptor, "rule expList");
    RewriteRuleSubtreeStream stream_primary = new RewriteRuleSubtreeStream(
        adaptor, "rule primary");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 99)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:706:2: ( (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $callArg expList ) | t= '.' ID -> ^( ACCESS[$t] $callArg ID ) )* )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:706:4: (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $callArg expList ) | t= '.' ID -> ^( ACCESS[$t] $callArg ID ) )*
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:706:4: (p= primary -> primary )
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:706:6: p= primary
        {
          pushFollow(FOLLOW_primary_in_callArg7493);
          p = primary();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_primary.add(p.getTree());

          // AST REWRITE
          // elements: primary
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 706:41: -> primary
            {
              adaptor.addChild(root_0, stream_primary.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:707:6: (t= '[' expList ']' -> ^( INDEXING[$t] $callArg expList ) | t= '.' ID -> ^( ACCESS[$t] $callArg ID ) )*
        loop113: do {
          int alt113 = 3;
          int LA113_0 = input.LA(1);

          if ((LA113_0 == 200)) {
            int LA113_2 = input.LA(2);

            if ((synpred142_AntlrPilar())) {
              alt113 = 1;
            }

          } else if ((LA113_0 == 214)) {
            int LA113_3 = input.LA(2);

            if ((synpred143_AntlrPilar())) {
              alt113 = 2;
            }

          }

          switch (alt113) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:707:8: t= '[' expList ']'
            {
              t = (Token) match(input, 200, FOLLOW_200_in_callArg7533);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_200.add(t);

              pushFollow(FOLLOW_expList_in_callArg7535);
              expList353 = expList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_expList.add(expList353.getTree());
              char_literal354 = (Token) match(
                  input,
                  201,
                  FOLLOW_201_in_callArg7537);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_201.add(char_literal354);

              // AST REWRITE
              // elements: expList, callArg
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 707:41: -> ^( INDEXING[$t] $callArg expList )
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:707:44: ^( INDEXING[$t] $callArg expList )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(INDEXING, t),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_expList.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:8: t= '.' ID
            {
              t = (Token) match(input, 214, FOLLOW_214_in_callArg7575);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_214.add(t);

              ID355 = (Token) match(input, ID, FOLLOW_ID_in_callArg7577);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID355);

              // AST REWRITE
              // elements: ID, callArg
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 708:41: -> ^( ACCESS[$t] $callArg ID )
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:44: ^( ACCESS[$t] $callArg ID )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(ACCESS, t),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_ID.nextNode());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop113;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 99, callArg_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "callArg"

  public static class primary_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "primary"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:712:1: primary : ( literal | tuple | nameExp | newListRanged | newList | newMultiArray | newRecord | newSet | newFunction | t= '`' type -> ^( TYPE_EXP[$t] type ) | newExp | funExp | letExp );
  public final AntlrPilarParser.primary_return primary()
      throws RecognitionException {
    AntlrPilarParser.primary_return retval = new AntlrPilarParser.primary_return();
    retval.start = input.LT(1);
    int primary_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.literal_return literal356 = null;

    AntlrPilarParser.tuple_return tuple357 = null;

    AntlrPilarParser.nameExp_return nameExp358 = null;

    AntlrPilarParser.newListRanged_return newListRanged359 = null;

    AntlrPilarParser.newList_return newList360 = null;

    AntlrPilarParser.newMultiArray_return newMultiArray361 = null;

    AntlrPilarParser.newRecord_return newRecord362 = null;

    AntlrPilarParser.newSet_return newSet363 = null;

    AntlrPilarParser.newFunction_return newFunction364 = null;

    AntlrPilarParser.type_return type365 = null;

    AntlrPilarParser.newExp_return newExp366 = null;

    AntlrPilarParser.funExp_return funExp367 = null;

    AntlrPilarParser.letExp_return letExp368 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 100)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:713:2: ( literal | tuple | nameExp | newListRanged | newList | newMultiArray | newRecord | newSet | newFunction | t= '`' type -> ^( TYPE_EXP[$t] type ) | newExp | funExp | letExp )
      int alt114 = 13;
      alt114 = dfa114.predict(input);
      switch (alt114) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:713:4: literal
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_literal_in_primary7634);
          literal356 = literal();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, literal356.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:714:4: tuple
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_tuple_in_primary7639);
          tuple357 = tuple();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, tuple357.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:715:4: nameExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_nameExp_in_primary7644);
          nameExp358 = nameExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, nameExp358.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:716:4: newListRanged
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newListRanged_in_primary7649);
          newListRanged359 = newListRanged();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newListRanged359.getTree());

        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:717:4: newList
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newList_in_primary7654);
          newList360 = newList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newList360.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:718:4: newMultiArray
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newMultiArray_in_primary7659);
          newMultiArray361 = newMultiArray();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newMultiArray361.getTree());

        }
          break;
        case 7:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:719:4: newRecord
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newRecord_in_primary7664);
          newRecord362 = newRecord();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newRecord362.getTree());

        }
          break;
        case 8:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:720:4: newSet
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newSet_in_primary7669);
          newSet363 = newSet();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newSet363.getTree());

        }
          break;
        case 9:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:721:4: newFunction
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newFunction_in_primary7674);
          newFunction364 = newFunction();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newFunction364.getTree());

        }
          break;
        case 10:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:722:4: t= '`' type
        {
          t = (Token) match(input, 215, FOLLOW_215_in_primary7682);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_215.add(t);

          pushFollow(FOLLOW_type_in_primary7684);
          type365 = type();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_type.add(type365.getTree());

          // AST REWRITE
          // elements: type
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 722:41: -> ^( TYPE_EXP[$t] type )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:722:44: ^( TYPE_EXP[$t] type )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(TYPE_EXP, t),
                    root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 11:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:723:4: newExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newExp_in_primary7724);
          newExp366 = newExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newExp366.getTree());

        }
          break;
        case 12:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:724:4: funExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_funExp_in_primary7729);
          funExp367 = funExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, funExp367.getTree());

        }
          break;
        case 13:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:725:4: letExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_letExp_in_primary7734);
          letExp368 = letExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, letExp368.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 100, primary_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "primary"

  public static class nameExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "nameExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:728:1: nameExp : ( name -> ^( NAME_EXP name ) | globalName -> ^( NAME_EXP globalName ) );
  public final AntlrPilarParser.nameExp_return nameExp()
      throws RecognitionException {
    AntlrPilarParser.nameExp_return retval = new AntlrPilarParser.nameExp_return();
    retval.start = input.LT(1);
    int nameExp_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.name_return name369 = null;

    AntlrPilarParser.globalName_return globalName370 = null;

    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_globalName = new RewriteRuleSubtreeStream(
        adaptor, "rule globalName");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 101)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:729:2: ( name -> ^( NAME_EXP name ) | globalName -> ^( NAME_EXP globalName ) )
      int alt115 = 2;
      alt115 = dfa115.predict(input);
      switch (alt115) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:729:4: name
        {
          pushFollow(FOLLOW_name_in_nameExp7745);
          name369 = name();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_name.add(name369.getTree());

          // AST REWRITE
          // elements: name
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 729:41: -> ^( NAME_EXP name )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:729:44: ^( NAME_EXP name )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NAME_EXP, "NAME_EXP"),
                    root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:730:4: globalName
        {
          pushFollow(FOLLOW_globalName_in_nameExp7790);
          globalName370 = globalName();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_globalName.add(globalName370.getTree());

          // AST REWRITE
          // elements: globalName
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 730:41: -> ^( NAME_EXP globalName )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:730:44: ^( NAME_EXP globalName )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NAME_EXP, "NAME_EXP"),
                    root_1);

                adaptor.addChild(root_1, stream_globalName.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 101, nameExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "nameExp"

  public static class literal_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "literal"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:733:1: literal : (t= 'true' -> ^( TRUE[$t] ) | t= 'false' -> ^( FALSE[$t] ) | t= 'null' -> ^( NULL[$t] ) | c= CHAR_LIT -> ^( CHAR[$c] $c) | intLiteral | realLiteral | s= STRING_LIT -> ^( STRING[$s] $s) | s= SYMBOL_LIT -> ^( SYMBOL[$s] $s) | r= RAW_LIT -> ^( RAW[$r] $r) );
  public final AntlrPilarParser.literal_return literal()
      throws RecognitionException {
    AntlrPilarParser.literal_return retval = new AntlrPilarParser.literal_return();
    retval.start = input.LT(1);
    int literal_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token c = null;
    Token s = null;
    Token r = null;
    AntlrPilarParser.intLiteral_return intLiteral371 = null;

    AntlrPilarParser.realLiteral_return realLiteral372 = null;

    Object t_tree = null;
    Object c_tree = null;
    Object s_tree = null;
    Object r_tree = null;
    RewriteRuleTokenStream stream_RAW_LIT = new RewriteRuleTokenStream(adaptor,
        "token RAW_LIT");
    RewriteRuleTokenStream stream_SYMBOL_LIT = new RewriteRuleTokenStream(
        adaptor, "token SYMBOL_LIT");
    RewriteRuleTokenStream stream_CHAR_LIT = new RewriteRuleTokenStream(
        adaptor, "token CHAR_LIT");
    RewriteRuleTokenStream stream_216 = new RewriteRuleTokenStream(adaptor,
        "token 216");
    RewriteRuleTokenStream stream_STRING_LIT = new RewriteRuleTokenStream(
        adaptor, "token STRING_LIT");
    RewriteRuleTokenStream stream_217 = new RewriteRuleTokenStream(adaptor,
        "token 217");
    RewriteRuleTokenStream stream_218 = new RewriteRuleTokenStream(adaptor,
        "token 218");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 102)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:734:2: (t= 'true' -> ^( TRUE[$t] ) | t= 'false' -> ^( FALSE[$t] ) | t= 'null' -> ^( NULL[$t] ) | c= CHAR_LIT -> ^( CHAR[$c] $c) | intLiteral | realLiteral | s= STRING_LIT -> ^( STRING[$s] $s) | s= SYMBOL_LIT -> ^( SYMBOL[$s] $s) | r= RAW_LIT -> ^( RAW[$r] $r) )
      int alt116 = 9;
      switch (input.LA(1)) {
        case 216: {
          alt116 = 1;
        }
          break;
        case 217: {
          alt116 = 2;
        }
          break;
        case 218: {
          alt116 = 3;
        }
          break;
        case CHAR_LIT: {
          alt116 = 4;
        }
          break;
        case HEX_LIT:
        case DEC_LIT:
        case OCT_LIT:
        case BIN_LIT: {
          alt116 = 5;
        }
          break;
        case FLOAT_LIT:
        case RATIONAL_LIT: {
          alt116 = 6;
        }
          break;
        case STRING_LIT: {
          alt116 = 7;
        }
          break;
        case SYMBOL_LIT: {
          alt116 = 8;
        }
          break;
        case RAW_LIT: {
          alt116 = 9;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 116, 0,
              input);

          throw nvae;
      }

      switch (alt116) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:734:4: t= 'true'
        {
          t = (Token) match(input, 216, FOLLOW_216_in_literal7839);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_216.add(t);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 734:41: -> ^( TRUE[$t] )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:734:44: ^( TRUE[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(TRUE, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:735:4: t= 'false'
        {
          t = (Token) match(input, 217, FOLLOW_217_in_literal7881);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_217.add(t);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 735:41: -> ^( FALSE[$t] )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:735:44: ^( FALSE[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(FALSE, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:736:4: t= 'null'
        {
          t = (Token) match(input, 218, FOLLOW_218_in_literal7922);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_218.add(t);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 736:41: -> ^( NULL[$t] )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:736:44: ^( NULL[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NULL, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:737:4: c= CHAR_LIT
        {
          c = (Token) match(input, CHAR_LIT, FOLLOW_CHAR_LIT_in_literal7964);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_CHAR_LIT.add(c);

          // AST REWRITE
          // elements: c
          // token labels: c
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c = new RewriteRuleTokenStream(
                adaptor, "token c", c);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 737:41: -> ^( CHAR[$c] $c)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:737:44: ^( CHAR[$c] $c)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(CHAR, c),
                    root_1);

                adaptor.addChild(root_1, stream_c.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:738:4: intLiteral
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_intLiteral_in_literal8005);
          intLiteral371 = intLiteral();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, intLiteral371.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:739:4: realLiteral
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_realLiteral_in_literal8010);
          realLiteral372 = realLiteral();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, realLiteral372.getTree());

        }
          break;
        case 7:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:740:4: s= STRING_LIT
        {
          s = (Token) match(input, STRING_LIT, FOLLOW_STRING_LIT_in_literal8017);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_STRING_LIT.add(s);

          // AST REWRITE
          // elements: s
          // token labels: s
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(
                adaptor, "token s", s);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 740:41: -> ^( STRING[$s] $s)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:740:44: ^( STRING[$s] $s)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(STRING, s),
                    root_1);

                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 8:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:741:4: s= SYMBOL_LIT
        {
          s = (Token) match(input, SYMBOL_LIT, FOLLOW_SYMBOL_LIT_in_literal8058);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_SYMBOL_LIT.add(s);

          // AST REWRITE
          // elements: s
          // token labels: s
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(
                adaptor, "token s", s);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 741:41: -> ^( SYMBOL[$s] $s)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:741:44: ^( SYMBOL[$s] $s)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(SYMBOL, s),
                    root_1);

                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 9:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:742:4: r= RAW_LIT
        {
          r = (Token) match(input, RAW_LIT, FOLLOW_RAW_LIT_in_literal8099);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_RAW_LIT.add(r);

          // AST REWRITE
          // elements: r
          // token labels: r
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_r = new RewriteRuleTokenStream(
                adaptor, "token r", r);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 742:41: -> ^( RAW[$r] $r)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:742:44: ^( RAW[$r] $r)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(RAW, r),
                    root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 102, literal_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "literal"

  public static class intLiteral_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "intLiteral"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:745:1: intLiteral : (h= HEX_LIT -> ^( INT[$h] $h) | o= OCT_LIT -> ^( INT[$o] $o) | d= DEC_LIT -> ^( INT[$d] $d) | b= BIN_LIT -> ^( INT[$b] $b) );
  public final AntlrPilarParser.intLiteral_return intLiteral()
      throws RecognitionException {
    AntlrPilarParser.intLiteral_return retval = new AntlrPilarParser.intLiteral_return();
    retval.start = input.LT(1);
    int intLiteral_StartIndex = input.index();
    Object root_0 = null;

    Token h = null;
    Token o = null;
    Token d = null;
    Token b = null;

    Object h_tree = null;
    Object o_tree = null;
    Object d_tree = null;
    Object b_tree = null;
    RewriteRuleTokenStream stream_HEX_LIT = new RewriteRuleTokenStream(adaptor,
        "token HEX_LIT");
    RewriteRuleTokenStream stream_DEC_LIT = new RewriteRuleTokenStream(adaptor,
        "token DEC_LIT");
    RewriteRuleTokenStream stream_OCT_LIT = new RewriteRuleTokenStream(adaptor,
        "token OCT_LIT");
    RewriteRuleTokenStream stream_BIN_LIT = new RewriteRuleTokenStream(adaptor,
        "token BIN_LIT");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 103)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:746:2: (h= HEX_LIT -> ^( INT[$h] $h) | o= OCT_LIT -> ^( INT[$o] $o) | d= DEC_LIT -> ^( INT[$d] $d) | b= BIN_LIT -> ^( INT[$b] $b) )
      int alt117 = 4;
      switch (input.LA(1)) {
        case HEX_LIT: {
          alt117 = 1;
        }
          break;
        case OCT_LIT: {
          alt117 = 2;
        }
          break;
        case DEC_LIT: {
          alt117 = 3;
        }
          break;
        case BIN_LIT: {
          alt117 = 4;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 117, 0,
              input);

          throw nvae;
      }

      switch (alt117) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:746:4: h= HEX_LIT
        {
          h = (Token) match(input, HEX_LIT, FOLLOW_HEX_LIT_in_intLiteral8149);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_HEX_LIT.add(h);

          // AST REWRITE
          // elements: h
          // token labels: h
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_h = new RewriteRuleTokenStream(
                adaptor, "token h", h);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 746:41: -> ^( INT[$h] $h)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:746:44: ^( INT[$h] $h)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(INT, h),
                    root_1);

                adaptor.addChild(root_1, stream_h.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:747:4: o= OCT_LIT
        {
          o = (Token) match(input, OCT_LIT, FOLLOW_OCT_LIT_in_intLiteral8194);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_OCT_LIT.add(o);

          // AST REWRITE
          // elements: o
          // token labels: o
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_o = new RewriteRuleTokenStream(
                adaptor, "token o", o);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 747:41: -> ^( INT[$o] $o)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:747:44: ^( INT[$o] $o)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(INT, o),
                    root_1);

                adaptor.addChild(root_1, stream_o.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:748:4: d= DEC_LIT
        {
          d = (Token) match(input, DEC_LIT, FOLLOW_DEC_LIT_in_intLiteral8238);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_DEC_LIT.add(d);

          // AST REWRITE
          // elements: d
          // token labels: d
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d = new RewriteRuleTokenStream(
                adaptor, "token d", d);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 748:41: -> ^( INT[$d] $d)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:748:44: ^( INT[$d] $d)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(INT, d),
                    root_1);

                adaptor.addChild(root_1, stream_d.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:749:4: b= BIN_LIT
        {
          b = (Token) match(input, BIN_LIT, FOLLOW_BIN_LIT_in_intLiteral8282);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_BIN_LIT.add(b);

          // AST REWRITE
          // elements: b
          // token labels: b
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b = new RewriteRuleTokenStream(
                adaptor, "token b", b);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 749:41: -> ^( INT[$b] $b)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:749:44: ^( INT[$b] $b)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(INT, b),
                    root_1);

                adaptor.addChild(root_1, stream_b.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 103, intLiteral_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "intLiteral"

  public static class realLiteral_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "realLiteral"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:752:1: realLiteral : (f= FLOAT_LIT -> ^( FLOAT[$f] $f) | r= RATIONAL_LIT -> ^( RATIONAL[$r] $r) );
  public final AntlrPilarParser.realLiteral_return realLiteral()
      throws RecognitionException {
    AntlrPilarParser.realLiteral_return retval = new AntlrPilarParser.realLiteral_return();
    retval.start = input.LT(1);
    int realLiteral_StartIndex = input.index();
    Object root_0 = null;

    Token f = null;
    Token r = null;

    Object f_tree = null;
    Object r_tree = null;
    RewriteRuleTokenStream stream_FLOAT_LIT = new RewriteRuleTokenStream(
        adaptor, "token FLOAT_LIT");
    RewriteRuleTokenStream stream_RATIONAL_LIT = new RewriteRuleTokenStream(
        adaptor, "token RATIONAL_LIT");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 104)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:753:2: (f= FLOAT_LIT -> ^( FLOAT[$f] $f) | r= RATIONAL_LIT -> ^( RATIONAL[$r] $r) )
      int alt118 = 2;
      int LA118_0 = input.LA(1);

      if ((LA118_0 == FLOAT_LIT)) {
        alt118 = 1;
      } else if ((LA118_0 == RATIONAL_LIT)) {
        alt118 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 118, 0, input);

        throw nvae;
      }
      switch (alt118) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:753:4: f= FLOAT_LIT
        {
          f = (Token) match(
              input,
              FLOAT_LIT,
              FOLLOW_FLOAT_LIT_in_realLiteral8332);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_FLOAT_LIT.add(f);

          // AST REWRITE
          // elements: f
          // token labels: f
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f = new RewriteRuleTokenStream(
                adaptor, "token f", f);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 753:41: -> ^( FLOAT[$f] $f)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:753:44: ^( FLOAT[$f] $f)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(FLOAT, f),
                    root_1);

                adaptor.addChild(root_1, stream_f.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:754:4: r= RATIONAL_LIT
        {
          r = (Token) match(
              input,
              RATIONAL_LIT,
              FOLLOW_RATIONAL_LIT_in_realLiteral8374);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_RATIONAL_LIT.add(r);

          // AST REWRITE
          // elements: r
          // token labels: r
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_r = new RewriteRuleTokenStream(
                adaptor, "token r", r);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 754:41: -> ^( RATIONAL[$r] $r)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:754:44: ^( RATIONAL[$r] $r)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(RATIONAL, r),
                    root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 104, realLiteral_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "realLiteral"

  public static class tuple_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "tuple"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:757:1: tuple : t= '(' ( annotatedExp ( ',' annotatedExp )* )? ')' -> ^( TUPLE[$t] ^( LIST ( annotatedExp )* ) ) ;
  public final AntlrPilarParser.tuple_return tuple()
      throws RecognitionException {
    AntlrPilarParser.tuple_return retval = new AntlrPilarParser.tuple_return();
    retval.start = input.LT(1);
    int tuple_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal374 = null;
    Token char_literal376 = null;
    AntlrPilarParser.annotatedExp_return annotatedExp373 = null;

    AntlrPilarParser.annotatedExp_return annotatedExp375 = null;

    Object t_tree = null;
    Object char_literal374_tree = null;
    Object char_literal376_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_annotatedExp = new RewriteRuleSubtreeStream(
        adaptor, "rule annotatedExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 105)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:758:2: (t= '(' ( annotatedExp ( ',' annotatedExp )* )? ')' -> ^( TUPLE[$t] ^( LIST ( annotatedExp )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:758:4: t= '(' ( annotatedExp ( ',' annotatedExp )* )? ')'
      {
        t = (Token) match(input, 167, FOLLOW_167_in_tuple8420);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_167.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:758:10: ( annotatedExp ( ',' annotatedExp )* )?
        int alt120 = 2;
        int LA120_0 = input.LA(1);

        if (((LA120_0 >= HEX_LIT && LA120_0 <= OCT_LIT) || LA120_0 == ID
            || LA120_0 == GLOBALID
            || (LA120_0 >= ADD_OP && LA120_0 <= RATIONAL_LIT) || LA120_0 == 167
            || LA120_0 == 175 || LA120_0 == 202 || LA120_0 == 206
            || LA120_0 == 213 || (LA120_0 >= 215 && LA120_0 <= 219) || LA120_0 == 221)) {
          alt120 = 1;
        }
        switch (alt120) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:758:12: annotatedExp ( ',' annotatedExp )*
          {
            pushFollow(FOLLOW_annotatedExp_in_tuple8424);
            annotatedExp373 = annotatedExp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_annotatedExp.add(annotatedExp373.getTree());
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:759:8: ( ',' annotatedExp )*
            loop119: do {
              int alt119 = 2;
              int LA119_0 = input.LA(1);

              if ((LA119_0 == 170)) {
                alt119 = 1;
              }

              switch (alt119) {
                case 1:
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:759:10: ',' annotatedExp
                {
                  char_literal374 = (Token) match(
                      input,
                      170,
                      FOLLOW_170_in_tuple8435);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_170.add(char_literal374);

                  pushFollow(FOLLOW_annotatedExp_in_tuple8437);
                  annotatedExp375 = annotatedExp();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_annotatedExp.add(annotatedExp375.getTree());

                }
                  break;

                default:
                  break loop119;
              }
            } while (true);

          }
            break;

        }

        char_literal376 = (Token) match(input, 168, FOLLOW_168_in_tuple8445);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_168.add(char_literal376);

        // AST REWRITE
        // elements: annotatedExp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 759:41: -> ^( TUPLE[$t] ^( LIST ( annotatedExp )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:759:44: ^( TUPLE[$t] ^( LIST ( annotatedExp )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TUPLE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:759:56: ^( LIST ( annotatedExp )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:759:63: ( annotatedExp )*
                while (stream_annotatedExp.hasNext()) {
                  adaptor.addChild(root_2, stream_annotatedExp.nextTree());

                }
                stream_annotatedExp.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 105, tuple_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "tuple"

  public static class annotatedExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotatedExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:762:1: annotatedExp : exp annotationList -> ^( ANN_EXP exp annotationList ) ;
  public final AntlrPilarParser.annotatedExp_return annotatedExp()
      throws RecognitionException {
    AntlrPilarParser.annotatedExp_return retval = new AntlrPilarParser.annotatedExp_return();
    retval.start = input.LT(1);
    int annotatedExp_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.exp_return exp377 = null;

    AntlrPilarParser.annotationList_return annotationList378 = null;

    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 106)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:763:2: ( exp annotationList -> ^( ANN_EXP exp annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:763:4: exp annotationList
      {
        pushFollow(FOLLOW_exp_in_annotatedExp8476);
        exp377 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp377.getTree());
        pushFollow(FOLLOW_annotationList_in_annotatedExp8478);
        annotationList378 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList378.getTree());

        // AST REWRITE
        // elements: annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 763:41: -> ^( ANN_EXP exp annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:763:44: ^( ANN_EXP exp annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ANN_EXP, "ANN_EXP"),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 106, annotatedExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotatedExp"

  public static class newExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:766:1: newExp : t= 'new' baseType ( newMultiArrayTypeFragment )* ( typeFragment )* -> ^( NEW_EXP[$t] baseType ^( LIST ( newMultiArrayTypeFragment )* ) ^( LIST ( typeFragment )* ) ) ;
  public final AntlrPilarParser.newExp_return newExp()
      throws RecognitionException {
    AntlrPilarParser.newExp_return retval = new AntlrPilarParser.newExp_return();
    retval.start = input.LT(1);
    int newExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.baseType_return baseType379 = null;

    AntlrPilarParser.newMultiArrayTypeFragment_return newMultiArrayTypeFragment380 = null;

    AntlrPilarParser.typeFragment_return typeFragment381 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_219 = new RewriteRuleTokenStream(adaptor,
        "token 219");
    RewriteRuleSubtreeStream stream_newMultiArrayTypeFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule newMultiArrayTypeFragment");
    RewriteRuleSubtreeStream stream_baseType = new RewriteRuleSubtreeStream(
        adaptor, "rule baseType");
    RewriteRuleSubtreeStream stream_typeFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule typeFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 107)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:767:2: (t= 'new' baseType ( newMultiArrayTypeFragment )* ( typeFragment )* -> ^( NEW_EXP[$t] baseType ^( LIST ( newMultiArrayTypeFragment )* ) ^( LIST ( typeFragment )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:767:4: t= 'new' baseType ( newMultiArrayTypeFragment )* ( typeFragment )*
      {
        t = (Token) match(input, 219, FOLLOW_219_in_newExp8519);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_219.add(t);

        pushFollow(FOLLOW_baseType_in_newExp8521);
        baseType379 = baseType();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_baseType.add(baseType379.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:768:4: ( newMultiArrayTypeFragment )*
        loop121: do {
          int alt121 = 2;
          alt121 = dfa121.predict(input);
          switch (alt121) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: newMultiArrayTypeFragment
            {
              pushFollow(FOLLOW_newMultiArrayTypeFragment_in_newExp8526);
              newMultiArrayTypeFragment380 = newMultiArrayTypeFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_newMultiArrayTypeFragment
                    .add(newMultiArrayTypeFragment380.getTree());

            }
              break;

            default:
              break loop121;
          }
        } while (true);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:4: ( typeFragment )*
        loop122: do {
          int alt122 = 2;
          alt122 = dfa122.predict(input);
          switch (alt122) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeFragment
            {
              pushFollow(FOLLOW_typeFragment_in_newExp8532);
              typeFragment381 = typeFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeFragment.add(typeFragment381.getTree());

            }
              break;

            default:
              break loop122;
          }
        } while (true);

        // AST REWRITE
        // elements: typeFragment, newMultiArrayTypeFragment, baseType
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 769:41: -> ^( NEW_EXP[$t] baseType ^( LIST ( newMultiArrayTypeFragment )* ) ^( LIST ( typeFragment )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:44: ^( NEW_EXP[$t] baseType ^( LIST ( newMultiArrayTypeFragment )* ) ^( LIST ( typeFragment )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NEW_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_baseType.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:67: ^( LIST ( newMultiArrayTypeFragment )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:74: ( newMultiArrayTypeFragment )*
                while (stream_newMultiArrayTypeFragment.hasNext()) {
                  adaptor.addChild(
                      root_2,
                      stream_newMultiArrayTypeFragment.nextTree());

                }
                stream_newMultiArrayTypeFragment.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:102: ^( LIST ( typeFragment )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:109: ( typeFragment )*
                while (stream_typeFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_typeFragment.nextTree());

                }
                stream_typeFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 107, newExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newExp"

  public static class newMultiArrayTypeFragment_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newMultiArrayTypeFragment"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:772:1: newMultiArrayTypeFragment : t= '[' exp ( ',' exp )* ']' -> ^( NEW_MULTI_ARRAY_FRAGMENT[$t] ^( LIST ( exp )+ ) ) ;
  public final AntlrPilarParser.newMultiArrayTypeFragment_return newMultiArrayTypeFragment()
      throws RecognitionException {
    AntlrPilarParser.newMultiArrayTypeFragment_return retval = new AntlrPilarParser.newMultiArrayTypeFragment_return();
    retval.start = input.LT(1);
    int newMultiArrayTypeFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal383 = null;
    Token char_literal385 = null;
    AntlrPilarParser.exp_return exp382 = null;

    AntlrPilarParser.exp_return exp384 = null;

    Object t_tree = null;
    Object char_literal383_tree = null;
    Object char_literal385_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 108)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:773:2: (t= '[' exp ( ',' exp )* ']' -> ^( NEW_MULTI_ARRAY_FRAGMENT[$t] ^( LIST ( exp )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:773:4: t= '[' exp ( ',' exp )* ']'
      {
        t = (Token) match(
            input,
            200,
            FOLLOW_200_in_newMultiArrayTypeFragment8596);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_200.add(t);

        pushFollow(FOLLOW_exp_in_newMultiArrayTypeFragment8598);
        exp382 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp382.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:773:14: ( ',' exp )*
        loop123: do {
          int alt123 = 2;
          int LA123_0 = input.LA(1);

          if ((LA123_0 == 170)) {
            alt123 = 1;
          }

          switch (alt123) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:773:16: ',' exp
            {
              char_literal383 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_newMultiArrayTypeFragment8602);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal383);

              pushFollow(FOLLOW_exp_in_newMultiArrayTypeFragment8604);
              exp384 = exp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_exp.add(exp384.getTree());

            }
              break;

            default:
              break loop123;
          }
        } while (true);

        char_literal385 = (Token) match(
            input,
            201,
            FOLLOW_201_in_newMultiArrayTypeFragment8609);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_201.add(char_literal385);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 773:41: -> ^( NEW_MULTI_ARRAY_FRAGMENT[$t] ^( LIST ( exp )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:773:44: ^( NEW_MULTI_ARRAY_FRAGMENT[$t] ^( LIST ( exp )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NEW_MULTI_ARRAY_FRAGMENT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:773:75: ^( LIST ( exp )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_exp.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_exp.hasNext()) {
                  adaptor.addChild(root_2, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 108, newMultiArrayTypeFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newMultiArrayTypeFragment"

  public static class newListRanged_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newListRanged"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:776:1: newListRanged : t= '`' '[' exp '..' exp ']' -> ^( NLIST_RANGE[$t] ( exp )+ ) ;
  public final AntlrPilarParser.newListRanged_return newListRanged()
      throws RecognitionException {
    AntlrPilarParser.newListRanged_return retval = new AntlrPilarParser.newListRanged_return();
    retval.start = input.LT(1);
    int newListRanged_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal386 = null;
    Token string_literal388 = null;
    Token char_literal390 = null;
    AntlrPilarParser.exp_return exp387 = null;

    AntlrPilarParser.exp_return exp389 = null;

    Object t_tree = null;
    Object char_literal386_tree = null;
    Object string_literal388_tree = null;
    Object char_literal390_tree = null;
    RewriteRuleTokenStream stream_210 = new RewriteRuleTokenStream(adaptor,
        "token 210");
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 109)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:777:2: (t= '`' '[' exp '..' exp ']' -> ^( NLIST_RANGE[$t] ( exp )+ ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:777:4: t= '`' '[' exp '..' exp ']'
      {
        t = (Token) match(input, 215, FOLLOW_215_in_newListRanged8646);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_215.add(t);

        char_literal386 = (Token) match(
            input,
            200,
            FOLLOW_200_in_newListRanged8648);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_200.add(char_literal386);

        pushFollow(FOLLOW_exp_in_newListRanged8650);
        exp387 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp387.getTree());
        string_literal388 = (Token) match(
            input,
            210,
            FOLLOW_210_in_newListRanged8652);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_210.add(string_literal388);

        pushFollow(FOLLOW_exp_in_newListRanged8654);
        exp389 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp389.getTree());
        char_literal390 = (Token) match(
            input,
            201,
            FOLLOW_201_in_newListRanged8656);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_201.add(char_literal390);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 777:41: -> ^( NLIST_RANGE[$t] ( exp )+ )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:777:44: ^( NLIST_RANGE[$t] ( exp )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NLIST_RANGE, t),
                  root_1);

              if (!(stream_exp.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_exp.hasNext()) {
                adaptor.addChild(root_1, stream_exp.nextTree());

              }
              stream_exp.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 109, newListRanged_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newListRanged"

  public static class newMultiArray_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newMultiArray"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:780:1: newMultiArray : t= '`' '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* )? ']' -> ^( NMULTI_ARRAY[$t] ^( LIST ( newMultiArrayFragment )* ) ) ;
  public final AntlrPilarParser.newMultiArray_return newMultiArray()
      throws RecognitionException {
    AntlrPilarParser.newMultiArray_return retval = new AntlrPilarParser.newMultiArray_return();
    retval.start = input.LT(1);
    int newMultiArray_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal391 = null;
    Token char_literal393 = null;
    Token char_literal395 = null;
    AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment392 = null;

    AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment394 = null;

    Object t_tree = null;
    Object char_literal391_tree = null;
    Object char_literal393_tree = null;
    Object char_literal395_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleSubtreeStream stream_newMultiArrayFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule newMultiArrayFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 110)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:781:2: (t= '`' '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* )? ']' -> ^( NMULTI_ARRAY[$t] ^( LIST ( newMultiArrayFragment )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:781:4: t= '`' '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* )? ']'
      {
        t = (Token) match(input, 215, FOLLOW_215_in_newMultiArray8689);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_215.add(t);

        char_literal391 = (Token) match(
            input,
            200,
            FOLLOW_200_in_newMultiArray8691);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_200.add(char_literal391);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:782:4: ( newMultiArrayFragment ( ',' newMultiArrayFragment )* )?
        int alt125 = 2;
        int LA125_0 = input.LA(1);

        if (((LA125_0 >= HEX_LIT && LA125_0 <= OCT_LIT) || LA125_0 == ID
            || LA125_0 == GLOBALID
            || (LA125_0 >= ADD_OP && LA125_0 <= RATIONAL_LIT) || LA125_0 == 167
            || LA125_0 == 175 || LA125_0 == 200 || LA125_0 == 202
            || LA125_0 == 206 || LA125_0 == 213
            || (LA125_0 >= 215 && LA125_0 <= 219) || LA125_0 == 221)) {
          alt125 = 1;
        }
        switch (alt125) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:782:6: newMultiArrayFragment ( ',' newMultiArrayFragment )*
          {
            pushFollow(FOLLOW_newMultiArrayFragment_in_newMultiArray8699);
            newMultiArrayFragment392 = newMultiArrayFragment();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_newMultiArrayFragment.add(newMultiArrayFragment392
                  .getTree());
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:783:6: ( ',' newMultiArrayFragment )*
            loop124: do {
              int alt124 = 2;
              int LA124_0 = input.LA(1);

              if ((LA124_0 == 170)) {
                alt124 = 1;
              }

              switch (alt124) {
                case 1:
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:783:8: ',' newMultiArrayFragment
                {
                  char_literal393 = (Token) match(
                      input,
                      170,
                      FOLLOW_170_in_newMultiArray8709);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_170.add(char_literal393);

                  pushFollow(FOLLOW_newMultiArrayFragment_in_newMultiArray8711);
                  newMultiArrayFragment394 = newMultiArrayFragment();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_newMultiArrayFragment.add(newMultiArrayFragment394
                        .getTree());

                }
                  break;

                default:
                  break loop124;
              }
            } while (true);

          }
            break;

        }

        char_literal395 = (Token) match(
            input,
            201,
            FOLLOW_201_in_newMultiArray8723);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_201.add(char_literal395);

        // AST REWRITE
        // elements: newMultiArrayFragment
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 784:41: -> ^( NMULTI_ARRAY[$t] ^( LIST ( newMultiArrayFragment )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:784:44: ^( NMULTI_ARRAY[$t] ^( LIST ( newMultiArrayFragment )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NMULTI_ARRAY, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:784:63: ^( LIST ( newMultiArrayFragment )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:784:70: ( newMultiArrayFragment )*
                while (stream_newMultiArrayFragment.hasNext()) {
                  adaptor.addChild(
                      root_2,
                      stream_newMultiArrayFragment.nextTree());

                }
                stream_newMultiArrayFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 110, newMultiArray_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newMultiArray"

  public static class newMultiArrayFragment_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newMultiArrayFragment"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:787:1: newMultiArrayFragment : (t= '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) ) )? ']' | exp );
  public final AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment()
      throws RecognitionException {
    AntlrPilarParser.newMultiArrayFragment_return retval = new AntlrPilarParser.newMultiArrayFragment_return();
    retval.start = input.LT(1);
    int newMultiArrayFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal397 = null;
    Token char_literal399 = null;
    AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment396 = null;

    AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment398 = null;

    AntlrPilarParser.exp_return exp400 = null;

    Object t_tree = null;
    Object char_literal397_tree = null;
    Object char_literal399_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleSubtreeStream stream_newMultiArrayFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule newMultiArrayFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 111)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:788:2: (t= '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) ) )? ']' | exp )
      int alt128 = 2;
      int LA128_0 = input.LA(1);

      if ((LA128_0 == 200)) {
        alt128 = 1;
      } else if (((LA128_0 >= HEX_LIT && LA128_0 <= OCT_LIT) || LA128_0 == ID
          || LA128_0 == GLOBALID
          || (LA128_0 >= ADD_OP && LA128_0 <= RATIONAL_LIT) || LA128_0 == 167
          || LA128_0 == 175 || LA128_0 == 202 || LA128_0 == 206
          || LA128_0 == 213 || (LA128_0 >= 215 && LA128_0 <= 219) || LA128_0 == 221)) {
        alt128 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 128, 0, input);

        throw nvae;
      }
      switch (alt128) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:788:4: t= '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) ) )? ']'
        {
          t = (Token) match(input, 200, FOLLOW_200_in_newMultiArrayFragment8780);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_200.add(t);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:788:10: ( newMultiArrayFragment ( ',' newMultiArrayFragment )* -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) ) )?
          int alt127 = 2;
          int LA127_0 = input.LA(1);

          if (((LA127_0 >= HEX_LIT && LA127_0 <= OCT_LIT) || LA127_0 == ID
              || LA127_0 == GLOBALID
              || (LA127_0 >= ADD_OP && LA127_0 <= RATIONAL_LIT)
              || LA127_0 == 167 || LA127_0 == 175 || LA127_0 == 200
              || LA127_0 == 202 || LA127_0 == 206 || LA127_0 == 213
              || (LA127_0 >= 215 && LA127_0 <= 219) || LA127_0 == 221)) {
            alt127 = 1;
          }
          switch (alt127) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:788:12: newMultiArrayFragment ( ',' newMultiArrayFragment )*
            {
              pushFollow(FOLLOW_newMultiArrayFragment_in_newMultiArrayFragment8784);
              newMultiArrayFragment396 = newMultiArrayFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_newMultiArrayFragment.add(newMultiArrayFragment396
                    .getTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:789:10: ( ',' newMultiArrayFragment )*
              loop126: do {
                int alt126 = 2;
                int LA126_0 = input.LA(1);

                if ((LA126_0 == 170)) {
                  alt126 = 1;
                }

                switch (alt126) {
                  case 1:
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:789:12: ',' newMultiArrayFragment
                  {
                    char_literal397 = (Token) match(
                        input,
                        170,
                        FOLLOW_170_in_newMultiArrayFragment8798);
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_170.add(char_literal397);

                    pushFollow(FOLLOW_newMultiArrayFragment_in_newMultiArrayFragment8800);
                    newMultiArrayFragment398 = newMultiArrayFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_newMultiArrayFragment.add(newMultiArrayFragment398
                          .getTree());

                  }
                    break;

                  default:
                    break loop126;
                }
              } while (true);

              // AST REWRITE
              // elements: newMultiArrayFragment
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 789:41: -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) )
                {
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:789:44: ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(NMULTI_ARRAY_FRAGMENT, t),
                        root_1);

                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:789:72: ^( LIST ( newMultiArrayFragment )* )
                    {
                      Object root_2 = (Object) adaptor.nil();
                      root_2 = (Object) adaptor.becomeRoot(
                          (Object) adaptor.create(LIST, "LIST"),
                          root_2);

                      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:789:79: ( newMultiArrayFragment )*
                      while (stream_newMultiArrayFragment.hasNext()) {
                        adaptor.addChild(
                            root_2,
                            stream_newMultiArrayFragment.nextTree());

                      }
                      stream_newMultiArrayFragment.reset();

                      adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

          }

          char_literal399 = (Token) match(
              input,
              201,
              FOLLOW_201_in_newMultiArrayFragment8831);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_201.add(char_literal399);

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:791:4: exp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_exp_in_newMultiArrayFragment8836);
          exp400 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, exp400.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 111, newMultiArrayFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newMultiArrayFragment"

  public static class newList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newList"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:794:1: newList : t= '`' '[' ( exp ( ',' exp )* )? ']' -> ^( NLIST[$t] ^( LIST ( exp )* ) ) ;
  public final AntlrPilarParser.newList_return newList()
      throws RecognitionException {
    AntlrPilarParser.newList_return retval = new AntlrPilarParser.newList_return();
    retval.start = input.LT(1);
    int newList_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal401 = null;
    Token char_literal403 = null;
    Token char_literal405 = null;
    AntlrPilarParser.exp_return exp402 = null;

    AntlrPilarParser.exp_return exp404 = null;

    Object t_tree = null;
    Object char_literal401_tree = null;
    Object char_literal403_tree = null;
    Object char_literal405_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 112)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:2: (t= '`' '[' ( exp ( ',' exp )* )? ']' -> ^( NLIST[$t] ^( LIST ( exp )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:4: t= '`' '[' ( exp ( ',' exp )* )? ']'
      {
        t = (Token) match(input, 215, FOLLOW_215_in_newList8849);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_215.add(t);

        char_literal401 = (Token) match(input, 200, FOLLOW_200_in_newList8851);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_200.add(char_literal401);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:14: ( exp ( ',' exp )* )?
        int alt130 = 2;
        int LA130_0 = input.LA(1);

        if (((LA130_0 >= HEX_LIT && LA130_0 <= OCT_LIT) || LA130_0 == ID
            || LA130_0 == GLOBALID
            || (LA130_0 >= ADD_OP && LA130_0 <= RATIONAL_LIT) || LA130_0 == 167
            || LA130_0 == 175 || LA130_0 == 202 || LA130_0 == 206
            || LA130_0 == 213 || (LA130_0 >= 215 && LA130_0 <= 219) || LA130_0 == 221)) {
          alt130 = 1;
        }
        switch (alt130) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:16: exp ( ',' exp )*
          {
            pushFollow(FOLLOW_exp_in_newList8855);
            exp402 = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(exp402.getTree());
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:20: ( ',' exp )*
            loop129: do {
              int alt129 = 2;
              int LA129_0 = input.LA(1);

              if ((LA129_0 == 170)) {
                alt129 = 1;
              }

              switch (alt129) {
                case 1:
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:22: ',' exp
                {
                  char_literal403 = (Token) match(
                      input,
                      170,
                      FOLLOW_170_in_newList8859);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_170.add(char_literal403);

                  pushFollow(FOLLOW_exp_in_newList8861);
                  exp404 = exp();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_exp.add(exp404.getTree());

                }
                  break;

                default:
                  break loop129;
              }
            } while (true);

          }
            break;

        }

        char_literal405 = (Token) match(input, 201, FOLLOW_201_in_newList8869);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_201.add(char_literal405);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 795:41: -> ^( NLIST[$t] ^( LIST ( exp )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:44: ^( NLIST[$t] ^( LIST ( exp )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NLIST, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:56: ^( LIST ( exp )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:63: ( exp )*
                while (stream_exp.hasNext()) {
                  adaptor.addChild(root_2, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 112, newList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newList"

  public static class newSet_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newSet"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:798:1: newSet : t= '`' '{' ( exp ( ',' exp )* )? '}' -> ^( NSET[$t] ^( LIST ( exp )* ) ) ;
  public final AntlrPilarParser.newSet_return newSet()
      throws RecognitionException {
    AntlrPilarParser.newSet_return retval = new AntlrPilarParser.newSet_return();
    retval.start = input.LT(1);
    int newSet_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal406 = null;
    Token char_literal408 = null;
    Token char_literal410 = null;
    AntlrPilarParser.exp_return exp407 = null;

    AntlrPilarParser.exp_return exp409 = null;

    Object t_tree = null;
    Object char_literal406_tree = null;
    Object char_literal408_tree = null;
    Object char_literal410_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 113)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:2: (t= '`' '{' ( exp ( ',' exp )* )? '}' -> ^( NSET[$t] ^( LIST ( exp )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:4: t= '`' '{' ( exp ( ',' exp )* )? '}'
      {
        t = (Token) match(input, 215, FOLLOW_215_in_newSet8897);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_215.add(t);

        char_literal406 = (Token) match(input, 175, FOLLOW_175_in_newSet8899);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal406);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:14: ( exp ( ',' exp )* )?
        int alt132 = 2;
        int LA132_0 = input.LA(1);

        if (((LA132_0 >= HEX_LIT && LA132_0 <= OCT_LIT) || LA132_0 == ID
            || LA132_0 == GLOBALID
            || (LA132_0 >= ADD_OP && LA132_0 <= RATIONAL_LIT) || LA132_0 == 167
            || LA132_0 == 175 || LA132_0 == 202 || LA132_0 == 206
            || LA132_0 == 213 || (LA132_0 >= 215 && LA132_0 <= 219) || LA132_0 == 221)) {
          alt132 = 1;
        }
        switch (alt132) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:16: exp ( ',' exp )*
          {
            pushFollow(FOLLOW_exp_in_newSet8903);
            exp407 = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(exp407.getTree());
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:20: ( ',' exp )*
            loop131: do {
              int alt131 = 2;
              int LA131_0 = input.LA(1);

              if ((LA131_0 == 170)) {
                alt131 = 1;
              }

              switch (alt131) {
                case 1:
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:22: ',' exp
                {
                  char_literal408 = (Token) match(
                      input,
                      170,
                      FOLLOW_170_in_newSet8907);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_170.add(char_literal408);

                  pushFollow(FOLLOW_exp_in_newSet8909);
                  exp409 = exp();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_exp.add(exp409.getTree());

                }
                  break;

                default:
                  break loop131;
              }
            } while (true);

          }
            break;

        }

        char_literal410 = (Token) match(input, 176, FOLLOW_176_in_newSet8917);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal410);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 799:41: -> ^( NSET[$t] ^( LIST ( exp )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:44: ^( NSET[$t] ^( LIST ( exp )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NSET, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:55: ^( LIST ( exp )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:799:62: ( exp )*
                while (stream_exp.hasNext()) {
                  adaptor.addChild(root_2, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 113, newSet_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newSet"

  public static class newRecord_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newRecord"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:802:1: newRecord : t= '`' name ( typeTuple )? '{' ( attrInit ( ',' attrInit )* )? '}' -> ^( NRECORD[$t] ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) ) ^( LIST ( attrInit )* ) ) ;
  public final AntlrPilarParser.newRecord_return newRecord()
      throws RecognitionException {
    AntlrPilarParser.newRecord_return retval = new AntlrPilarParser.newRecord_return();
    retval.start = input.LT(1);
    int newRecord_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal413 = null;
    Token char_literal415 = null;
    Token char_literal417 = null;
    AntlrPilarParser.name_return name411 = null;

    AntlrPilarParser.typeTuple_return typeTuple412 = null;

    AntlrPilarParser.attrInit_return attrInit414 = null;

    AntlrPilarParser.attrInit_return attrInit416 = null;

    Object t_tree = null;
    Object char_literal413_tree = null;
    Object char_literal415_tree = null;
    Object char_literal417_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_typeTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeTuple");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_attrInit = new RewriteRuleSubtreeStream(
        adaptor, "rule attrInit");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 114)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:803:2: (t= '`' name ( typeTuple )? '{' ( attrInit ( ',' attrInit )* )? '}' -> ^( NRECORD[$t] ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) ) ^( LIST ( attrInit )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:803:4: t= '`' name ( typeTuple )? '{' ( attrInit ( ',' attrInit )* )? '}'
      {
        t = (Token) match(input, 215, FOLLOW_215_in_newRecord8945);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_215.add(t);

        pushFollow(FOLLOW_name_in_newRecord8947);
        name411 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name411.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:803:15: ( typeTuple )?
        int alt133 = 2;
        int LA133_0 = input.LA(1);

        if ((LA133_0 == 165)) {
          alt133 = 1;
        }
        switch (alt133) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeTuple
          {
            pushFollow(FOLLOW_typeTuple_in_newRecord8949);
            typeTuple412 = typeTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeTuple.add(typeTuple412.getTree());

          }
            break;

        }

        char_literal413 = (Token) match(input, 175, FOLLOW_175_in_newRecord8955);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal413);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:804:8: ( attrInit ( ',' attrInit )* )?
        int alt135 = 2;
        int LA135_0 = input.LA(1);

        if ((LA135_0 == ID)) {
          alt135 = 1;
        }
        switch (alt135) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:804:10: attrInit ( ',' attrInit )*
          {
            pushFollow(FOLLOW_attrInit_in_newRecord8959);
            attrInit414 = attrInit();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_attrInit.add(attrInit414.getTree());
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:804:19: ( ',' attrInit )*
            loop134: do {
              int alt134 = 2;
              int LA134_0 = input.LA(1);

              if ((LA134_0 == 170)) {
                alt134 = 1;
              }

              switch (alt134) {
                case 1:
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:804:21: ',' attrInit
                {
                  char_literal415 = (Token) match(
                      input,
                      170,
                      FOLLOW_170_in_newRecord8963);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_170.add(char_literal415);

                  pushFollow(FOLLOW_attrInit_in_newRecord8965);
                  attrInit416 = attrInit();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_attrInit.add(attrInit416.getTree());

                }
                  break;

                default:
                  break loop134;
              }
            } while (true);

          }
            break;

        }

        char_literal417 = (Token) match(input, 176, FOLLOW_176_in_newRecord8976);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal417);

        // AST REWRITE
        // elements: name, attrInit, typeTuple
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 805:41: -> ^( NRECORD[$t] ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) ) ^( LIST ( attrInit )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:44: ^( NRECORD[$t] ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) ) ^( LIST ( attrInit )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NRECORD, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:58: ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NAME_TYPE, "NAME_TYPE"),
                    root_2);

                adaptor.addChild(root_2, stream_name.nextTree());
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:75: ^( OPTION )
                {
                  Object root_3 = (Object) adaptor.nil();
                  root_3 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_3);

                  adaptor.addChild(root_2, root_3);
                }
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:85: ^( OPTION ( typeTuple )? )
                {
                  Object root_3 = (Object) adaptor.nil();
                  root_3 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_3);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:94: ( typeTuple )?
                  if (stream_typeTuple.hasNext()) {
                    adaptor.addChild(root_3, stream_typeTuple.nextTree());

                  }
                  stream_typeTuple.reset();

                  adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:107: ^( LIST ( attrInit )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:114: ( attrInit )*
                while (stream_attrInit.hasNext()) {
                  adaptor.addChild(root_2, stream_attrInit.nextTree());

                }
                stream_attrInit.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 114, newRecord_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newRecord"

  public static class attrInit_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "attrInit"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:808:1: attrInit : t= ID '=' exp -> ^( ATTR_INIT[$t] ID exp ) ;
  public final AntlrPilarParser.attrInit_return attrInit()
      throws RecognitionException {
    AntlrPilarParser.attrInit_return retval = new AntlrPilarParser.attrInit_return();
    retval.start = input.LT(1);
    int attrInit_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal418 = null;
    AntlrPilarParser.exp_return exp419 = null;

    Object t_tree = null;
    Object char_literal418_tree = null;
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 115)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:809:2: (t= ID '=' exp -> ^( ATTR_INIT[$t] ID exp ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:809:4: t= ID '=' exp
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_attrInit9053);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        char_literal418 = (Token) match(input, 171, FOLLOW_171_in_attrInit9055);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_171.add(char_literal418);

        pushFollow(FOLLOW_exp_in_attrInit9057);
        exp419 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp419.getTree());

        // AST REWRITE
        // elements: exp, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 809:41: -> ^( ATTR_INIT[$t] ID exp )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:809:44: ^( ATTR_INIT[$t] ID exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ATTR_INIT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 115, attrInit_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "attrInit"

  public static class newFunction_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newFunction"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:812:1: newFunction : t= '`' '{' ( '->' -> ^( NFUNCTION[$t] ^( OPTION ) ) | mapping ( ',' mapping )* -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) ) ) '}' ;
  public final AntlrPilarParser.newFunction_return newFunction()
      throws RecognitionException {
    AntlrPilarParser.newFunction_return retval = new AntlrPilarParser.newFunction_return();
    retval.start = input.LT(1);
    int newFunction_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal420 = null;
    Token string_literal421 = null;
    Token char_literal423 = null;
    Token char_literal425 = null;
    AntlrPilarParser.mapping_return mapping422 = null;

    AntlrPilarParser.mapping_return mapping424 = null;

    Object t_tree = null;
    Object char_literal420_tree = null;
    Object string_literal421_tree = null;
    Object char_literal423_tree = null;
    Object char_literal425_tree = null;
    RewriteRuleTokenStream stream_220 = new RewriteRuleTokenStream(adaptor,
        "token 220");
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_mapping = new RewriteRuleSubtreeStream(
        adaptor, "rule mapping");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 116)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:813:2: (t= '`' '{' ( '->' -> ^( NFUNCTION[$t] ^( OPTION ) ) | mapping ( ',' mapping )* -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) ) ) '}' )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:813:4: t= '`' '{' ( '->' -> ^( NFUNCTION[$t] ^( OPTION ) ) | mapping ( ',' mapping )* -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) ) ) '}'
      {
        t = (Token) match(input, 215, FOLLOW_215_in_newFunction9105);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_215.add(t);

        char_literal420 = (Token) match(
            input,
            175,
            FOLLOW_175_in_newFunction9107);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal420);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:813:14: ( '->' -> ^( NFUNCTION[$t] ^( OPTION ) ) | mapping ( ',' mapping )* -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) ) )
        int alt137 = 2;
        int LA137_0 = input.LA(1);

        if ((LA137_0 == 220)) {
          alt137 = 1;
        } else if (((LA137_0 >= HEX_LIT && LA137_0 <= OCT_LIT) || LA137_0 == ID
            || LA137_0 == GLOBALID
            || (LA137_0 >= ADD_OP && LA137_0 <= RATIONAL_LIT) || LA137_0 == 167
            || LA137_0 == 175 || LA137_0 == 202 || LA137_0 == 206
            || LA137_0 == 213 || (LA137_0 >= 215 && LA137_0 <= 219) || LA137_0 == 221)) {
          alt137 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 137, 0,
              input);

          throw nvae;
        }
        switch (alt137) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:813:16: '->'
          {
            string_literal421 = (Token) match(
                input,
                220,
                FOLLOW_220_in_newFunction9111);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_220.add(string_literal421);

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (Object) adaptor.nil();
              // 813:41: -> ^( NFUNCTION[$t] ^( OPTION ) )
              {
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:813:44: ^( NFUNCTION[$t] ^( OPTION ) )
                {
                  Object root_1 = (Object) adaptor.nil();
                  root_1 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(NFUNCTION, t),
                      root_1);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:813:60: ^( OPTION )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(OPTION, "OPTION"),
                        root_2);

                    adaptor.addChild(root_1, root_2);
                  }

                  adaptor.addChild(root_0, root_1);
                }

              }

              retval.tree = root_0;
            }
          }
            break;
          case 2:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:814:10: mapping ( ',' mapping )*
          {
            pushFollow(FOLLOW_mapping_in_newFunction9153);
            mapping422 = mapping();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_mapping.add(mapping422.getTree());
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:814:18: ( ',' mapping )*
            loop136: do {
              int alt136 = 2;
              int LA136_0 = input.LA(1);

              if ((LA136_0 == 170)) {
                alt136 = 1;
              }

              switch (alt136) {
                case 1:
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:814:20: ',' mapping
                {
                  char_literal423 = (Token) match(
                      input,
                      170,
                      FOLLOW_170_in_newFunction9157);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_170.add(char_literal423);

                  pushFollow(FOLLOW_mapping_in_newFunction9159);
                  mapping424 = mapping();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_mapping.add(mapping424.getTree());

                }
                  break;

                default:
                  break loop136;
              }
            } while (true);

            // AST REWRITE
            // elements: mapping
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (Object) adaptor.nil();
              // 814:41: -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) )
              {
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:814:44: ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) )
                {
                  Object root_1 = (Object) adaptor.nil();
                  root_1 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(NFUNCTION, t),
                      root_1);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:814:60: ^( OPTION ^( LIST ( mapping )+ ) )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(OPTION, "OPTION"),
                        root_2);

                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:814:69: ^( LIST ( mapping )+ )
                    {
                      Object root_3 = (Object) adaptor.nil();
                      root_3 = (Object) adaptor.becomeRoot(
                          (Object) adaptor.create(LIST, "LIST"),
                          root_3);

                      if (!(stream_mapping.hasNext())) {
                        throw new RewriteEarlyExitException();
                      }
                      while (stream_mapping.hasNext()) {
                        adaptor.addChild(root_3, stream_mapping.nextTree());

                      }
                      stream_mapping.reset();

                      adaptor.addChild(root_2, root_3);
                    }

                    adaptor.addChild(root_1, root_2);
                  }

                  adaptor.addChild(root_0, root_1);
                }

              }

              retval.tree = root_0;
            }
          }
            break;

        }

        char_literal425 = (Token) match(
            input,
            176,
            FOLLOW_176_in_newFunction9197);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal425);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 116, newFunction_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newFunction"

  public static class mapping_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "mapping"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:818:1: mapping : e1= exp '->' e2= exp -> ^( MAPPING $e1 $e2) ;
  public final AntlrPilarParser.mapping_return mapping()
      throws RecognitionException {
    AntlrPilarParser.mapping_return retval = new AntlrPilarParser.mapping_return();
    retval.start = input.LT(1);
    int mapping_StartIndex = input.index();
    Object root_0 = null;

    Token string_literal426 = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    Object string_literal426_tree = null;
    RewriteRuleTokenStream stream_220 = new RewriteRuleTokenStream(adaptor,
        "token 220");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 117)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:2: (e1= exp '->' e2= exp -> ^( MAPPING $e1 $e2) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:4: e1= exp '->' e2= exp
      {
        pushFollow(FOLLOW_exp_in_mapping9210);
        e1 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e1.getTree());
        string_literal426 = (Token) match(input, 220, FOLLOW_220_in_mapping9212);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_220.add(string_literal426);

        pushFollow(FOLLOW_exp_in_mapping9216);
        e2 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e2.getTree());

        // AST REWRITE
        // elements: e1, e2
        // token labels: 
        // rule labels: retval, e1, e2
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
              adaptor, "rule e1", e1 != null ? e1.tree : null);
          RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
              adaptor, "rule e2", e2 != null ? e2.tree : null);

          root_0 = (Object) adaptor.nil();
          // 819:41: -> ^( MAPPING $e1 $e2)
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:44: ^( MAPPING $e1 $e2)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(MAPPING, "MAPPING"),
                  root_1);

              adaptor.addChild(root_1, stream_e1.nextTree());
              adaptor.addChild(root_1, stream_e2.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 117, mapping_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "mapping"

  public static class funExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "funExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:822:1: funExp : t= '{' matching ( '|' matching )* '}' -> ^( FUN_EXP[$t] ^( LIST ( matching )+ ) ) ;
  public final AntlrPilarParser.funExp_return funExp()
      throws RecognitionException {
    AntlrPilarParser.funExp_return retval = new AntlrPilarParser.funExp_return();
    retval.start = input.LT(1);
    int funExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal428 = null;
    Token char_literal430 = null;
    AntlrPilarParser.matching_return matching427 = null;

    AntlrPilarParser.matching_return matching429 = null;

    Object t_tree = null;
    Object char_literal428_tree = null;
    Object char_literal430_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleTokenStream stream_192 = new RewriteRuleTokenStream(adaptor,
        "token 192");
    RewriteRuleSubtreeStream stream_matching = new RewriteRuleSubtreeStream(
        adaptor, "rule matching");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 118)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:823:2: (t= '{' matching ( '|' matching )* '}' -> ^( FUN_EXP[$t] ^( LIST ( matching )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:823:4: t= '{' matching ( '|' matching )* '}'
      {
        t = (Token) match(input, 175, FOLLOW_175_in_funExp9260);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(t);

        pushFollow(FOLLOW_matching_in_funExp9262);
        matching427 = matching();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_matching.add(matching427.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:824:8: ( '|' matching )*
        loop138: do {
          int alt138 = 2;
          int LA138_0 = input.LA(1);

          if ((LA138_0 == 192)) {
            alt138 = 1;
          }

          switch (alt138) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:824:10: '|' matching
            {
              char_literal428 = (Token) match(
                  input,
                  192,
                  FOLLOW_192_in_funExp9273);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_192.add(char_literal428);

              pushFollow(FOLLOW_matching_in_funExp9275);
              matching429 = matching();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_matching.add(matching429.getTree());

            }
              break;

            default:
              break loop138;
          }
        } while (true);

        char_literal430 = (Token) match(input, 176, FOLLOW_176_in_funExp9280);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal430);

        // AST REWRITE
        // elements: matching
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 824:41: -> ^( FUN_EXP[$t] ^( LIST ( matching )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:824:44: ^( FUN_EXP[$t] ^( LIST ( matching )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(FUN_EXP, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:824:58: ^( LIST ( matching )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_matching.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_matching.hasNext()) {
                  adaptor.addChild(root_2, stream_matching.nextTree());

                }
                stream_matching.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 118, funExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "funExp"

  public static class matching_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "matching"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:827:1: matching : (t= '=>' exp -> ^( MATCHING[$t] ^( OPTION ) exp ) | paramList '=>' exp -> ^( MATCHING ^( OPTION ^( LIST paramList ) ) exp ) );
  public final AntlrPilarParser.matching_return matching()
      throws RecognitionException {
    AntlrPilarParser.matching_return retval = new AntlrPilarParser.matching_return();
    retval.start = input.LT(1);
    int matching_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal433 = null;
    AntlrPilarParser.exp_return exp431 = null;

    AntlrPilarParser.paramList_return paramList432 = null;

    AntlrPilarParser.exp_return exp434 = null;

    Object t_tree = null;
    Object string_literal433_tree = null;
    RewriteRuleTokenStream stream_208 = new RewriteRuleTokenStream(adaptor,
        "token 208");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_paramList = new RewriteRuleSubtreeStream(
        adaptor, "rule paramList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 119)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:828:2: (t= '=>' exp -> ^( MATCHING[$t] ^( OPTION ) exp ) | paramList '=>' exp -> ^( MATCHING ^( OPTION ^( LIST paramList ) ) exp ) )
      int alt139 = 2;
      int LA139_0 = input.LA(1);

      if ((LA139_0 == 208)) {
        alt139 = 1;
      } else if (((LA139_0 >= ID && LA139_0 <= TYPEVARID) || LA139_0 == 167 || LA139_0 == 175)) {
        alt139 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 139, 0, input);

        throw nvae;
      }
      switch (alt139) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:828:4: t= '=>' exp
        {
          t = (Token) match(input, 208, FOLLOW_208_in_matching9318);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_208.add(t);

          pushFollow(FOLLOW_exp_in_matching9320);
          exp431 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp431.getTree());

          // AST REWRITE
          // elements: exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 828:41: -> ^( MATCHING[$t] ^( OPTION ) exp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:828:44: ^( MATCHING[$t] ^( OPTION ) exp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(MATCHING, t),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:828:59: ^( OPTION )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:829:4: paramList '=>' exp
        {
          pushFollow(FOLLOW_paramList_in_matching9364);
          paramList432 = paramList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_paramList.add(paramList432.getTree());
          string_literal433 = (Token) match(
              input,
              208,
              FOLLOW_208_in_matching9366);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_208.add(string_literal433);

          pushFollow(FOLLOW_exp_in_matching9368);
          exp434 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp434.getTree());

          // AST REWRITE
          // elements: paramList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 829:41: -> ^( MATCHING ^( OPTION ^( LIST paramList ) ) exp )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:829:44: ^( MATCHING ^( OPTION ^( LIST paramList ) ) exp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(MATCHING, "MATCHING"),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:829:55: ^( OPTION ^( LIST paramList ) )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:829:64: ^( LIST paramList )
                  {
                    Object root_3 = (Object) adaptor.nil();
                    root_3 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(LIST, "LIST"),
                        root_3);

                    adaptor.addChild(root_3, stream_paramList.nextTree());

                    adaptor.addChild(root_2, root_3);
                  }

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 119, matching_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "matching"

  public static class letExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "letExp"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:832:1: letExp : t= 'let' binding ( ',' binding )* 'in' exp -> ^( LET_EXP[$t] ^( LIST ( binding )+ ) exp ) ;
  public final AntlrPilarParser.letExp_return letExp()
      throws RecognitionException {
    AntlrPilarParser.letExp_return retval = new AntlrPilarParser.letExp_return();
    retval.start = input.LT(1);
    int letExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal436 = null;
    Token string_literal438 = null;
    AntlrPilarParser.binding_return binding435 = null;

    AntlrPilarParser.binding_return binding437 = null;

    AntlrPilarParser.exp_return exp439 = null;

    Object t_tree = null;
    Object char_literal436_tree = null;
    Object string_literal438_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_221 = new RewriteRuleTokenStream(adaptor,
        "token 221");
    RewriteRuleTokenStream stream_222 = new RewriteRuleTokenStream(adaptor,
        "token 222");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_binding = new RewriteRuleSubtreeStream(
        adaptor, "rule binding");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 120)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:833:2: (t= 'let' binding ( ',' binding )* 'in' exp -> ^( LET_EXP[$t] ^( LIST ( binding )+ ) exp ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:833:4: t= 'let' binding ( ',' binding )* 'in' exp
      {
        t = (Token) match(input, 221, FOLLOW_221_in_letExp9417);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_221.add(t);

        pushFollow(FOLLOW_binding_in_letExp9419);
        binding435 = binding();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_binding.add(binding435.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:834:9: ( ',' binding )*
        loop140: do {
          int alt140 = 2;
          int LA140_0 = input.LA(1);

          if ((LA140_0 == 170)) {
            alt140 = 1;
          }

          switch (alt140) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:834:11: ',' binding
            {
              char_literal436 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_letExp9431);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal436);

              pushFollow(FOLLOW_binding_in_letExp9433);
              binding437 = binding();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_binding.add(binding437.getTree());

            }
              break;

            default:
              break loop140;
          }
        } while (true);

        string_literal438 = (Token) match(input, 222, FOLLOW_222_in_letExp9447);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_222.add(string_literal438);

        pushFollow(FOLLOW_exp_in_letExp9449);
        exp439 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp439.getTree());

        // AST REWRITE
        // elements: binding, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 835:41: -> ^( LET_EXP[$t] ^( LIST ( binding )+ ) exp )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:835:44: ^( LET_EXP[$t] ^( LIST ( binding )+ ) exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LET_EXP, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:835:58: ^( LIST ( binding )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_binding.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_binding.hasNext()) {
                  adaptor.addChild(root_2, stream_binding.nextTree());

                }
                stream_binding.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 120, letExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "letExp"

  public static class binding_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "binding"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:838:1: binding : t= ID ( ',' ID )* '=' exp -> ^( LET_BINDING[$t] ^( LIST ( ID )+ ) exp ) ;
  public final AntlrPilarParser.binding_return binding()
      throws RecognitionException {
    AntlrPilarParser.binding_return retval = new AntlrPilarParser.binding_return();
    retval.start = input.LT(1);
    int binding_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal440 = null;
    Token ID441 = null;
    Token char_literal442 = null;
    AntlrPilarParser.exp_return exp443 = null;

    Object t_tree = null;
    Object char_literal440_tree = null;
    Object ID441_tree = null;
    Object char_literal442_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 121)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:839:2: (t= ID ( ',' ID )* '=' exp -> ^( LET_BINDING[$t] ^( LIST ( ID )+ ) exp ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:839:4: t= ID ( ',' ID )* '=' exp
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_binding9501);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:839:9: ( ',' ID )*
        loop141: do {
          int alt141 = 2;
          int LA141_0 = input.LA(1);

          if ((LA141_0 == 170)) {
            alt141 = 1;
          }

          switch (alt141) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:839:11: ',' ID
            {
              char_literal440 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_binding9505);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal440);

              ID441 = (Token) match(input, ID, FOLLOW_ID_in_binding9507);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID441);

            }
              break;

            default:
              break loop141;
          }
        } while (true);

        char_literal442 = (Token) match(input, 171, FOLLOW_171_in_binding9512);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_171.add(char_literal442);

        pushFollow(FOLLOW_exp_in_binding9514);
        exp443 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp443.getTree());

        // AST REWRITE
        // elements: ID, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 839:41: -> ^( LET_BINDING[$t] ^( LIST ( ID )+ ) exp )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:839:44: ^( LET_BINDING[$t] ^( LIST ( ID )+ ) exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LET_BINDING, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:839:62: ^( LIST ( ID )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_ID.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 121, binding_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "binding"

  public static class name_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "name"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:842:1: name : (ids+= ID '::' )* id= ID -> ^( NAME[$id] ^( LIST ( $ids)* ) $id) ;
  public final AntlrPilarParser.name_return name() throws RecognitionException {
    AntlrPilarParser.name_return retval = new AntlrPilarParser.name_return();
    retval.start = input.LT(1);
    int name_StartIndex = input.index();
    Object root_0 = null;

    Token id = null;
    Token string_literal444 = null;
    Token ids = null;
    List list_ids = null;

    Object id_tree = null;
    Object string_literal444_tree = null;
    Object ids_tree = null;
    RewriteRuleTokenStream stream_223 = new RewriteRuleTokenStream(adaptor,
        "token 223");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 122)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:843:2: ( (ids+= ID '::' )* id= ID -> ^( NAME[$id] ^( LIST ( $ids)* ) $id) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:843:4: (ids+= ID '::' )* id= ID
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:843:4: (ids+= ID '::' )*
        loop142: do {
          int alt142 = 2;
          int LA142_0 = input.LA(1);

          if ((LA142_0 == ID)) {
            int LA142_1 = input.LA(2);

            if ((LA142_1 == 223)) {
              alt142 = 1;
            }

          }

          switch (alt142) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:843:5: ids+= ID '::'
            {
              ids = (Token) match(input, ID, FOLLOW_ID_in_name9556);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ids);

              if (list_ids == null) list_ids = new ArrayList();
              list_ids.add(ids);

              string_literal444 = (Token) match(
                  input,
                  223,
                  FOLLOW_223_in_name9558);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_223.add(string_literal444);

            }
              break;

            default:
              break loop142;
          }
        } while (true);

        id = (Token) match(input, ID, FOLLOW_ID_in_name9565);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(id);

        // AST REWRITE
        // elements: ids, id
        // token labels: id
        // rule labels: retval
        // token list labels: ids
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_id = new RewriteRuleTokenStream(
              adaptor, "token id", id);
          RewriteRuleTokenStream stream_ids = new RewriteRuleTokenStream(
              adaptor, "token ids", list_ids);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 843:41: -> ^( NAME[$id] ^( LIST ( $ids)* ) $id)
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:843:44: ^( NAME[$id] ^( LIST ( $ids)* ) $id)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NAME, id),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:843:56: ^( LIST ( $ids)* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:843:63: ( $ids)*
                while (stream_ids.hasNext()) {
                  adaptor.addChild(root_2, stream_ids.nextNode());

                }
                stream_ids.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_id.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 122, name_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "name"

  public static class globalName_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "globalName"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:846:1: globalName : ( ID '::' )* t= GLOBALID -> ^( NAME[$t] ^( LIST ( ID )* ) GLOBALID ) ;
  public final AntlrPilarParser.globalName_return globalName()
      throws RecognitionException {
    AntlrPilarParser.globalName_return retval = new AntlrPilarParser.globalName_return();
    retval.start = input.LT(1);
    int globalName_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID445 = null;
    Token string_literal446 = null;

    Object t_tree = null;
    Object ID445_tree = null;
    Object string_literal446_tree = null;
    RewriteRuleTokenStream stream_GLOBALID = new RewriteRuleTokenStream(
        adaptor, "token GLOBALID");
    RewriteRuleTokenStream stream_223 = new RewriteRuleTokenStream(adaptor,
        "token 223");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 123)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:847:2: ( ( ID '::' )* t= GLOBALID -> ^( NAME[$t] ^( LIST ( ID )* ) GLOBALID ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:847:4: ( ID '::' )* t= GLOBALID
      {
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:847:4: ( ID '::' )*
        loop143: do {
          int alt143 = 2;
          int LA143_0 = input.LA(1);

          if ((LA143_0 == ID)) {
            alt143 = 1;
          }

          switch (alt143) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:847:7: ID '::'
            {
              ID445 = (Token) match(input, ID, FOLLOW_ID_in_globalName9611);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID445);

              string_literal446 = (Token) match(
                  input,
                  223,
                  FOLLOW_223_in_globalName9613);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_223.add(string_literal446);

            }
              break;

            default:
              break loop143;
          }
        } while (true);

        t = (Token) match(input, GLOBALID, FOLLOW_GLOBALID_in_globalName9620);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_GLOBALID.add(t);

        // AST REWRITE
        // elements: GLOBALID, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 847:41: -> ^( NAME[$t] ^( LIST ( ID )* ) GLOBALID )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:847:44: ^( NAME[$t] ^( LIST ( ID )* ) GLOBALID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NAME, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:847:55: ^( LIST ( ID )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:847:62: ( ID )*
                while (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_GLOBALID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 123, globalName_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "globalName"

  public static class type_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "type"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:850:1: type : baseType ( typeFragment )* -> ^( TYPE baseType ^( LIST ( typeFragment )* ) ) ;
  public final AntlrPilarParser.type_return type() throws RecognitionException {
    AntlrPilarParser.type_return retval = new AntlrPilarParser.type_return();
    retval.start = input.LT(1);
    int type_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.baseType_return baseType447 = null;

    AntlrPilarParser.typeFragment_return typeFragment448 = null;

    RewriteRuleSubtreeStream stream_baseType = new RewriteRuleSubtreeStream(
        adaptor, "rule baseType");
    RewriteRuleSubtreeStream stream_typeFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule typeFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 124)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:851:2: ( baseType ( typeFragment )* -> ^( TYPE baseType ^( LIST ( typeFragment )* ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:851:4: baseType ( typeFragment )*
      {
        pushFollow(FOLLOW_baseType_in_type9664);
        baseType447 = baseType();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_baseType.add(baseType447.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:851:13: ( typeFragment )*
        loop144: do {
          int alt144 = 2;
          alt144 = dfa144.predict(input);
          switch (alt144) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeFragment
            {
              pushFollow(FOLLOW_typeFragment_in_type9666);
              typeFragment448 = typeFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeFragment.add(typeFragment448.getTree());

            }
              break;

            default:
              break loop144;
          }
        } while (true);

        // AST REWRITE
        // elements: typeFragment, baseType
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 851:41: -> ^( TYPE baseType ^( LIST ( typeFragment )* ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:851:44: ^( TYPE baseType ^( LIST ( typeFragment )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE, "TYPE"),
                  root_1);

              adaptor.addChild(root_1, stream_baseType.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:851:60: ^( LIST ( typeFragment )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:851:67: ( typeFragment )*
                while (stream_typeFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_typeFragment.nextTree());

                }
                stream_typeFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 124, type_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "type"

  public static class typeFragment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeFragment"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:854:1: typeFragment : (t= '*' -> ^( ARRAY_FRAGMENT[$t] ) | t= '[' ']' -> ^( LIST_FRAGMENT[$t] ) | t= '[' ( ',' )+ ']' -> ^( MULTIARRAY_FRAGMENT[$t] ^( LIST ( ',' )+ ) ) | t= '{' '}' -> ^( SET_FRAGMENT[$t] ) );
  public final AntlrPilarParser.typeFragment_return typeFragment()
      throws RecognitionException {
    AntlrPilarParser.typeFragment_return retval = new AntlrPilarParser.typeFragment_return();
    retval.start = input.LT(1);
    int typeFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal449 = null;
    Token char_literal450 = null;
    Token char_literal451 = null;
    Token char_literal452 = null;

    Object t_tree = null;
    Object char_literal449_tree = null;
    Object char_literal450_tree = null;
    Object char_literal451_tree = null;
    Object char_literal452_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_213 = new RewriteRuleTokenStream(adaptor,
        "token 213");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 125)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:855:2: (t= '*' -> ^( ARRAY_FRAGMENT[$t] ) | t= '[' ']' -> ^( LIST_FRAGMENT[$t] ) | t= '[' ( ',' )+ ']' -> ^( MULTIARRAY_FRAGMENT[$t] ^( LIST ( ',' )+ ) ) | t= '{' '}' -> ^( SET_FRAGMENT[$t] ) )
      int alt146 = 4;
      switch (input.LA(1)) {
        case 213: {
          alt146 = 1;
        }
          break;
        case 200: {
          int LA146_2 = input.LA(2);

          if ((LA146_2 == 201)) {
            alt146 = 2;
          } else if ((LA146_2 == 170)) {
            alt146 = 3;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 146, 2,
                input);

            throw nvae;
          }
        }
          break;
        case 175: {
          alt146 = 4;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 146, 0,
              input);

          throw nvae;
      }

      switch (alt146) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:855:4: t= '*'
        {
          t = (Token) match(input, 213, FOLLOW_213_in_typeFragment9710);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_213.add(t);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 855:41: -> ^( ARRAY_FRAGMENT[$t] )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:855:44: ^( ARRAY_FRAGMENT[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ARRAY_FRAGMENT, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:856:4: t= '[' ']'
        {
          t = (Token) match(input, 200, FOLLOW_200_in_typeFragment9755);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_200.add(t);

          char_literal449 = (Token) match(
              input,
              201,
              FOLLOW_201_in_typeFragment9757);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_201.add(char_literal449);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 856:41: -> ^( LIST_FRAGMENT[$t] )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:856:44: ^( LIST_FRAGMENT[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST_FRAGMENT, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:4: t= '[' ( ',' )+ ']'
        {
          t = (Token) match(input, 200, FOLLOW_200_in_typeFragment9798);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_200.add(t);

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:10: ( ',' )+
          int cnt145 = 0;
          loop145: do {
            int alt145 = 2;
            int LA145_0 = input.LA(1);

            if ((LA145_0 == 170)) {
              alt145 = 1;
            }

            switch (alt145) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ','
              {
                char_literal450 = (Token) match(
                    input,
                    170,
                    FOLLOW_170_in_typeFragment9800);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_170.add(char_literal450);

              }
                break;

              default:
                if (cnt145 >= 1) break loop145;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(145, input);
                throw eee;
            }
            cnt145++;
          } while (true);

          char_literal451 = (Token) match(
              input,
              201,
              FOLLOW_201_in_typeFragment9803);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_201.add(char_literal451);

          // AST REWRITE
          // elements: 170
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 857:41: -> ^( MULTIARRAY_FRAGMENT[$t] ^( LIST ( ',' )+ ) )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:44: ^( MULTIARRAY_FRAGMENT[$t] ^( LIST ( ',' )+ ) )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(MULTIARRAY_FRAGMENT, t),
                    root_1);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:70: ^( LIST ( ',' )+ )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  if (!(stream_170.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_170.hasNext()) {
                    adaptor.addChild(root_2, stream_170.nextNode());

                  }
                  stream_170.reset();

                  adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:858:4: t= '{' '}'
        {
          t = (Token) match(input, 175, FOLLOW_175_in_typeFragment9846);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(t);

          char_literal452 = (Token) match(
              input,
              176,
              FOLLOW_176_in_typeFragment9848);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_176.add(char_literal452);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 858:41: -> ^( SET_FRAGMENT[$t] )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:858:44: ^( SET_FRAGMENT[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(SET_FRAGMENT, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 125, typeFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeFragment"

  public static class baseType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "baseType"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:861:1: baseType : (t= TYPEVARID -> ^( TYPEVARID_TYPE[$t] $t) | name ( '.' ID )? ( typeTuple )? -> ^( NAME_TYPE name ^( OPTION ( ID )? ) ^( OPTION ( typeTuple )? ) ) | procedureType | tupleType | functionType | relationType );
  public final AntlrPilarParser.baseType_return baseType()
      throws RecognitionException {
    AntlrPilarParser.baseType_return retval = new AntlrPilarParser.baseType_return();
    retval.start = input.LT(1);
    int baseType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal454 = null;
    Token ID455 = null;
    AntlrPilarParser.name_return name453 = null;

    AntlrPilarParser.typeTuple_return typeTuple456 = null;

    AntlrPilarParser.procedureType_return procedureType457 = null;

    AntlrPilarParser.tupleType_return tupleType458 = null;

    AntlrPilarParser.functionType_return functionType459 = null;

    AntlrPilarParser.relationType_return relationType460 = null;

    Object t_tree = null;
    Object char_literal454_tree = null;
    Object ID455_tree = null;
    RewriteRuleTokenStream stream_214 = new RewriteRuleTokenStream(adaptor,
        "token 214");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_TYPEVARID = new RewriteRuleTokenStream(
        adaptor, "token TYPEVARID");
    RewriteRuleSubtreeStream stream_typeTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeTuple");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 126)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:862:2: (t= TYPEVARID -> ^( TYPEVARID_TYPE[$t] $t) | name ( '.' ID )? ( typeTuple )? -> ^( NAME_TYPE name ^( OPTION ( ID )? ) ^( OPTION ( typeTuple )? ) ) | procedureType | tupleType | functionType | relationType )
      int alt149 = 6;
      switch (input.LA(1)) {
        case TYPEVARID: {
          alt149 = 1;
        }
          break;
        case ID: {
          alt149 = 2;
        }
          break;
        case 167: {
          int LA149_3 = input.LA(2);

          if ((synpred203_AntlrPilar())) {
            alt149 = 3;
          } else if ((synpred204_AntlrPilar())) {
            alt149 = 4;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 149, 3,
                input);

            throw nvae;
          }
        }
          break;
        case 175: {
          int LA149_4 = input.LA(2);

          if ((synpred205_AntlrPilar())) {
            alt149 = 5;
          } else if ((true)) {
            alt149 = 6;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 149, 4,
                input);

            throw nvae;
          }
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 149, 0,
              input);

          throw nvae;
      }

      switch (alt149) {
        case 1:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:862:4: t= TYPEVARID
        {
          t = (Token) match(input, TYPEVARID, FOLLOW_TYPEVARID_in_baseType9895);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_TYPEVARID.add(t);

          // AST REWRITE
          // elements: t
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 862:41: -> ^( TYPEVARID_TYPE[$t] $t)
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:862:44: ^( TYPEVARID_TYPE[$t] $t)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(TYPEVARID_TYPE, t),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:4: name ( '.' ID )? ( typeTuple )?
        {
          pushFollow(FOLLOW_name_in_baseType9935);
          name453 = name();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_name.add(name453.getTree());
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:9: ( '.' ID )?
          int alt147 = 2;
          int LA147_0 = input.LA(1);

          if ((LA147_0 == 214)) {
            int LA147_1 = input.LA(2);

            if ((LA147_1 == ID)) {
              int LA147_3 = input.LA(3);

              if ((synpred200_AntlrPilar())) {
                alt147 = 1;
              }
            }
          }
          switch (alt147) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:11: '.' ID
            {
              char_literal454 = (Token) match(
                  input,
                  214,
                  FOLLOW_214_in_baseType9939);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_214.add(char_literal454);

              ID455 = (Token) match(input, ID, FOLLOW_ID_in_baseType9941);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID455);

            }
              break;

          }

          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:20: ( typeTuple )?
          int alt148 = 2;
          alt148 = dfa148.predict(input);
          switch (alt148) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeTuple
            {
              pushFollow(FOLLOW_typeTuple_in_baseType9945);
              typeTuple456 = typeTuple();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeTuple.add(typeTuple456.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: typeTuple, ID, name
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 863:41: -> ^( NAME_TYPE name ^( OPTION ( ID )? ) ^( OPTION ( typeTuple )? ) )
            {
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:44: ^( NAME_TYPE name ^( OPTION ( ID )? ) ^( OPTION ( typeTuple )? ) )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NAME_TYPE, "NAME_TYPE"),
                    root_1);

                adaptor.addChild(root_1, stream_name.nextTree());
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:61: ^( OPTION ( ID )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:70: ( ID )?
                  if (stream_ID.hasNext()) {
                    adaptor.addChild(root_2, stream_ID.nextNode());

                  }
                  stream_ID.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:75: ^( OPTION ( typeTuple )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:84: ( typeTuple )?
                  if (stream_typeTuple.hasNext()) {
                    adaptor.addChild(root_2, stream_typeTuple.nextTree());

                  }
                  stream_typeTuple.reset();

                  adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:864:4: procedureType
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_procedureType_in_baseType9983);
          procedureType457 = procedureType();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, procedureType457.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:865:4: tupleType
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_tupleType_in_baseType9988);
          tupleType458 = tupleType();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, tupleType458.getTree());

        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:866:4: functionType
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_functionType_in_baseType9993);
          functionType459 = functionType();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, functionType459.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:867:4: relationType
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_relationType_in_baseType9998);
          relationType460 = relationType();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, relationType460.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 126, baseType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "baseType"

  public static class procedureType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "procedureType"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:870:1: procedureType : t= '(' ( ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? ) )? ( '->' ( annotatedType )? ')' -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) | '-!>' ( annotatedType )? ')' -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) ) ;
  public final AntlrPilarParser.procedureType_return procedureType()
      throws RecognitionException {
    AntlrPilarParser.procedureType_return retval = new AntlrPilarParser.procedureType_return();
    retval.start = input.LT(1);
    int procedureType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal463 = null;
    Token char_literal465 = null;
    Token string_literal467 = null;
    Token char_literal469 = null;
    Token string_literal470 = null;
    Token char_literal472 = null;
    AntlrPilarParser.procedureTypeParamVariable_return procedureTypeParamVariable461 = null;

    AntlrPilarParser.typeParam_return typeParam462 = null;

    AntlrPilarParser.typeParam_return typeParam464 = null;

    AntlrPilarParser.procedureTypeParamVariable_return procedureTypeParamVariable466 = null;

    AntlrPilarParser.annotatedType_return annotatedType468 = null;

    AntlrPilarParser.annotatedType_return annotatedType471 = null;

    Object t_tree = null;
    Object char_literal463_tree = null;
    Object char_literal465_tree = null;
    Object string_literal467_tree = null;
    Object char_literal469_tree = null;
    Object string_literal470_tree = null;
    Object char_literal472_tree = null;
    RewriteRuleTokenStream stream_220 = new RewriteRuleTokenStream(adaptor,
        "token 220");
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_224 = new RewriteRuleTokenStream(adaptor,
        "token 224");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_procedureTypeParamVariable = new RewriteRuleSubtreeStream(
        adaptor, "rule procedureTypeParamVariable");
    RewriteRuleSubtreeStream stream_annotatedType = new RewriteRuleSubtreeStream(
        adaptor, "rule annotatedType");
    RewriteRuleSubtreeStream stream_typeParam = new RewriteRuleSubtreeStream(
        adaptor, "rule typeParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 127)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:871:2: (t= '(' ( ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? ) )? ( '->' ( annotatedType )? ')' -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) | '-!>' ( annotatedType )? ')' -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:871:4: t= '(' ( ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? ) )? ( '->' ( annotatedType )? ')' -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) | '-!>' ( annotatedType )? ')' -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) )
      {
        t = (Token) match(input, 167, FOLLOW_167_in_procedureType10011);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_167.add(t);

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:4: ( ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? ) )?
        int alt153 = 2;
        int LA153_0 = input.LA(1);

        if (((LA153_0 >= ID && LA153_0 <= TYPEVARID) || LA153_0 == 167 || LA153_0 == 175)) {
          alt153 = 1;
        }
        switch (alt153) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:7: ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:7: ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? )
            int alt152 = 2;
            switch (input.LA(1)) {
              case TYPEVARID: {
                int LA152_1 = input.LA(2);

                if ((synpred206_AntlrPilar())) {
                  alt152 = 1;
                } else if ((true)) {
                  alt152 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 152,
                      1, input);

                  throw nvae;
                }
              }
                break;
              case ID: {
                int LA152_2 = input.LA(2);

                if ((synpred206_AntlrPilar())) {
                  alt152 = 1;
                } else if ((true)) {
                  alt152 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 152,
                      2, input);

                  throw nvae;
                }
              }
                break;
              case 167: {
                int LA152_3 = input.LA(2);

                if ((synpred206_AntlrPilar())) {
                  alt152 = 1;
                } else if ((true)) {
                  alt152 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 152,
                      3, input);

                  throw nvae;
                }
              }
                break;
              case 175: {
                int LA152_4 = input.LA(2);

                if ((synpred206_AntlrPilar())) {
                  alt152 = 1;
                } else if ((true)) {
                  alt152 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 152,
                      4, input);

                  throw nvae;
                }
              }
                break;
              default:
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 152,
                    0, input);

                throw nvae;
            }

            switch (alt152) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:9: procedureTypeParamVariable
              {
                pushFollow(FOLLOW_procedureTypeParamVariable_in_procedureType10022);
                procedureTypeParamVariable461 = procedureTypeParamVariable();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_procedureTypeParamVariable
                      .add(procedureTypeParamVariable461.getTree());

              }
                break;
              case 2:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:873:9: typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )?
              {
                pushFollow(FOLLOW_typeParam_in_procedureType10032);
                typeParam462 = typeParam();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_typeParam.add(typeParam462.getTree());
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:874:9: ( ',' typeParam )*
                loop150: do {
                  int alt150 = 2;
                  int LA150_0 = input.LA(1);

                  if ((LA150_0 == 170)) {
                    int LA150_1 = input.LA(2);

                    if ((synpred207_AntlrPilar())) {
                      alt150 = 1;
                    }

                  }

                  switch (alt150) {
                    case 1:
                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:874:11: ',' typeParam
                    {
                      char_literal463 = (Token) match(
                          input,
                          170,
                          FOLLOW_170_in_procedureType10045);
                      if (state.failed) return retval;
                      if (state.backtracking == 0)
                        stream_170.add(char_literal463);

                      pushFollow(FOLLOW_typeParam_in_procedureType10047);
                      typeParam464 = typeParam();

                      state._fsp--;
                      if (state.failed) return retval;
                      if (state.backtracking == 0)
                        stream_typeParam.add(typeParam464.getTree());

                    }
                      break;

                    default:
                      break loop150;
                  }
                } while (true);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:875:9: ( ',' procedureTypeParamVariable )?
                int alt151 = 2;
                int LA151_0 = input.LA(1);

                if ((LA151_0 == 170)) {
                  alt151 = 1;
                }
                switch (alt151) {
                  case 1:
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:875:11: ',' procedureTypeParamVariable
                  {
                    char_literal465 = (Token) match(
                        input,
                        170,
                        FOLLOW_170_in_procedureType10063);
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_170.add(char_literal465);

                    pushFollow(FOLLOW_procedureTypeParamVariable_in_procedureType10065);
                    procedureTypeParamVariable466 = procedureTypeParamVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_procedureTypeParamVariable
                          .add(procedureTypeParamVariable466.getTree());

                  }
                    break;

                }

              }
                break;

            }

          }
            break;

        }

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:4: ( '->' ( annotatedType )? ')' -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) | '-!>' ( annotatedType )? ')' -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) )
        int alt156 = 2;
        int LA156_0 = input.LA(1);

        if ((LA156_0 == 220)) {
          alt156 = 1;
        } else if ((LA156_0 == 224)) {
          alt156 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 156, 0,
              input);

          throw nvae;
        }
        switch (alt156) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:6: '->' ( annotatedType )? ')'
          {
            string_literal467 = (Token) match(
                input,
                220,
                FOLLOW_220_in_procedureType10099);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_220.add(string_literal467);

            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:11: ( annotatedType )?
            int alt154 = 2;
            int LA154_0 = input.LA(1);

            if (((LA154_0 >= ID && LA154_0 <= TYPEVARID) || LA154_0 == 167 || LA154_0 == 175)) {
              alt154 = 1;
            }
            switch (alt154) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotatedType
              {
                pushFollow(FOLLOW_annotatedType_in_procedureType10101);
                annotatedType468 = annotatedType();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotatedType.add(annotatedType468.getTree());

              }
                break;

            }

            char_literal469 = (Token) match(
                input,
                168,
                FOLLOW_168_in_procedureType10104);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_168.add(char_literal469);

            // AST REWRITE
            // elements: annotatedType, typeParam, procedureTypeParamVariable
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (Object) adaptor.nil();
              // 879:41: -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) )
              {
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:44: ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) )
                {
                  Object root_1 = (Object) adaptor.nil();
                  root_1 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(FUN_TYPE, t),
                      root_1);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:59: ^( LIST ( typeParam )* ( procedureTypeParamVariable )? )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(LIST, "LIST"),
                        root_2);

                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:66: ( typeParam )*
                    while (stream_typeParam.hasNext()) {
                      adaptor.addChild(root_2, stream_typeParam.nextTree());

                    }
                    stream_typeParam.reset();
                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:77: ( procedureTypeParamVariable )?
                    if (stream_procedureTypeParamVariable.hasNext()) {
                      adaptor.addChild(
                          root_2,
                          stream_procedureTypeParamVariable.nextTree());

                    }
                    stream_procedureTypeParamVariable.reset();

                    adaptor.addChild(root_1, root_2);
                  }
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:106: ^( OPTION ( annotatedType )? )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(OPTION, "OPTION"),
                        root_2);

                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:115: ( annotatedType )?
                    if (stream_annotatedType.hasNext()) {
                      adaptor.addChild(root_2, stream_annotatedType.nextTree());

                    }
                    stream_annotatedType.reset();

                    adaptor.addChild(root_1, root_2);
                  }

                  adaptor.addChild(root_0, root_1);
                }

              }

              retval.tree = root_0;
            }
          }
            break;
          case 2:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:6: '-!>' ( annotatedType )? ')'
          {
            string_literal470 = (Token) match(
                input,
                224,
                FOLLOW_224_in_procedureType10146);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_224.add(string_literal470);

            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:12: ( annotatedType )?
            int alt155 = 2;
            int LA155_0 = input.LA(1);

            if (((LA155_0 >= ID && LA155_0 <= TYPEVARID) || LA155_0 == 167 || LA155_0 == 175)) {
              alt155 = 1;
            }
            switch (alt155) {
              case 1:
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotatedType
              {
                pushFollow(FOLLOW_annotatedType_in_procedureType10148);
                annotatedType471 = annotatedType();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotatedType.add(annotatedType471.getTree());

              }
                break;

            }

            char_literal472 = (Token) match(
                input,
                168,
                FOLLOW_168_in_procedureType10151);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_168.add(char_literal472);

            // AST REWRITE
            // elements: procedureTypeParamVariable, annotatedType, typeParam
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (Object) adaptor.nil();
              // 880:41: -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) )
              {
                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:44: ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) )
                {
                  Object root_1 = (Object) adaptor.nil();
                  root_1 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(PROCEDURE_TYPE, t),
                      root_1);

                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:65: ^( LIST ( typeParam )* ( procedureTypeParamVariable )? )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(LIST, "LIST"),
                        root_2);

                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:72: ( typeParam )*
                    while (stream_typeParam.hasNext()) {
                      adaptor.addChild(root_2, stream_typeParam.nextTree());

                    }
                    stream_typeParam.reset();
                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:83: ( procedureTypeParamVariable )?
                    if (stream_procedureTypeParamVariable.hasNext()) {
                      adaptor.addChild(
                          root_2,
                          stream_procedureTypeParamVariable.nextTree());

                    }
                    stream_procedureTypeParamVariable.reset();

                    adaptor.addChild(root_1, root_2);
                  }
                  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:112: ^( OPTION ( annotatedType )? )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(OPTION, "OPTION"),
                        root_2);

                    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:121: ( annotatedType )?
                    if (stream_annotatedType.hasNext()) {
                      adaptor.addChild(root_2, stream_annotatedType.nextTree());

                    }
                    stream_annotatedType.reset();

                    adaptor.addChild(root_1, root_2);
                  }

                  adaptor.addChild(root_0, root_1);
                }

              }

              retval.tree = root_0;
            }
          }
            break;

        }

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 127, procedureType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "procedureType"

  public static class typeParam_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeParam"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:884:1: typeParam : type ( ID )? annotationList -> ^( TYPE_PARAM type ^( OPTION ( ID )? ) annotationList ) ;
  public final AntlrPilarParser.typeParam_return typeParam()
      throws RecognitionException {
    AntlrPilarParser.typeParam_return retval = new AntlrPilarParser.typeParam_return();
    retval.start = input.LT(1);
    int typeParam_StartIndex = input.index();
    Object root_0 = null;

    Token ID474 = null;
    AntlrPilarParser.type_return type473 = null;

    AntlrPilarParser.annotationList_return annotationList475 = null;

    Object ID474_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 128)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:2: ( type ( ID )? annotationList -> ^( TYPE_PARAM type ^( OPTION ( ID )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:4: type ( ID )? annotationList
      {
        pushFollow(FOLLOW_type_in_typeParam10201);
        type473 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type473.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:9: ( ID )?
        int alt157 = 2;
        int LA157_0 = input.LA(1);

        if ((LA157_0 == ID)) {
          alt157 = 1;
        }
        switch (alt157) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ID
          {
            ID474 = (Token) match(input, ID, FOLLOW_ID_in_typeParam10203);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(ID474);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_typeParam10206);
        annotationList475 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList475.getTree());

        // AST REWRITE
        // elements: ID, annotationList, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 885:41: -> ^( TYPE_PARAM type ^( OPTION ( ID )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:44: ^( TYPE_PARAM type ^( OPTION ( ID )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE_PARAM, "TYPE_PARAM"),
                  root_1);

              adaptor.addChild(root_1, stream_type.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:62: ^( OPTION ( ID )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:71: ( ID )?
                if (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 128, typeParam_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeParam"

  public static class annotatedType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotatedType"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:888:1: annotatedType : type annotationList -> ^( ANNOTATED_TYPE type annotationList ) ;
  public final AntlrPilarParser.annotatedType_return annotatedType()
      throws RecognitionException {
    AntlrPilarParser.annotatedType_return retval = new AntlrPilarParser.annotatedType_return();
    retval.start = input.LT(1);
    int annotatedType_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.type_return type476 = null;

    AntlrPilarParser.annotationList_return annotationList477 = null;

    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 129)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:889:2: ( type annotationList -> ^( ANNOTATED_TYPE type annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:889:4: type annotationList
      {
        pushFollow(FOLLOW_type_in_annotatedType10247);
        type476 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type476.getTree());
        pushFollow(FOLLOW_annotationList_in_annotatedType10249);
        annotationList477 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList477.getTree());

        // AST REWRITE
        // elements: type, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 889:41: -> ^( ANNOTATED_TYPE type annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:889:44: ^( ANNOTATED_TYPE type annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ANNOTATED_TYPE, "ANNOTATED_TYPE"),
                  root_1);

              adaptor.addChild(root_1, stream_type.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 129, annotatedType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotatedType"

  public static class procedureTypeParamVariable_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "procedureTypeParamVariable"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:892:1: procedureTypeParamVariable : type ( ID )? '...' annotationList -> ^( PROCEDURE_TYPE_PARAM_VARIABLE type ^( OPTION ( ID )? ) annotationList ) ;
  public final AntlrPilarParser.procedureTypeParamVariable_return procedureTypeParamVariable()
      throws RecognitionException {
    AntlrPilarParser.procedureTypeParamVariable_return retval = new AntlrPilarParser.procedureTypeParamVariable_return();
    retval.start = input.LT(1);
    int procedureTypeParamVariable_StartIndex = input.index();
    Object root_0 = null;

    Token ID479 = null;
    Token string_literal480 = null;
    AntlrPilarParser.type_return type478 = null;

    AntlrPilarParser.annotationList_return annotationList481 = null;

    Object ID479_tree = null;
    Object string_literal480_tree = null;
    RewriteRuleTokenStream stream_183 = new RewriteRuleTokenStream(adaptor,
        "token 183");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 130)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:893:2: ( type ( ID )? '...' annotationList -> ^( PROCEDURE_TYPE_PARAM_VARIABLE type ^( OPTION ( ID )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:893:4: type ( ID )? '...' annotationList
      {
        pushFollow(FOLLOW_type_in_procedureTypeParamVariable10288);
        type478 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type478.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:893:9: ( ID )?
        int alt158 = 2;
        int LA158_0 = input.LA(1);

        if ((LA158_0 == ID)) {
          alt158 = 1;
        }
        switch (alt158) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ID
          {
            ID479 = (Token) match(
                input,
                ID,
                FOLLOW_ID_in_procedureTypeParamVariable10290);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(ID479);

          }
            break;

        }

        string_literal480 = (Token) match(
            input,
            183,
            FOLLOW_183_in_procedureTypeParamVariable10293);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_183.add(string_literal480);

        pushFollow(FOLLOW_annotationList_in_procedureTypeParamVariable10295);
        annotationList481 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList481.getTree());

        // AST REWRITE
        // elements: ID, annotationList, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 893:41: -> ^( PROCEDURE_TYPE_PARAM_VARIABLE type ^( OPTION ( ID )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:893:44: ^( PROCEDURE_TYPE_PARAM_VARIABLE type ^( OPTION ( ID )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                  PROCEDURE_TYPE_PARAM_VARIABLE,
                  "PROCEDURE_TYPE_PARAM_VARIABLE"), root_1);

              adaptor.addChild(root_1, stream_type.nextTree());
              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:893:81: ^( OPTION ( ID )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:893:90: ( ID )?
                if (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 130, procedureTypeParamVariable_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "procedureTypeParamVariable"

  public static class tupleType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "tupleType"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:896:1: tupleType : t= '(' typeParam ( ',' typeParam )* ')' -> ^( TUPLE_TYPE[$t] ^( LIST ( typeParam )+ ) ) ;
  public final AntlrPilarParser.tupleType_return tupleType()
      throws RecognitionException {
    AntlrPilarParser.tupleType_return retval = new AntlrPilarParser.tupleType_return();
    retval.start = input.LT(1);
    int tupleType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal483 = null;
    Token char_literal485 = null;
    AntlrPilarParser.typeParam_return typeParam482 = null;

    AntlrPilarParser.typeParam_return typeParam484 = null;

    Object t_tree = null;
    Object char_literal483_tree = null;
    Object char_literal485_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_typeParam = new RewriteRuleSubtreeStream(
        adaptor, "rule typeParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 131)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:897:2: (t= '(' typeParam ( ',' typeParam )* ')' -> ^( TUPLE_TYPE[$t] ^( LIST ( typeParam )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:897:4: t= '(' typeParam ( ',' typeParam )* ')'
      {
        t = (Token) match(input, 167, FOLLOW_167_in_tupleType10332);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_167.add(t);

        pushFollow(FOLLOW_typeParam_in_tupleType10334);
        typeParam482 = typeParam();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_typeParam.add(typeParam482.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:898:8: ( ',' typeParam )*
        loop159: do {
          int alt159 = 2;
          int LA159_0 = input.LA(1);

          if ((LA159_0 == 170)) {
            alt159 = 1;
          }

          switch (alt159) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:898:10: ',' typeParam
            {
              char_literal483 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_tupleType10346);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal483);

              pushFollow(FOLLOW_typeParam_in_tupleType10348);
              typeParam484 = typeParam();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeParam.add(typeParam484.getTree());

            }
              break;

            default:
              break loop159;
          }
        } while (true);

        char_literal485 = (Token) match(
            input,
            168,
            FOLLOW_168_in_tupleType10352);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_168.add(char_literal485);

        // AST REWRITE
        // elements: typeParam
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 898:41: -> ^( TUPLE_TYPE[$t] ^( LIST ( typeParam )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:898:44: ^( TUPLE_TYPE[$t] ^( LIST ( typeParam )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TUPLE_TYPE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:898:61: ^( LIST ( typeParam )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_typeParam.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_typeParam.hasNext()) {
                  adaptor.addChild(root_2, stream_typeParam.nextTree());

                }
                stream_typeParam.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 131, tupleType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "tupleType"

  public static class functionType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "functionType"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:901:1: functionType : t= '{' i+= typeParam ( ',' i+= typeParam )* '->' o= annotatedType '}' -> ^( FUNCTION_TYPE[$t] ^( LIST ( $i)+ ) $o) ;
  public final AntlrPilarParser.functionType_return functionType()
      throws RecognitionException {
    AntlrPilarParser.functionType_return retval = new AntlrPilarParser.functionType_return();
    retval.start = input.LT(1);
    int functionType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal486 = null;
    Token string_literal487 = null;
    Token char_literal488 = null;
    List list_i = null;
    AntlrPilarParser.annotatedType_return o = null;

    RuleReturnScope i = null;
    Object t_tree = null;
    Object char_literal486_tree = null;
    Object string_literal487_tree = null;
    Object char_literal488_tree = null;
    RewriteRuleTokenStream stream_220 = new RewriteRuleTokenStream(adaptor,
        "token 220");
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_annotatedType = new RewriteRuleSubtreeStream(
        adaptor, "rule annotatedType");
    RewriteRuleSubtreeStream stream_typeParam = new RewriteRuleSubtreeStream(
        adaptor, "rule typeParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 132)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:902:2: (t= '{' i+= typeParam ( ',' i+= typeParam )* '->' o= annotatedType '}' -> ^( FUNCTION_TYPE[$t] ^( LIST ( $i)+ ) $o) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:902:4: t= '{' i+= typeParam ( ',' i+= typeParam )* '->' o= annotatedType '}'
      {
        t = (Token) match(input, 175, FOLLOW_175_in_functionType10390);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(t);

        pushFollow(FOLLOW_typeParam_in_functionType10394);
        i = typeParam();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_typeParam.add(i.getTree());
        if (list_i == null) list_i = new ArrayList();
        list_i.add(i.getTree());

        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:903:8: ( ',' i+= typeParam )*
        loop160: do {
          int alt160 = 2;
          int LA160_0 = input.LA(1);

          if ((LA160_0 == 170)) {
            alt160 = 1;
          }

          switch (alt160) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:903:10: ',' i+= typeParam
            {
              char_literal486 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_functionType10406);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal486);

              pushFollow(FOLLOW_typeParam_in_functionType10410);
              i = typeParam();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_typeParam.add(i.getTree());
              if (list_i == null) list_i = new ArrayList();
              list_i.add(i.getTree());

            }
              break;

            default:
              break loop160;
          }
        } while (true);

        string_literal487 = (Token) match(
            input,
            220,
            FOLLOW_220_in_functionType10415);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_220.add(string_literal487);

        pushFollow(FOLLOW_annotatedType_in_functionType10427);
        o = annotatedType();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_annotatedType.add(o.getTree());
        char_literal488 = (Token) match(
            input,
            176,
            FOLLOW_176_in_functionType10429);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal488);

        // AST REWRITE
        // elements: o, i
        // token labels: 
        // rule labels: retval, o
        // token list labels: 
        // rule list labels: i
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_o = new RewriteRuleSubtreeStream(
              adaptor, "rule o", o != null ? o.tree : null);
          RewriteRuleSubtreeStream stream_i = new RewriteRuleSubtreeStream(
              adaptor, "token i", list_i);
          root_0 = (Object) adaptor.nil();
          // 904:41: -> ^( FUNCTION_TYPE[$t] ^( LIST ( $i)+ ) $o)
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:904:44: ^( FUNCTION_TYPE[$t] ^( LIST ( $i)+ ) $o)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(FUNCTION_TYPE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:904:64: ^( LIST ( $i)+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_i.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_i.hasNext()) {
                  adaptor.addChild(root_2, stream_i.nextTree());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_o.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 132, functionType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "functionType"

  public static class relationType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "relationType"
  // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:907:1: relationType : t= '{' typeParam ( ',' typeParam )+ '}' -> ^( RELATION_TYPE[$t] ^( LIST ( typeParam )+ ) ) ;
  public final AntlrPilarParser.relationType_return relationType()
      throws RecognitionException {
    AntlrPilarParser.relationType_return retval = new AntlrPilarParser.relationType_return();
    retval.start = input.LT(1);
    int relationType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal490 = null;
    Token char_literal492 = null;
    AntlrPilarParser.typeParam_return typeParam489 = null;

    AntlrPilarParser.typeParam_return typeParam491 = null;

    Object t_tree = null;
    Object char_literal490_tree = null;
    Object char_literal492_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_typeParam = new RewriteRuleSubtreeStream(
        adaptor, "rule typeParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 133)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:908:2: (t= '{' typeParam ( ',' typeParam )+ '}' -> ^( RELATION_TYPE[$t] ^( LIST ( typeParam )+ ) ) )
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:908:4: t= '{' typeParam ( ',' typeParam )+ '}'
      {
        t = (Token) match(input, 175, FOLLOW_175_in_relationType10482);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(t);

        pushFollow(FOLLOW_typeParam_in_relationType10484);
        typeParam489 = typeParam();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_typeParam.add(typeParam489.getTree());
        // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:909:8: ( ',' typeParam )+
        int cnt161 = 0;
        loop161: do {
          int alt161 = 2;
          int LA161_0 = input.LA(1);

          if ((LA161_0 == 170)) {
            alt161 = 1;
          }

          switch (alt161) {
            case 1:
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:909:10: ',' typeParam
            {
              char_literal490 = (Token) match(
                  input,
                  170,
                  FOLLOW_170_in_relationType10496);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_170.add(char_literal490);

              pushFollow(FOLLOW_typeParam_in_relationType10498);
              typeParam491 = typeParam();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeParam.add(typeParam491.getTree());

            }
              break;

            default:
              if (cnt161 >= 1) break loop161;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(161, input);
              throw eee;
          }
          cnt161++;
        } while (true);

        char_literal492 = (Token) match(
            input,
            176,
            FOLLOW_176_in_relationType10503);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(char_literal492);

        // AST REWRITE
        // elements: typeParam
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 909:41: -> ^( RELATION_TYPE[$t] ^( LIST ( typeParam )+ ) )
          {
            // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:909:44: ^( RELATION_TYPE[$t] ^( LIST ( typeParam )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(RELATION_TYPE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:909:64: ^( LIST ( typeParam )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_typeParam.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_typeParam.hasNext()) {
                  adaptor.addChild(root_2, stream_typeParam.nextTree());

                }
                stream_typeParam.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 133, relationType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "relationType"

  // $ANTLR start synpred4_AntlrPilar
  public final void synpred4_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:211:4: ( ( annotation )* )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:211:4: ( annotation )*
    {
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:211:4: ( annotation )*
      loop162: do {
        int alt162 = 2;
        int LA162_0 = input.LA(1);

        if ((LA162_0 == 169)) {
          alt162 = 1;
        }

        switch (alt162) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotation
          {
            pushFollow(FOLLOW_annotation_in_synpred4_AntlrPilar1167);
            annotation();

            state._fsp--;
            if (state.failed) return;

          }
            break;

          default:
            break loop162;
        }
      } while (true);

    }
  }

  // $ANTLR end synpred4_AntlrPilar

  // $ANTLR start synpred9_AntlrPilar
  public final void synpred9_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:226:13: ( annotationParams )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:226:13: annotationParams
    {
      pushFollow(FOLLOW_annotationParams_in_synpred9_AntlrPilar1414);
      annotationParams();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred9_AntlrPilar

  // $ANTLR start synpred11_AntlrPilar
  public final void synpred11_AntlrPilar_fragment() throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:230:4: (t= '(' annotationParam ( ',' annotationParam )* ')' )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:230:4: t= '(' annotationParam ( ',' annotationParam )* ')'
    {
      t = (Token) match(input, 167, FOLLOW_167_in_synpred11_AntlrPilar1458);
      if (state.failed) return;
      pushFollow(FOLLOW_annotationParam_in_synpred11_AntlrPilar1460);
      annotationParam();

      state._fsp--;
      if (state.failed) return;
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:231:8: ( ',' annotationParam )*
      loop163: do {
        int alt163 = 2;
        int LA163_0 = input.LA(1);

        if ((LA163_0 == 170)) {
          alt163 = 1;
        }

        switch (alt163) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:231:10: ',' annotationParam
          {
            match(input, 170, FOLLOW_170_in_synpred11_AntlrPilar1471);
            if (state.failed) return;
            pushFollow(FOLLOW_annotationParam_in_synpred11_AntlrPilar1473);
            annotationParam();

            state._fsp--;
            if (state.failed) return;

          }
            break;

          default:
            break loop163;
        }
      } while (true);

      match(input, 168, FOLLOW_168_in_synpred11_AntlrPilar1478);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred11_AntlrPilar

  // $ANTLR start synpred12_AntlrPilar
  public final void synpred12_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:10: ( ',' exp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:10: ',' exp
    {
      match(input, 170, FOLLOW_170_in_synpred12_AntlrPilar1501);
      if (state.failed) return;
      pushFollow(FOLLOW_exp_in_synpred12_AntlrPilar1503);
      exp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred12_AntlrPilar

  // $ANTLR start synpred42_AntlrPilar
  public final void synpred42_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:338:8: ( paramVariable )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:338:8: paramVariable
    {
      pushFollow(FOLLOW_paramVariable_in_synpred42_AntlrPilar2641);
      paramVariable();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred42_AntlrPilar

  // $ANTLR start synpred46_AntlrPilar
  public final void synpred46_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:348:12: ( ',' param )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:348:12: ',' param
    {
      match(input, 170, FOLLOW_170_in_synpred46_AntlrPilar2790);
      if (state.failed) return;
      pushFollow(FOLLOW_param_in_synpred46_AntlrPilar2792);
      param();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred46_AntlrPilar

  // $ANTLR start synpred70_AntlrPilar
  public final void synpred70_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:427:4: ( extParamVariable )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:427:4: extParamVariable
    {
      pushFollow(FOLLOW_extParamVariable_in_synpred70_AntlrPilar3662);
      extParamVariable();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred70_AntlrPilar

  // $ANTLR start synpred73_AntlrPilar
  public final void synpred73_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:4: ( type )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:4: type
    {
      pushFollow(FOLLOW_type_in_synpred73_AntlrPilar3753);
      type();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred73_AntlrPilar

  // $ANTLR start synpred74_AntlrPilar
  public final void synpred74_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:10: ( ID )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:433:10: ID
    {
      match(input, ID, FOLLOW_ID_in_synpred74_AntlrPilar3756);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred74_AntlrPilar

  // $ANTLR start synpred75_AntlrPilar
  public final void synpred75_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:437:4: ( type )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:437:4: type
    {
      pushFollow(FOLLOW_type_in_synpred75_AntlrPilar3804);
      type();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred75_AntlrPilar

  // $ANTLR start synpred84_AntlrPilar
  public final void synpred84_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:462:6: ( transformation ( '|' transformation )* )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:462:6: transformation ( '|' transformation )*
    {
      pushFollow(FOLLOW_transformation_in_synpred84_AntlrPilar4098);
      transformation();

      state._fsp--;
      if (state.failed) return;
      // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:463:6: ( '|' transformation )*
      loop169: do {
        int alt169 = 2;
        int LA169_0 = input.LA(1);

        if ((LA169_0 == 192)) {
          alt169 = 1;
        }

        switch (alt169) {
          case 1:
          // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:463:8: '|' transformation
          {
            match(input, 192, FOLLOW_192_in_synpred84_AntlrPilar4108);
            if (state.failed) return;
            pushFollow(FOLLOW_transformation_in_synpred84_AntlrPilar4110);
            transformation();

            state._fsp--;
            if (state.failed) return;

          }
            break;

          default:
            break loop169;
        }
      } while (true);

    }
  }

  // $ANTLR end synpred84_AntlrPilar

  // $ANTLR start synpred85_AntlrPilar
  public final void synpred85_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:468:31: ( guard )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:468:31: guard
    {
      pushFollow(FOLLOW_guard_in_synpred85_AntlrPilar4197);
      guard();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred85_AntlrPilar

  // $ANTLR start synpred88_AntlrPilar
  public final void synpred88_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:4: ( action )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:486:4: action
    {
      pushFollow(FOLLOW_action_in_synpred88_AntlrPilar4412);
      action();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred88_AntlrPilar

  // $ANTLR start synpred93_AntlrPilar
  public final void synpred93_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:493:4: ( assignment )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:493:4: assignment
    {
      pushFollow(FOLLOW_assignment_in_synpred93_AntlrPilar4549);
      assignment();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred93_AntlrPilar

  // $ANTLR start synpred110_AntlrPilar
  public final void synpred110_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:565:4: ( type )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:565:4: type
    {
      pushFollow(FOLLOW_type_in_synpred110_AntlrPilar5349);
      type();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred110_AntlrPilar

  // $ANTLR start synpred113_AntlrPilar
  public final void synpred113_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:578:5: ( 'else' ifThenExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:578:5: 'else' ifThenExp
    {
      match(input, 194, FOLLOW_194_in_synpred113_AntlrPilar5485);
      if (state.failed) return;
      pushFollow(FOLLOW_ifThenExp_in_synpred113_AntlrPilar5487);
      ifThenExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred113_AntlrPilar

  // $ANTLR start synpred115_AntlrPilar
  public final void synpred115_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:580:17: ( switchCaseExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:580:17: switchCaseExp
    {
      pushFollow(FOLLOW_switchCaseExp_in_synpred115_AntlrPilar5545);
      switchCaseExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred115_AntlrPilar

  // $ANTLR start synpred116_AntlrPilar
  public final void synpred116_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:4: ( switchDefaultExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:4: switchDefaultExp
    {
      pushFollow(FOLLOW_switchDefaultExp_in_synpred116_AntlrPilar5561);
      switchDefaultExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred116_AntlrPilar

  // $ANTLR start synpred117_AntlrPilar
  public final void synpred117_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.conditionalOrExp_return c2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:604:8: (t= '==>' c2= conditionalOrExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:604:8: t= '==>' c2= conditionalOrExp
    {
      t = (Token) match(input, 211, FOLLOW_211_in_synpred117_AntlrPilar5856);
      if (state.failed) return;
      pushFollow(FOLLOW_conditionalOrExp_in_synpred117_AntlrPilar5860);
      c2 = conditionalOrExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred117_AntlrPilar

  // $ANTLR start synpred118_AntlrPilar
  public final void synpred118_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.conditionalOrExp_return c2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:605:8: (t= '<==' c2= conditionalOrExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:605:8: t= '<==' c2= conditionalOrExp
    {
      t = (Token) match(input, 212, FOLLOW_212_in_synpred118_AntlrPilar5891);
      if (state.failed) return;
      pushFollow(FOLLOW_conditionalOrExp_in_synpred118_AntlrPilar5895);
      c2 = conditionalOrExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred118_AntlrPilar

  // $ANTLR start synpred119_AntlrPilar
  public final void synpred119_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.conditionalAndExp_return c2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:611:8: (t= COND_OR_OP c2= conditionalAndExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:611:8: t= COND_OR_OP c2= conditionalAndExp
    {
      t = (Token) match(
          input,
          COND_OR_OP,
          FOLLOW_COND_OR_OP_in_synpred119_AntlrPilar5970);
      if (state.failed) return;
      pushFollow(FOLLOW_conditionalAndExp_in_synpred119_AntlrPilar5982);
      c2 = conditionalAndExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred119_AntlrPilar

  // $ANTLR start synpred120_AntlrPilar
  public final void synpred120_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.inclusiveOrExp_return i2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:618:8: (t= COND_AND_OP i2= inclusiveOrExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:618:8: t= COND_AND_OP i2= inclusiveOrExp
    {
      t = (Token) match(
          input,
          COND_AND_OP,
          FOLLOW_COND_AND_OP_in_synpred120_AntlrPilar6065);
      if (state.failed) return;
      pushFollow(FOLLOW_inclusiveOrExp_in_synpred120_AntlrPilar6069);
      i2 = inclusiveOrExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred120_AntlrPilar

  // $ANTLR start synpred121_AntlrPilar
  public final void synpred121_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.exclusiveOrExp_return e2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:8: (t= OR_OP e2= exclusiveOrExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:8: t= OR_OP e2= exclusiveOrExp
    {
      t = (Token) match(input, OR_OP, FOLLOW_OR_OP_in_synpred121_AntlrPilar6141);
      if (state.failed) return;
      pushFollow(FOLLOW_exclusiveOrExp_in_synpred121_AntlrPilar6145);
      e2 = exclusiveOrExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred121_AntlrPilar

  // $ANTLR start synpred122_AntlrPilar
  public final void synpred122_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.andExp_return a2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:631:8: (t= XOR_OP a2= andExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:631:8: t= XOR_OP a2= andExp
    {
      t = (Token) match(
          input,
          XOR_OP,
          FOLLOW_XOR_OP_in_synpred122_AntlrPilar6232);
      if (state.failed) return;
      pushFollow(FOLLOW_andExp_in_synpred122_AntlrPilar6236);
      a2 = andExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred122_AntlrPilar

  // $ANTLR start synpred123_AntlrPilar
  public final void synpred123_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.equalityExp_return e2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:8: (t= AND_OP e2= equalityExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:8: t= AND_OP e2= equalityExp
    {
      t = (Token) match(
          input,
          AND_OP,
          FOLLOW_AND_OP_in_synpred123_AntlrPilar6324);
      if (state.failed) return;
      pushFollow(FOLLOW_equalityExp_in_synpred123_AntlrPilar6328);
      e2 = equalityExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred123_AntlrPilar

  // $ANTLR start synpred124_AntlrPilar
  public final void synpred124_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.typeTestExp_return t2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:8: (t= EQ_OP t2= typeTestExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:8: t= EQ_OP t2= typeTestExp
    {
      t = (Token) match(input, EQ_OP, FOLLOW_EQ_OP_in_synpred124_AntlrPilar6411);
      if (state.failed) return;
      pushFollow(FOLLOW_typeTestExp_in_synpred124_AntlrPilar6415);
      t2 = typeTestExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred124_AntlrPilar

  // $ANTLR start synpred125_AntlrPilar
  public final void synpred125_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.relationalExp_return r2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:8: (t= COLON_OP r2= relationalExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:8: t= COLON_OP r2= relationalExp
    {
      t = (Token) match(
          input,
          COLON_OP,
          FOLLOW_COLON_OP_in_synpred125_AntlrPilar6499);
      if (state.failed) return;
      pushFollow(FOLLOW_relationalExp_in_synpred125_AntlrPilar6503);
      r2 = relationalExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred125_AntlrPilar

  // $ANTLR start synpred126_AntlrPilar
  public final void synpred126_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.shiftExp_return s2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:8: (t= REL_OP s2= shiftExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:8: t= REL_OP s2= shiftExp
    {
      t = (Token) match(
          input,
          REL_OP,
          FOLLOW_REL_OP_in_synpred126_AntlrPilar6586);
      if (state.failed) return;
      pushFollow(FOLLOW_shiftExp_in_synpred126_AntlrPilar6590);
      s2 = shiftExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred126_AntlrPilar

  // $ANTLR start synpred127_AntlrPilar
  public final void synpred127_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.shiftExp_return s2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:656:8: (t= '<' s2= shiftExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:656:8: t= '<' s2= shiftExp
    {
      t = (Token) match(input, 165, FOLLOW_165_in_synpred127_AntlrPilar6628);
      if (state.failed) return;
      pushFollow(FOLLOW_shiftExp_in_synpred127_AntlrPilar6632);
      s2 = shiftExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred127_AntlrPilar

  // $ANTLR start synpred128_AntlrPilar
  public final void synpred128_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.shiftExp_return s2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:657:8: (t= '>' s2= shiftExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:657:8: t= '>' s2= shiftExp
    {
      t = (Token) match(input, 166, FOLLOW_166_in_synpred128_AntlrPilar6673);
      if (state.failed) return;
      pushFollow(FOLLOW_shiftExp_in_synpred128_AntlrPilar6677);
      s2 = shiftExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred128_AntlrPilar

  // $ANTLR start synpred129_AntlrPilar
  public final void synpred129_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.additiveExp_return a2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:8: (t= SHIFT_OP a2= additiveExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:8: t= SHIFT_OP a2= additiveExp
    {
      t = (Token) match(
          input,
          SHIFT_OP,
          FOLLOW_SHIFT_OP_in_synpred129_AntlrPilar6766);
      if (state.failed) return;
      pushFollow(FOLLOW_additiveExp_in_synpred129_AntlrPilar6770);
      a2 = additiveExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred129_AntlrPilar

  // $ANTLR start synpred130_AntlrPilar
  public final void synpred130_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.multiplicativeExp_return m2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:8: (t= ADD_OP m2= multiplicativeExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:8: t= ADD_OP m2= multiplicativeExp
    {
      t = (Token) match(
          input,
          ADD_OP,
          FOLLOW_ADD_OP_in_synpred130_AntlrPilar6845);
      if (state.failed) return;
      pushFollow(FOLLOW_multiplicativeExp_in_synpred130_AntlrPilar6849);
      m2 = multiplicativeExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred130_AntlrPilar

  // $ANTLR start synpred131_AntlrPilar
  public final void synpred131_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.unaryExp_return u2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:8: (t= MUL_OP u2= unaryExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:8: t= MUL_OP u2= unaryExp
    {
      t = (Token) match(
          input,
          MUL_OP,
          FOLLOW_MUL_OP_in_synpred131_AntlrPilar6931);
      if (state.failed) return;
      pushFollow(FOLLOW_unaryExp_in_synpred131_AntlrPilar6935);
      u2 = unaryExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred131_AntlrPilar

  // $ANTLR start synpred132_AntlrPilar
  public final void synpred132_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.unaryExp_return u2 = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:676:8: (t= '*' u2= unaryExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:676:8: t= '*' u2= unaryExp
    {
      t = (Token) match(input, 213, FOLLOW_213_in_synpred132_AntlrPilar6973);
      if (state.failed) return;
      pushFollow(FOLLOW_unaryExp_in_synpred132_AntlrPilar6977);
      u2 = unaryExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred132_AntlrPilar

  // $ANTLR start synpred137_AntlrPilar
  public final void synpred137_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:689:4: (t= '(' type ')' primaryExp )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:689:4: t= '(' type ')' primaryExp
    {
      t = (Token) match(input, 167, FOLLOW_167_in_synpred137_AntlrPilar7207);
      if (state.failed) return;
      pushFollow(FOLLOW_type_in_synpred137_AntlrPilar7209);
      type();

      state._fsp--;
      if (state.failed) return;
      match(input, 168, FOLLOW_168_in_synpred137_AntlrPilar7211);
      if (state.failed) return;
      pushFollow(FOLLOW_primaryExp_in_synpred137_AntlrPilar7213);
      primaryExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred137_AntlrPilar

  // $ANTLR start synpred138_AntlrPilar
  public final void synpred138_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:8: (t= '[' expList ']' )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:8: t= '[' expList ']'
    {
      t = (Token) match(input, 200, FOLLOW_200_in_synpred138_AntlrPilar7296);
      if (state.failed) return;
      pushFollow(FOLLOW_expList_in_synpred138_AntlrPilar7298);
      expList();

      state._fsp--;
      if (state.failed) return;
      match(input, 201, FOLLOW_201_in_synpred138_AntlrPilar7300);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred138_AntlrPilar

  // $ANTLR start synpred139_AntlrPilar
  public final void synpred139_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:696:8: (t= '.' ID )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:696:8: t= '.' ID
    {
      t = (Token) match(input, 214, FOLLOW_214_in_synpred139_AntlrPilar7338);
      if (state.failed) return;
      match(input, ID, FOLLOW_ID_in_synpred139_AntlrPilar7340);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred139_AntlrPilar

  // $ANTLR start synpred140_AntlrPilar
  public final void synpred140_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:697:8: ( callArg )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:697:8: callArg
    {
      pushFollow(FOLLOW_callArg_in_synpred140_AntlrPilar7385);
      callArg();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred140_AntlrPilar

  // $ANTLR start synpred142_AntlrPilar
  public final void synpred142_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:707:8: (t= '[' expList ']' )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:707:8: t= '[' expList ']'
    {
      t = (Token) match(input, 200, FOLLOW_200_in_synpred142_AntlrPilar7533);
      if (state.failed) return;
      pushFollow(FOLLOW_expList_in_synpred142_AntlrPilar7535);
      expList();

      state._fsp--;
      if (state.failed) return;
      match(input, 201, FOLLOW_201_in_synpred142_AntlrPilar7537);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred142_AntlrPilar

  // $ANTLR start synpred143_AntlrPilar
  public final void synpred143_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:8: (t= '.' ID )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:8: t= '.' ID
    {
      t = (Token) match(input, 214, FOLLOW_214_in_synpred143_AntlrPilar7575);
      if (state.failed) return;
      match(input, ID, FOLLOW_ID_in_synpred143_AntlrPilar7577);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred143_AntlrPilar

  // $ANTLR start synpred147_AntlrPilar
  public final void synpred147_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:716:4: ( newListRanged )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:716:4: newListRanged
    {
      pushFollow(FOLLOW_newListRanged_in_synpred147_AntlrPilar7649);
      newListRanged();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred147_AntlrPilar

  // $ANTLR start synpred148_AntlrPilar
  public final void synpred148_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:717:4: ( newList )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:717:4: newList
    {
      pushFollow(FOLLOW_newList_in_synpred148_AntlrPilar7654);
      newList();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred148_AntlrPilar

  // $ANTLR start synpred149_AntlrPilar
  public final void synpred149_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:718:4: ( newMultiArray )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:718:4: newMultiArray
    {
      pushFollow(FOLLOW_newMultiArray_in_synpred149_AntlrPilar7659);
      newMultiArray();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred149_AntlrPilar

  // $ANTLR start synpred150_AntlrPilar
  public final void synpred150_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:719:4: ( newRecord )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:719:4: newRecord
    {
      pushFollow(FOLLOW_newRecord_in_synpred150_AntlrPilar7664);
      newRecord();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred150_AntlrPilar

  // $ANTLR start synpred151_AntlrPilar
  public final void synpred151_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:720:4: ( newSet )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:720:4: newSet
    {
      pushFollow(FOLLOW_newSet_in_synpred151_AntlrPilar7669);
      newSet();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred151_AntlrPilar

  // $ANTLR start synpred152_AntlrPilar
  public final void synpred152_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:721:4: ( newFunction )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:721:4: newFunction
    {
      pushFollow(FOLLOW_newFunction_in_synpred152_AntlrPilar7674);
      newFunction();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred152_AntlrPilar

  // $ANTLR start synpred153_AntlrPilar
  public final void synpred153_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:722:4: (t= '`' type )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:722:4: t= '`' type
    {
      t = (Token) match(input, 215, FOLLOW_215_in_synpred153_AntlrPilar7682);
      if (state.failed) return;
      pushFollow(FOLLOW_type_in_synpred153_AntlrPilar7684);
      type();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred153_AntlrPilar

  // $ANTLR start synpred171_AntlrPilar
  public final void synpred171_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:768:4: ( newMultiArrayTypeFragment )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:768:4: newMultiArrayTypeFragment
    {
      pushFollow(FOLLOW_newMultiArrayTypeFragment_in_synpred171_AntlrPilar8526);
      newMultiArrayTypeFragment();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred171_AntlrPilar

  // $ANTLR start synpred172_AntlrPilar
  public final void synpred172_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:4: ( typeFragment )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:4: typeFragment
    {
      pushFollow(FOLLOW_typeFragment_in_synpred172_AntlrPilar8532);
      typeFragment();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred172_AntlrPilar

  // $ANTLR start synpred194_AntlrPilar
  public final void synpred194_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:851:13: ( typeFragment )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:851:13: typeFragment
    {
      pushFollow(FOLLOW_typeFragment_in_synpred194_AntlrPilar9666);
      typeFragment();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred194_AntlrPilar

  // $ANTLR start synpred200_AntlrPilar
  public final void synpred200_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:11: ( '.' ID )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:11: '.' ID
    {
      match(input, 214, FOLLOW_214_in_synpred200_AntlrPilar9939);
      if (state.failed) return;
      match(input, ID, FOLLOW_ID_in_synpred200_AntlrPilar9941);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred200_AntlrPilar

  // $ANTLR start synpred201_AntlrPilar
  public final void synpred201_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:20: ( typeTuple )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:20: typeTuple
    {
      pushFollow(FOLLOW_typeTuple_in_synpred201_AntlrPilar9945);
      typeTuple();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred201_AntlrPilar

  // $ANTLR start synpred203_AntlrPilar
  public final void synpred203_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:864:4: ( procedureType )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:864:4: procedureType
    {
      pushFollow(FOLLOW_procedureType_in_synpred203_AntlrPilar9983);
      procedureType();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred203_AntlrPilar

  // $ANTLR start synpred204_AntlrPilar
  public final void synpred204_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:865:4: ( tupleType )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:865:4: tupleType
    {
      pushFollow(FOLLOW_tupleType_in_synpred204_AntlrPilar9988);
      tupleType();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred204_AntlrPilar

  // $ANTLR start synpred205_AntlrPilar
  public final void synpred205_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:866:4: ( functionType )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:866:4: functionType
    {
      pushFollow(FOLLOW_functionType_in_synpred205_AntlrPilar9993);
      functionType();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred205_AntlrPilar

  // $ANTLR start synpred206_AntlrPilar
  public final void synpred206_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:9: ( procedureTypeParamVariable )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:9: procedureTypeParamVariable
    {
      pushFollow(FOLLOW_procedureTypeParamVariable_in_synpred206_AntlrPilar10022);
      procedureTypeParamVariable();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred206_AntlrPilar

  // $ANTLR start synpred207_AntlrPilar
  public final void synpred207_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:874:11: ( ',' typeParam )
    // /Users/robby/Repositories/sireum-internal/sireumv2/codebase/core/sireum-pilar/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:874:11: ',' typeParam
    {
      match(input, 170, FOLLOW_170_in_synpred207_AntlrPilar10045);
      if (state.failed) return;
      pushFollow(FOLLOW_typeParam_in_synpred207_AntlrPilar10047);
      typeParam();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred207_AntlrPilar

  // Delegated rules

  public final boolean synpred207_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred207_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred73_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred73_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred88_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred88_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred204_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred204_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred147_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred147_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred122_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred122_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred127_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred127_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred85_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred85_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred143_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred143_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred123_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred123_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred131_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred131_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred120_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred120_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred201_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred201_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred84_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred84_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred126_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred126_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred113_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred113_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred151_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred151_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred46_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred46_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred203_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred203_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred205_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred205_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred150_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred150_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred119_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred119_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred9_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred9_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred128_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred128_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred206_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred206_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred74_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred74_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred75_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred75_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred149_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred149_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred70_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred70_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred4_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred4_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred129_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred129_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred125_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred125_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred139_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred139_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred117_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred117_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred12_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred12_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred200_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred200_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred138_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred138_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred194_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred194_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred116_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred116_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred132_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred132_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred142_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred142_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred153_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred153_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred172_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred172_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred171_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred171_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred115_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred115_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred110_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred110_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred11_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred11_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred148_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred148_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred124_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred124_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred121_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred121_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred42_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred42_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred152_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred152_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred130_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred130_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred137_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred137_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred140_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred140_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred118_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred118_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred93_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred93_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  protected DFA4 dfa4 = new DFA4(this);
  protected DFA9 dfa9 = new DFA9(this);
  protected DFA12 dfa12 = new DFA12(this);
  protected DFA11 dfa11 = new DFA11(this);
  protected DFA60 dfa60 = new DFA60(this);
  protected DFA61 dfa61 = new DFA61(this);
  protected DFA73 dfa73 = new DFA73(this);
  protected DFA76 dfa76 = new DFA76(this);
  protected DFA78 dfa78 = new DFA78(this);
  protected DFA87 dfa87 = new DFA87(this);
  protected DFA110 dfa110 = new DFA110(this);
  protected DFA111 dfa111 = new DFA111(this);
  protected DFA114 dfa114 = new DFA114(this);
  protected DFA115 dfa115 = new DFA115(this);
  protected DFA121 dfa121 = new DFA121(this);
  protected DFA122 dfa122 = new DFA122(this);
  protected DFA144 dfa144 = new DFA144(this);
  protected DFA148 dfa148 = new DFA148(this);
  static final String DFA4_eotS = "\102\uffff";
  static final String DFA4_eofS = "\1\14\101\uffff";
  static final String DFA4_minS = "\1\113\77\0\2\uffff";
  static final String DFA4_maxS = "\1\u00e0\77\0\2\uffff";
  static final String DFA4_acceptS = "\100\uffff\1\2\1\1";
  static final String DFA4_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"
      + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
      + "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"
      + "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"
      + "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\2\uffff}>";
  static final String[] DFA4_transitionS = {
      "\1\46\1\50\1\47\56\uffff\1\27\1\26\1\57\1\73\1\75\11\uffff\1"
          + "\37\1\40\1\36\1\45\1\54\1\55\1\56\1\51\1\52\1\53\21\uffff\1"
          + "\100\1\22\1\30\1\24\1\1\1\17\1\23\1\13\1\15\1\2\1\16\1\20\1"
          + "\3\1\4\1\5\1\21\1\6\1\7\1\31\1\10\1\11\1\12\5\uffff\1\71\1\32"
          + "\1\uffff\1\33\1\34\1\35\1\74\1\65\2\uffff\1\64\1\70\1\66\1\67"
          + "\1\63\1\uffff\1\25\1\72\3\uffff\1\41\1\uffff\1\60\1\42\1\43"
          + "\1\44\1\61\1\76\1\62\2\uffff\1\77", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "", "" };

  static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
  static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
  static final char[] DFA4_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA4_minS);
  static final char[] DFA4_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA4_maxS);
  static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
  static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
  static final short[][] DFA4_transition;

  static {
    int numStates = DFA4_transitionS.length;
    DFA4_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
    }
  }

  class DFA4 extends DFA {

    public DFA4(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 4;
      this.eot = DFA4_eot;
      this.eof = DFA4_eof;
      this.min = DFA4_min;
      this.max = DFA4_max;
      this.accept = DFA4_accept;
      this.special = DFA4_special;
      this.transition = DFA4_transition;
    }

    public String getDescription() {
      return "210:1: annotationList : ( ( annotation )* -> ^( LIST ( annotation )* ) | angleGroupedAnnotationList -> angleGroupedAnnotationList );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA4_1 = input.LA(1);

          int index4_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA4_2 = input.LA(1);

          int index4_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA4_3 = input.LA(1);

          int index4_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA4_4 = input.LA(1);

          int index4_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_4);
          if (s >= 0) return s;
          break;
        case 4:
          int LA4_5 = input.LA(1);

          int index4_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_5);
          if (s >= 0) return s;
          break;
        case 5:
          int LA4_6 = input.LA(1);

          int index4_6 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_6);
          if (s >= 0) return s;
          break;
        case 6:
          int LA4_7 = input.LA(1);

          int index4_7 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_7);
          if (s >= 0) return s;
          break;
        case 7:
          int LA4_8 = input.LA(1);

          int index4_8 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_8);
          if (s >= 0) return s;
          break;
        case 8:
          int LA4_9 = input.LA(1);

          int index4_9 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_9);
          if (s >= 0) return s;
          break;
        case 9:
          int LA4_10 = input.LA(1);

          int index4_10 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_10);
          if (s >= 0) return s;
          break;
        case 10:
          int LA4_11 = input.LA(1);

          int index4_11 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_11);
          if (s >= 0) return s;
          break;
        case 11:
          int LA4_12 = input.LA(1);

          int index4_12 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_12);
          if (s >= 0) return s;
          break;
        case 12:
          int LA4_13 = input.LA(1);

          int index4_13 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_13);
          if (s >= 0) return s;
          break;
        case 13:
          int LA4_14 = input.LA(1);

          int index4_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_14);
          if (s >= 0) return s;
          break;
        case 14:
          int LA4_15 = input.LA(1);

          int index4_15 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_15);
          if (s >= 0) return s;
          break;
        case 15:
          int LA4_16 = input.LA(1);

          int index4_16 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_16);
          if (s >= 0) return s;
          break;
        case 16:
          int LA4_17 = input.LA(1);

          int index4_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_17);
          if (s >= 0) return s;
          break;
        case 17:
          int LA4_18 = input.LA(1);

          int index4_18 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_18);
          if (s >= 0) return s;
          break;
        case 18:
          int LA4_19 = input.LA(1);

          int index4_19 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_19);
          if (s >= 0) return s;
          break;
        case 19:
          int LA4_20 = input.LA(1);

          int index4_20 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_20);
          if (s >= 0) return s;
          break;
        case 20:
          int LA4_21 = input.LA(1);

          int index4_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_21);
          if (s >= 0) return s;
          break;
        case 21:
          int LA4_22 = input.LA(1);

          int index4_22 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_22);
          if (s >= 0) return s;
          break;
        case 22:
          int LA4_23 = input.LA(1);

          int index4_23 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_23);
          if (s >= 0) return s;
          break;
        case 23:
          int LA4_24 = input.LA(1);

          int index4_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_24);
          if (s >= 0) return s;
          break;
        case 24:
          int LA4_25 = input.LA(1);

          int index4_25 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_25);
          if (s >= 0) return s;
          break;
        case 25:
          int LA4_26 = input.LA(1);

          int index4_26 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_26);
          if (s >= 0) return s;
          break;
        case 26:
          int LA4_27 = input.LA(1);

          int index4_27 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_27);
          if (s >= 0) return s;
          break;
        case 27:
          int LA4_28 = input.LA(1);

          int index4_28 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_28);
          if (s >= 0) return s;
          break;
        case 28:
          int LA4_29 = input.LA(1);

          int index4_29 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_29);
          if (s >= 0) return s;
          break;
        case 29:
          int LA4_30 = input.LA(1);

          int index4_30 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_30);
          if (s >= 0) return s;
          break;
        case 30:
          int LA4_31 = input.LA(1);

          int index4_31 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_31);
          if (s >= 0) return s;
          break;
        case 31:
          int LA4_32 = input.LA(1);

          int index4_32 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_32);
          if (s >= 0) return s;
          break;
        case 32:
          int LA4_33 = input.LA(1);

          int index4_33 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_33);
          if (s >= 0) return s;
          break;
        case 33:
          int LA4_34 = input.LA(1);

          int index4_34 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_34);
          if (s >= 0) return s;
          break;
        case 34:
          int LA4_35 = input.LA(1);

          int index4_35 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_35);
          if (s >= 0) return s;
          break;
        case 35:
          int LA4_36 = input.LA(1);

          int index4_36 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_36);
          if (s >= 0) return s;
          break;
        case 36:
          int LA4_37 = input.LA(1);

          int index4_37 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_37);
          if (s >= 0) return s;
          break;
        case 37:
          int LA4_38 = input.LA(1);

          int index4_38 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_38);
          if (s >= 0) return s;
          break;
        case 38:
          int LA4_39 = input.LA(1);

          int index4_39 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_39);
          if (s >= 0) return s;
          break;
        case 39:
          int LA4_40 = input.LA(1);

          int index4_40 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_40);
          if (s >= 0) return s;
          break;
        case 40:
          int LA4_41 = input.LA(1);

          int index4_41 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_41);
          if (s >= 0) return s;
          break;
        case 41:
          int LA4_42 = input.LA(1);

          int index4_42 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_42);
          if (s >= 0) return s;
          break;
        case 42:
          int LA4_43 = input.LA(1);

          int index4_43 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_43);
          if (s >= 0) return s;
          break;
        case 43:
          int LA4_44 = input.LA(1);

          int index4_44 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_44);
          if (s >= 0) return s;
          break;
        case 44:
          int LA4_45 = input.LA(1);

          int index4_45 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_45);
          if (s >= 0) return s;
          break;
        case 45:
          int LA4_46 = input.LA(1);

          int index4_46 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_46);
          if (s >= 0) return s;
          break;
        case 46:
          int LA4_47 = input.LA(1);

          int index4_47 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_47);
          if (s >= 0) return s;
          break;
        case 47:
          int LA4_48 = input.LA(1);

          int index4_48 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_48);
          if (s >= 0) return s;
          break;
        case 48:
          int LA4_49 = input.LA(1);

          int index4_49 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_49);
          if (s >= 0) return s;
          break;
        case 49:
          int LA4_50 = input.LA(1);

          int index4_50 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_50);
          if (s >= 0) return s;
          break;
        case 50:
          int LA4_51 = input.LA(1);

          int index4_51 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_51);
          if (s >= 0) return s;
          break;
        case 51:
          int LA4_52 = input.LA(1);

          int index4_52 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_52);
          if (s >= 0) return s;
          break;
        case 52:
          int LA4_53 = input.LA(1);

          int index4_53 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_53);
          if (s >= 0) return s;
          break;
        case 53:
          int LA4_54 = input.LA(1);

          int index4_54 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_54);
          if (s >= 0) return s;
          break;
        case 54:
          int LA4_55 = input.LA(1);

          int index4_55 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_55);
          if (s >= 0) return s;
          break;
        case 55:
          int LA4_56 = input.LA(1);

          int index4_56 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_56);
          if (s >= 0) return s;
          break;
        case 56:
          int LA4_57 = input.LA(1);

          int index4_57 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_57);
          if (s >= 0) return s;
          break;
        case 57:
          int LA4_58 = input.LA(1);

          int index4_58 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_58);
          if (s >= 0) return s;
          break;
        case 58:
          int LA4_59 = input.LA(1);

          int index4_59 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_59);
          if (s >= 0) return s;
          break;
        case 59:
          int LA4_60 = input.LA(1);

          int index4_60 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_60);
          if (s >= 0) return s;
          break;
        case 60:
          int LA4_61 = input.LA(1);

          int index4_61 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_61);
          if (s >= 0) return s;
          break;
        case 61:
          int LA4_62 = input.LA(1);

          int index4_62 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_62);
          if (s >= 0) return s;
          break;
        case 62:
          int LA4_63 = input.LA(1);

          int index4_63 = input.index();
          input.rewind();
          s = -1;
          if ((synpred4_AntlrPilar())) {
            s = 65;
          }

          else if ((true)) {
            s = 64;
          }

          input.seek(index4_63);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(), 4,
          _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA9_eotS = "\101\uffff";
  static final String DFA9_eofS = "\1\33\100\uffff";
  static final String DFA9_minS = "\1\113\32\0\46\uffff";
  static final String DFA9_maxS = "\1\u00e0\32\0\46\uffff";
  static final String DFA9_acceptS = "\33\uffff\1\2\44\uffff\1\1";
  static final String DFA9_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"
      + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
      + "\46\uffff}>";
  static final String[] DFA9_transitionS = {
      "\1\12\1\14\1\13\56\uffff\1\23\1\33\1\24\2\33\11\uffff\1\3\1"
          + "\4\1\2\1\11\1\20\1\21\1\22\1\15\1\16\1\17\22\uffff\1\33\1\1"
          + "\7\33\1\27\13\33\5\uffff\2\33\1\uffff\5\33\2\uffff\1\32\3\33"
          + "\1\31\1\uffff\2\33\3\uffff\1\5\1\uffff\1\25\1\6\1\7\1\10\1\26"
          + "\1\33\1\30\2\uffff\1\33", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
  static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
  static final char[] DFA9_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA9_minS);
  static final char[] DFA9_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA9_maxS);
  static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
  static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
  static final short[][] DFA9_transition;

  static {
    int numStates = DFA9_transitionS.length;
    DFA9_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
    }
  }

  class DFA9 extends DFA {

    public DFA9(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 9;
      this.eot = DFA9_eot;
      this.eof = DFA9_eof;
      this.min = DFA9_min;
      this.max = DFA9_max;
      this.accept = DFA9_accept;
      this.special = DFA9_special;
      this.transition = DFA9_transition;
    }

    public String getDescription() {
      return "226:13: ( annotationParams )?";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA9_1 = input.LA(1);

          int index9_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA9_2 = input.LA(1);

          int index9_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA9_3 = input.LA(1);

          int index9_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA9_4 = input.LA(1);

          int index9_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_4);
          if (s >= 0) return s;
          break;
        case 4:
          int LA9_5 = input.LA(1);

          int index9_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_5);
          if (s >= 0) return s;
          break;
        case 5:
          int LA9_6 = input.LA(1);

          int index9_6 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_6);
          if (s >= 0) return s;
          break;
        case 6:
          int LA9_7 = input.LA(1);

          int index9_7 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_7);
          if (s >= 0) return s;
          break;
        case 7:
          int LA9_8 = input.LA(1);

          int index9_8 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_8);
          if (s >= 0) return s;
          break;
        case 8:
          int LA9_9 = input.LA(1);

          int index9_9 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_9);
          if (s >= 0) return s;
          break;
        case 9:
          int LA9_10 = input.LA(1);

          int index9_10 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_10);
          if (s >= 0) return s;
          break;
        case 10:
          int LA9_11 = input.LA(1);

          int index9_11 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_11);
          if (s >= 0) return s;
          break;
        case 11:
          int LA9_12 = input.LA(1);

          int index9_12 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_12);
          if (s >= 0) return s;
          break;
        case 12:
          int LA9_13 = input.LA(1);

          int index9_13 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_13);
          if (s >= 0) return s;
          break;
        case 13:
          int LA9_14 = input.LA(1);

          int index9_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_14);
          if (s >= 0) return s;
          break;
        case 14:
          int LA9_15 = input.LA(1);

          int index9_15 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_15);
          if (s >= 0) return s;
          break;
        case 15:
          int LA9_16 = input.LA(1);

          int index9_16 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_16);
          if (s >= 0) return s;
          break;
        case 16:
          int LA9_17 = input.LA(1);

          int index9_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_17);
          if (s >= 0) return s;
          break;
        case 17:
          int LA9_18 = input.LA(1);

          int index9_18 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_18);
          if (s >= 0) return s;
          break;
        case 18:
          int LA9_19 = input.LA(1);

          int index9_19 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_19);
          if (s >= 0) return s;
          break;
        case 19:
          int LA9_20 = input.LA(1);

          int index9_20 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_20);
          if (s >= 0) return s;
          break;
        case 20:
          int LA9_21 = input.LA(1);

          int index9_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_21);
          if (s >= 0) return s;
          break;
        case 21:
          int LA9_22 = input.LA(1);

          int index9_22 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_22);
          if (s >= 0) return s;
          break;
        case 22:
          int LA9_23 = input.LA(1);

          int index9_23 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_23);
          if (s >= 0) return s;
          break;
        case 23:
          int LA9_24 = input.LA(1);

          int index9_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_24);
          if (s >= 0) return s;
          break;
        case 24:
          int LA9_25 = input.LA(1);

          int index9_25 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_25);
          if (s >= 0) return s;
          break;
        case 25:
          int LA9_26 = input.LA(1);

          int index9_26 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_26);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(), 9,
          _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA12_eotS = "\34\uffff";
  static final String DFA12_eofS = "\34\uffff";
  static final String DFA12_minS = "\1\113\1\0\32\uffff";
  static final String DFA12_maxS = "\1\u00dd\1\0\32\uffff";
  static final String DFA12_acceptS = "\2\uffff\1\2\30\uffff\1\1";
  static final String DFA12_specialS = "\1\uffff\1\0\32\uffff}>";
  static final String[] DFA12_transitionS = {
      "\3\2\56\uffff\1\2\1\uffff\1\2\13\uffff\12\2\23\uffff\1\1\7\uffff"
          + "\1\2\32\uffff\1\2\3\uffff\1\2\6\uffff\1\2\1\uffff\5\2\1\uffff"
          + "\1\2", "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
  static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
  static final char[] DFA12_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA12_minS);
  static final char[] DFA12_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA12_maxS);
  static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
  static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
  static final short[][] DFA12_transition;

  static {
    int numStates = DFA12_transitionS.length;
    DFA12_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
    }
  }

  class DFA12 extends DFA {

    public DFA12(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 12;
      this.eot = DFA12_eot;
      this.eof = DFA12_eof;
      this.min = DFA12_min;
      this.max = DFA12_max;
      this.accept = DFA12_accept;
      this.special = DFA12_special;
      this.transition = DFA12_transition;
    }

    public String getDescription() {
      return "229:1: annotationParams : (t= '(' annotationParam ( ',' annotationParam )* ')' -> ^( LIST[$t] ( annotationParam )+ ) | exp ( ',' exp )* -> ^( LIST ( exp )+ ) );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA12_1 = input.LA(1);

          int index12_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred11_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index12_1);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          12, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA11_eotS = "\101\uffff";
  static final String DFA11_eofS = "\1\1\100\uffff";
  static final String DFA11_minS = "\1\113\15\uffff\1\0\62\uffff";
  static final String DFA11_maxS = "\1\u00e0\15\uffff\1\0\62\uffff";
  static final String DFA11_acceptS = "\1\uffff\1\2\76\uffff\1\1";
  static final String DFA11_specialS = "\16\uffff\1\0\62\uffff}>";
  static final String[] DFA11_transitionS = {
      "\3\1\56\uffff\5\1\11\uffff\12\1\22\uffff\4\1\1\16\20\1\5\uffff"
          + "\2\1\1\uffff\5\1\2\uffff\5\1\1\uffff\2\1\3\uffff\1\1\1\uffff"
          + "\7\1\2\uffff\1\1", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
  static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
  static final char[] DFA11_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA11_minS);
  static final char[] DFA11_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA11_maxS);
  static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
  static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
  static final short[][] DFA11_transition;

  static {
    int numStates = DFA11_transitionS.length;
    DFA11_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
    }
  }

  class DFA11 extends DFA {

    public DFA11(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 11;
      this.eot = DFA11_eot;
      this.eof = DFA11_eof;
      this.min = DFA11_min;
      this.max = DFA11_max;
      this.accept = DFA11_accept;
      this.special = DFA11_special;
      this.transition = DFA11_transition;
    }

    public String getDescription() {
      return "()* loopback of 232:8: ( ',' exp )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA11_14 = input.LA(1);

          int index11_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred12_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index11_14);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          11, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA60_eotS = "\13\uffff";
  static final String DFA60_eofS = "\13\uffff";
  static final String DFA60_minS = "\1\174\5\0\5\uffff";
  static final String DFA60_maxS = "\1\u00b7\5\0\5\uffff";
  static final String DFA60_acceptS = "\6\uffff\1\2\3\uffff\1\1";
  static final String DFA60_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\5\uffff}>";
  static final String[] DFA60_transitionS = {
      "\1\2\1\1\47\uffff\1\6\1\uffff\1\3\3\6\4\uffff\1\4\7\uffff\1" + "\5",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "",
      "", "" };

  static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
  static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
  static final char[] DFA60_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA60_minS);
  static final char[] DFA60_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA60_maxS);
  static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
  static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
  static final short[][] DFA60_transition;

  static {
    int numStates = DFA60_transitionS.length;
    DFA60_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
    }
  }

  class DFA60 extends DFA {

    public DFA60(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 60;
      this.eot = DFA60_eot;
      this.eof = DFA60_eof;
      this.min = DFA60_min;
      this.max = DFA60_max;
      this.accept = DFA60_accept;
      this.special = DFA60_special;
      this.transition = DFA60_transition;
    }

    public String getDescription() {
      return "426:1: extParamList : ( extParamVariable -> ^( LIST ( extParamVariable )? ) | extParam ( ',' extParam )* ( extParamVariable )? -> ^( LIST ( extParam )+ ( extParamVariable )? ) );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA60_1 = input.LA(1);

          int index60_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA60_2 = input.LA(1);

          int index60_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA60_3 = input.LA(1);

          int index60_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA60_4 = input.LA(1);

          int index60_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_4);
          if (s >= 0) return s;
          break;
        case 4:
          int LA60_5 = input.LA(1);

          int index60_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_5);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          60, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA61_eotS = "\14\uffff";
  static final String DFA61_eofS = "\1\5\13\uffff";
  static final String DFA61_minS = "\1\174\4\0\7\uffff";
  static final String DFA61_maxS = "\1\u00b7\4\0\7\uffff";
  static final String DFA61_acceptS = "\5\uffff\1\2\5\uffff\1\1";
  static final String DFA61_specialS = "\1\uffff\1\0\1\1\1\2\1\3\7\uffff}>";
  static final String[] DFA61_transitionS = {
      "\1\2\1\1\47\uffff\1\5\1\uffff\1\3\3\5\4\uffff\1\4\7\uffff\1" + "\5",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "", "", "", "",
      "" };

  static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
  static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
  static final char[] DFA61_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA61_minS);
  static final char[] DFA61_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA61_maxS);
  static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
  static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
  static final short[][] DFA61_transition;

  static {
    int numStates = DFA61_transitionS.length;
    DFA61_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
    }
  }

  class DFA61 extends DFA {

    public DFA61(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 61;
      this.eot = DFA61_eot;
      this.eof = DFA61_eof;
      this.min = DFA61_min;
      this.max = DFA61_max;
      this.accept = DFA61_accept;
      this.special = DFA61_special;
      this.transition = DFA61_transition;
    }

    public String getDescription() {
      return "433:4: ( type )?";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA61_1 = input.LA(1);

          int index61_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred73_AntlrPilar())) {
            s = 11;
          }

          else if ((true)) {
            s = 5;
          }

          input.seek(index61_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA61_2 = input.LA(1);

          int index61_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred73_AntlrPilar())) {
            s = 11;
          }

          else if ((true)) {
            s = 5;
          }

          input.seek(index61_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA61_3 = input.LA(1);

          int index61_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred73_AntlrPilar())) {
            s = 11;
          }

          else if ((true)) {
            s = 5;
          }

          input.seek(index61_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA61_4 = input.LA(1);

          int index61_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred73_AntlrPilar())) {
            s = 11;
          }

          else if ((true)) {
            s = 5;
          }

          input.seek(index61_4);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          61, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA73_eotS = "\50\uffff";
  static final String DFA73_eofS = "\1\34\47\uffff";
  static final String DFA73_minS = "\1\113\32\0\15\uffff";
  static final String DFA73_maxS = "\1\u00dd\32\0\15\uffff";
  static final String DFA73_acceptS = "\33\uffff\1\1\1\2\13\uffff";
  static final String DFA73_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"
      + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
      + "\15\uffff}>";
  static final String[] DFA73_transitionS = {
      "\1\12\1\14\1\13\56\uffff\1\23\1\uffff\1\24\1\34\12\uffff\1\2"
          + "\1\3\1\1\1\11\1\20\1\21\1\22\1\15\1\16\1\17\23\uffff\1\5\7\uffff"
          + "\1\27\1\34\17\uffff\1\34\1\uffff\1\33\3\34\1\uffff\1\34\2\uffff"
          + "\1\32\3\34\1\31\2\uffff\1\34\3\uffff\1\4\1\uffff\1\25\1\6\1"
          + "\7\1\10\1\26\1\uffff\1\30", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "",
      "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
  static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
  static final char[] DFA73_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA73_minS);
  static final char[] DFA73_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA73_maxS);
  static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
  static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
  static final short[][] DFA73_transition;

  static {
    int numStates = DFA73_transitionS.length;
    DFA73_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
    }
  }

  class DFA73 extends DFA {

    public DFA73(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 73;
      this.eot = DFA73_eot;
      this.eof = DFA73_eof;
      this.min = DFA73_min;
      this.max = DFA73_max;
      this.accept = DFA73_accept;
      this.special = DFA73_special;
      this.transition = DFA73_transition;
    }

    public String getDescription() {
      return "468:31: ( guard )?";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA73_1 = input.LA(1);

          int index73_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA73_2 = input.LA(1);

          int index73_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA73_3 = input.LA(1);

          int index73_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA73_4 = input.LA(1);

          int index73_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_4);
          if (s >= 0) return s;
          break;
        case 4:
          int LA73_5 = input.LA(1);

          int index73_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_5);
          if (s >= 0) return s;
          break;
        case 5:
          int LA73_6 = input.LA(1);

          int index73_6 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_6);
          if (s >= 0) return s;
          break;
        case 6:
          int LA73_7 = input.LA(1);

          int index73_7 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_7);
          if (s >= 0) return s;
          break;
        case 7:
          int LA73_8 = input.LA(1);

          int index73_8 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_8);
          if (s >= 0) return s;
          break;
        case 8:
          int LA73_9 = input.LA(1);

          int index73_9 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_9);
          if (s >= 0) return s;
          break;
        case 9:
          int LA73_10 = input.LA(1);

          int index73_10 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_10);
          if (s >= 0) return s;
          break;
        case 10:
          int LA73_11 = input.LA(1);

          int index73_11 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_11);
          if (s >= 0) return s;
          break;
        case 11:
          int LA73_12 = input.LA(1);

          int index73_12 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_12);
          if (s >= 0) return s;
          break;
        case 12:
          int LA73_13 = input.LA(1);

          int index73_13 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_13);
          if (s >= 0) return s;
          break;
        case 13:
          int LA73_14 = input.LA(1);

          int index73_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_14);
          if (s >= 0) return s;
          break;
        case 14:
          int LA73_15 = input.LA(1);

          int index73_15 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_15);
          if (s >= 0) return s;
          break;
        case 15:
          int LA73_16 = input.LA(1);

          int index73_16 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_16);
          if (s >= 0) return s;
          break;
        case 16:
          int LA73_17 = input.LA(1);

          int index73_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_17);
          if (s >= 0) return s;
          break;
        case 17:
          int LA73_18 = input.LA(1);

          int index73_18 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_18);
          if (s >= 0) return s;
          break;
        case 18:
          int LA73_19 = input.LA(1);

          int index73_19 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_19);
          if (s >= 0) return s;
          break;
        case 19:
          int LA73_20 = input.LA(1);

          int index73_20 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_20);
          if (s >= 0) return s;
          break;
        case 20:
          int LA73_21 = input.LA(1);

          int index73_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_21);
          if (s >= 0) return s;
          break;
        case 21:
          int LA73_22 = input.LA(1);

          int index73_22 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_22);
          if (s >= 0) return s;
          break;
        case 22:
          int LA73_23 = input.LA(1);

          int index73_23 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_23);
          if (s >= 0) return s;
          break;
        case 23:
          int LA73_24 = input.LA(1);

          int index73_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_24);
          if (s >= 0) return s;
          break;
        case 24:
          int LA73_25 = input.LA(1);

          int index73_25 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_25);
          if (s >= 0) return s;
          break;
        case 25:
          int LA73_26 = input.LA(1);

          int index73_26 = input.index();
          input.rewind();
          s = -1;
          if ((synpred85_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index73_26);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          73, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA76_eotS = "\47\uffff";
  static final String DFA76_eofS = "\1\1\46\uffff";
  static final String DFA76_minS = "\1\113\2\uffff\2\0\42\uffff";
  static final String DFA76_maxS = "\1\u00dd\2\uffff\2\0\42\uffff";
  static final String DFA76_acceptS = "\1\uffff\1\2\11\uffff\1\1\33\uffff";
  static final String DFA76_specialS = "\3\uffff\1\0\1\1\42\uffff}>";
  static final String[] DFA76_transitionS = {
      "\3\13\56\uffff\1\13\1\uffff\1\13\1\1\12\uffff\12\13\23\uffff"
          + "\1\13\7\uffff\1\13\1\1\17\uffff\1\1\2\uffff\3\13\1\uffff\1\13"
          + "\2\uffff\1\4\3\1\1\3\2\uffff\1\1\3\uffff\1\13\1\uffff\5\13\1"
          + "\uffff\1\13", "", "", "\1\uffff", "\1\uffff", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
  static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
  static final char[] DFA76_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA76_minS);
  static final char[] DFA76_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA76_maxS);
  static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
  static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
  static final short[][] DFA76_transition;

  static {
    int numStates = DFA76_transitionS.length;
    DFA76_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
    }
  }

  class DFA76 extends DFA {

    public DFA76(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 76;
      this.eot = DFA76_eot;
      this.eof = DFA76_eof;
      this.min = DFA76_min;
      this.max = DFA76_max;
      this.accept = DFA76_accept;
      this.special = DFA76_special;
      this.transition = DFA76_transition;
    }

    public String getDescription() {
      return "()* loopback of 486:4: ( action )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA76_3 = input.LA(1);

          int index76_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred88_AntlrPilar())) {
            s = 11;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index76_3);
          if (s >= 0) return s;
          break;
        case 1:
          int LA76_4 = input.LA(1);

          int index76_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred88_AntlrPilar())) {
            s = 11;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index76_4);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          76, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA78_eotS = "\41\uffff";
  static final String DFA78_eofS = "\41\uffff";
  static final String DFA78_minS = "\1\113\3\uffff\32\0\3\uffff";
  static final String DFA78_maxS = "\1\u00dd\3\uffff\32\0\3\uffff";
  static final String DFA78_acceptS = "\1\uffff\1\1\1\2\1\3\32\uffff\1\5\1\4\1\6";
  static final String DFA78_specialS = "\4\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"
      + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
      + "\3\uffff}>";
  static final String[] DFA78_transitionS = {
      "\1\15\1\17\1\16\56\uffff\1\26\1\uffff\1\27\13\uffff\1\5\1\6"
          + "\1\4\1\14\1\23\1\24\1\25\1\20\1\21\1\22\23\uffff\1\10\7\uffff"
          + "\1\32\23\uffff\1\1\1\2\1\3\1\uffff\1\36\2\uffff\1\35\3\uffff"
          + "\1\34\6\uffff\1\7\1\uffff\1\30\1\11\1\12\1\13\1\31\1\uffff\1"
          + "\33", "", "", "", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "" };

  static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
  static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
  static final char[] DFA78_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA78_minS);
  static final char[] DFA78_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA78_maxS);
  static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
  static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
  static final short[][] DFA78_transition;

  static {
    int numStates = DFA78_transitionS.length;
    DFA78_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
    }
  }

  class DFA78 extends DFA {

    public DFA78(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 78;
      this.eot = DFA78_eot;
      this.eof = DFA78_eof;
      this.min = DFA78_min;
      this.max = DFA78_max;
      this.accept = DFA78_accept;
      this.special = DFA78_special;
      this.transition = DFA78_transition;
    }

    public String getDescription() {
      return "489:1: action : (t= 'assert' exp annotationList ';' -> ^( ASSERT[$t] exp annotationList ) | t= 'assume' exp annotationList ';' -> ^( ASSUME[$t] exp annotationList ) | t= 'throw' exp annotationList ';' -> ^( THROW[$t] exp annotationList ) | assignment | startThread | extCall );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA78_4 = input.LA(1);

          int index78_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_4);
          if (s >= 0) return s;
          break;
        case 1:
          int LA78_5 = input.LA(1);

          int index78_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_5);
          if (s >= 0) return s;
          break;
        case 2:
          int LA78_6 = input.LA(1);

          int index78_6 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_6);
          if (s >= 0) return s;
          break;
        case 3:
          int LA78_7 = input.LA(1);

          int index78_7 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_7);
          if (s >= 0) return s;
          break;
        case 4:
          int LA78_8 = input.LA(1);

          int index78_8 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_8);
          if (s >= 0) return s;
          break;
        case 5:
          int LA78_9 = input.LA(1);

          int index78_9 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_9);
          if (s >= 0) return s;
          break;
        case 6:
          int LA78_10 = input.LA(1);

          int index78_10 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_10);
          if (s >= 0) return s;
          break;
        case 7:
          int LA78_11 = input.LA(1);

          int index78_11 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_11);
          if (s >= 0) return s;
          break;
        case 8:
          int LA78_12 = input.LA(1);

          int index78_12 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_12);
          if (s >= 0) return s;
          break;
        case 9:
          int LA78_13 = input.LA(1);

          int index78_13 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_13);
          if (s >= 0) return s;
          break;
        case 10:
          int LA78_14 = input.LA(1);

          int index78_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_14);
          if (s >= 0) return s;
          break;
        case 11:
          int LA78_15 = input.LA(1);

          int index78_15 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_15);
          if (s >= 0) return s;
          break;
        case 12:
          int LA78_16 = input.LA(1);

          int index78_16 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_16);
          if (s >= 0) return s;
          break;
        case 13:
          int LA78_17 = input.LA(1);

          int index78_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_17);
          if (s >= 0) return s;
          break;
        case 14:
          int LA78_18 = input.LA(1);

          int index78_18 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_18);
          if (s >= 0) return s;
          break;
        case 15:
          int LA78_19 = input.LA(1);

          int index78_19 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_19);
          if (s >= 0) return s;
          break;
        case 16:
          int LA78_20 = input.LA(1);

          int index78_20 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_20);
          if (s >= 0) return s;
          break;
        case 17:
          int LA78_21 = input.LA(1);

          int index78_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_21);
          if (s >= 0) return s;
          break;
        case 18:
          int LA78_22 = input.LA(1);

          int index78_22 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_22);
          if (s >= 0) return s;
          break;
        case 19:
          int LA78_23 = input.LA(1);

          int index78_23 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_23);
          if (s >= 0) return s;
          break;
        case 20:
          int LA78_24 = input.LA(1);

          int index78_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_24);
          if (s >= 0) return s;
          break;
        case 21:
          int LA78_25 = input.LA(1);

          int index78_25 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_25);
          if (s >= 0) return s;
          break;
        case 22:
          int LA78_26 = input.LA(1);

          int index78_26 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_26);
          if (s >= 0) return s;
          break;
        case 23:
          int LA78_27 = input.LA(1);

          int index78_27 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_27);
          if (s >= 0) return s;
          break;
        case 24:
          int LA78_28 = input.LA(1);

          int index78_28 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_28);
          if (s >= 0) return s;
          break;
        case 25:
          int LA78_29 = input.LA(1);

          int index78_29 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 31;
          }

          else if ((true)) {
            s = 32;
          }

          input.seek(index78_29);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          78, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA87_eotS = "\6\uffff";
  static final String DFA87_eofS = "\6\uffff";
  static final String DFA87_minS = "\3\113\1\uffff\1\174\1\uffff";
  static final String DFA87_maxS = "\1\u00dd\1\u00df\1\u00dd\1\uffff\1\176\1\uffff";
  static final String DFA87_acceptS = "\3\uffff\1\2\1\uffff\1\1";
  static final String DFA87_specialS = "\6\uffff}>";
  static final String[] DFA87_transitionS = {
      "\3\3\56\uffff\1\1\1\uffff\1\2\13\uffff\12\3\23\uffff\1\3\7\uffff"
          + "\1\3\32\uffff\1\3\3\uffff\1\3\6\uffff\1\3\1\uffff\5\3\1\uffff"
          + "\1\3",
      "\3\3\56\uffff\1\3\1\uffff\1\3\2\uffff\13\3\1\uffff\7\3\21\uffff"
          + "\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\26\uffff\1\5\1\uffff"
          + "\1\3\12\uffff\11\3\1\uffff\1\3\1\uffff\1\4",
      "\3\3\56\uffff\1\3\1\uffff\1\3\2\uffff\13\3\1\uffff\7\3\21\uffff"
          + "\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\26\uffff\1\5\1\uffff"
          + "\1\3\12\uffff\11\3\1\uffff\1\3", "", "\1\1\1\uffff\1\2", "" };

  static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
  static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
  static final char[] DFA87_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA87_minS);
  static final char[] DFA87_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA87_maxS);
  static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
  static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
  static final short[][] DFA87_transition;

  static {
    int numStates = DFA87_transitionS.length;
    DFA87_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
    }
  }

  class DFA87 extends DFA {

    public DFA87(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 87;
      this.eot = DFA87_eot;
      this.eof = DFA87_eof;
      this.min = DFA87_min;
      this.max = DFA87_max;
      this.accept = DFA87_accept;
      this.special = DFA87_special;
      this.transition = DFA87_transition;
    }

    public String getDescription() {
      return "532:4: ( nameExp ':=' )?";
    }
  }

  static final String DFA110_eotS = "\26\uffff";
  static final String DFA110_eofS = "\26\uffff";
  static final String DFA110_minS = "\1\113\1\0\24\uffff";
  static final String DFA110_maxS = "\1\u00dd\1\0\24\uffff";
  static final String DFA110_acceptS = "\2\uffff\1\2\22\uffff\1\1";
  static final String DFA110_specialS = "\1\uffff\1\0\24\uffff}>";
  static final String[] DFA110_transitionS = {
      "\3\2\56\uffff\1\2\1\uffff\1\2\16\uffff\7\2\23\uffff\1\1\7\uffff"
          + "\1\2\47\uffff\5\2\1\uffff\1\2", "\1\uffff", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
  static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
  static final char[] DFA110_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA110_minS);
  static final char[] DFA110_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA110_maxS);
  static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
  static final short[] DFA110_special = DFA
      .unpackEncodedString(DFA110_specialS);
  static final short[][] DFA110_transition;

  static {
    int numStates = DFA110_transitionS.length;
    DFA110_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
    }
  }

  class DFA110 extends DFA {

    public DFA110(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 110;
      this.eot = DFA110_eot;
      this.eof = DFA110_eof;
      this.min = DFA110_min;
      this.max = DFA110_max;
      this.accept = DFA110_accept;
      this.special = DFA110_special;
      this.transition = DFA110_transition;
    }

    public String getDescription() {
      return "688:1: castExp : (t= '(' type ')' primaryExp -> ^( CAST[$t] type primaryExp ) | primaryExp );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA110_1 = input.LA(1);

          int index110_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred137_AntlrPilar())) {
            s = 21;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index110_1);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          110, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA111_eotS = "\126\uffff";
  static final String DFA111_eofS = "\1\1\125\uffff";
  static final String DFA111_minS = "\1\113\35\uffff\1\0\6\uffff\2\0\6\uffff\21\0\22\uffff\2\0\4\uffff";
  static final String DFA111_maxS = "\1\u00e0\35\uffff\1\0\6\uffff\2\0\6\uffff\21\0\22\uffff\2\0\4\uffff";
  static final String DFA111_acceptS = "\1\uffff\1\4\121\uffff\1\3\1\1\1\2";
  static final String DFA111_specialS = "\36\uffff\1\0\6\uffff\1\1\1\2\6\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1"
      + "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\22\uffff\1"
      + "\24\1\25\4\uffff}>";
  static final String[] DFA111_transitionS = {
      "\1\61\1\63\1\62\56\uffff\1\45\1\1\1\72\16\1\1\60\1\67\1\70\1"
          + "\71\1\64\1\65\1\66\21\uffff\2\1\1\46\7\1\1\36\13\1\5\uffff\10"
          + "\1\1\120\15\1\1\121\1\73\1\55\1\56\1\57\1\74\1\1\1\75\1\1\1"
          + "\uffff\1\1", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "\1\uffff", "", "", "", "", "", "", "\1\uffff", "\1\uffff", "", "", "",
      "", "", "", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "\1\uffff", "\1\uffff", "", "", "", "" };

  static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
  static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
  static final char[] DFA111_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA111_minS);
  static final char[] DFA111_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA111_maxS);
  static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
  static final short[] DFA111_special = DFA
      .unpackEncodedString(DFA111_specialS);
  static final short[][] DFA111_transition;

  static {
    int numStates = DFA111_transitionS.length;
    DFA111_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
    }
  }

  class DFA111 extends DFA {

    public DFA111(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 111;
      this.eot = DFA111_eot;
      this.eof = DFA111_eof;
      this.min = DFA111_min;
      this.max = DFA111_max;
      this.accept = DFA111_accept;
      this.special = DFA111_special;
      this.transition = DFA111_transition;
    }

    public String getDescription() {
      return "()* loopback of 695:6: (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA111_30 = input.LA(1);

          int index111_30 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_30);
          if (s >= 0) return s;
          break;
        case 1:
          int LA111_37 = input.LA(1);

          int index111_37 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_37);
          if (s >= 0) return s;
          break;
        case 2:
          int LA111_38 = input.LA(1);

          int index111_38 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_38);
          if (s >= 0) return s;
          break;
        case 3:
          int LA111_45 = input.LA(1);

          int index111_45 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_45);
          if (s >= 0) return s;
          break;
        case 4:
          int LA111_46 = input.LA(1);

          int index111_46 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_46);
          if (s >= 0) return s;
          break;
        case 5:
          int LA111_47 = input.LA(1);

          int index111_47 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_47);
          if (s >= 0) return s;
          break;
        case 6:
          int LA111_48 = input.LA(1);

          int index111_48 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_48);
          if (s >= 0) return s;
          break;
        case 7:
          int LA111_49 = input.LA(1);

          int index111_49 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_49);
          if (s >= 0) return s;
          break;
        case 8:
          int LA111_50 = input.LA(1);

          int index111_50 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_50);
          if (s >= 0) return s;
          break;
        case 9:
          int LA111_51 = input.LA(1);

          int index111_51 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_51);
          if (s >= 0) return s;
          break;
        case 10:
          int LA111_52 = input.LA(1);

          int index111_52 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_52);
          if (s >= 0) return s;
          break;
        case 11:
          int LA111_53 = input.LA(1);

          int index111_53 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_53);
          if (s >= 0) return s;
          break;
        case 12:
          int LA111_54 = input.LA(1);

          int index111_54 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_54);
          if (s >= 0) return s;
          break;
        case 13:
          int LA111_55 = input.LA(1);

          int index111_55 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_55);
          if (s >= 0) return s;
          break;
        case 14:
          int LA111_56 = input.LA(1);

          int index111_56 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_56);
          if (s >= 0) return s;
          break;
        case 15:
          int LA111_57 = input.LA(1);

          int index111_57 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_57);
          if (s >= 0) return s;
          break;
        case 16:
          int LA111_58 = input.LA(1);

          int index111_58 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_58);
          if (s >= 0) return s;
          break;
        case 17:
          int LA111_59 = input.LA(1);

          int index111_59 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_59);
          if (s >= 0) return s;
          break;
        case 18:
          int LA111_60 = input.LA(1);

          int index111_60 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_60);
          if (s >= 0) return s;
          break;
        case 19:
          int LA111_61 = input.LA(1);

          int index111_61 = input.index();
          input.rewind();
          s = -1;
          if ((synpred140_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_61);
          if (s >= 0) return s;
          break;
        case 20:
          int LA111_80 = input.LA(1);

          int index111_80 = input.index();
          input.rewind();
          s = -1;
          if ((synpred138_AntlrPilar())) {
            s = 84;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_80);
          if (s >= 0) return s;
          break;
        case 21:
          int LA111_81 = input.LA(1);

          int index111_81 = input.index();
          input.rewind();
          s = -1;
          if ((synpred139_AntlrPilar())) {
            s = 85;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index111_81);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          111, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA114_eotS = "\34\uffff";
  static final String DFA114_eofS = "\34\uffff";
  static final String DFA114_minS = "\1\113\20\uffff\1\0\12\uffff";
  static final String DFA114_maxS = "\1\u00dd\20\uffff\1\0\12\uffff";
  static final String DFA114_acceptS = "\1\uffff\1\1\14\uffff\1\2\1\3\2\uffff\1\13\1\14\1\15\1\4\1\5\1\6"
      + "\1\7\1\10\1\11\1\12";
  static final String DFA114_specialS = "\21\uffff\1\0\12\uffff}>";
  static final String[] DFA114_transitionS = {
      "\3\1\56\uffff\1\17\1\uffff\1\17\16\uffff\7\1\23\uffff\1\16\7"
          + "\uffff\1\23\47\uffff\1\21\3\1\1\22\1\uffff\1\24", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "\1\uffff", "", "", "",
      "", "", "", "", "", "", "" };

  static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
  static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
  static final char[] DFA114_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA114_minS);
  static final char[] DFA114_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA114_maxS);
  static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
  static final short[] DFA114_special = DFA
      .unpackEncodedString(DFA114_specialS);
  static final short[][] DFA114_transition;

  static {
    int numStates = DFA114_transitionS.length;
    DFA114_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
    }
  }

  class DFA114 extends DFA {

    public DFA114(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 114;
      this.eot = DFA114_eot;
      this.eof = DFA114_eof;
      this.min = DFA114_min;
      this.max = DFA114_max;
      this.accept = DFA114_accept;
      this.special = DFA114_special;
      this.transition = DFA114_transition;
    }

    public String getDescription() {
      return "712:1: primary : ( literal | tuple | nameExp | newListRanged | newList | newMultiArray | newRecord | newSet | newFunction | t= '`' type -> ^( TYPE_EXP[$t] type ) | newExp | funExp | letExp );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA114_17 = input.LA(1);

          int index114_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred147_AntlrPilar())) {
            s = 21;
          }

          else if ((synpred148_AntlrPilar())) {
            s = 22;
          }

          else if ((synpred149_AntlrPilar())) {
            s = 23;
          }

          else if ((synpred150_AntlrPilar())) {
            s = 24;
          }

          else if ((synpred151_AntlrPilar())) {
            s = 25;
          }

          else if ((synpred152_AntlrPilar())) {
            s = 26;
          }

          else if ((synpred153_AntlrPilar())) {
            s = 27;
          }

          input.seek(index114_17);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          114, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA115_eotS = "\5\uffff";
  static final String DFA115_eofS = "\1\uffff\1\4\3\uffff";
  static final String DFA115_minS = "\1\174\1\113\1\uffff\1\174\1\uffff";
  static final String DFA115_maxS = "\1\176\1\u00e0\1\uffff\1\176\1\uffff";
  static final String DFA115_acceptS = "\2\uffff\1\2\1\uffff\1\1";
  static final String DFA115_specialS = "\5\uffff}>";
  static final String[] DFA115_transitionS = { "\1\1\1\uffff\1\2",
      "\3\4\56\uffff\30\4\21\uffff\26\4\5\uffff\37\4\1\3\1\4", "",
      "\1\1\1\uffff\1\2", "" };

  static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
  static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
  static final char[] DFA115_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA115_minS);
  static final char[] DFA115_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA115_maxS);
  static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
  static final short[] DFA115_special = DFA
      .unpackEncodedString(DFA115_specialS);
  static final short[][] DFA115_transition;

  static {
    int numStates = DFA115_transitionS.length;
    DFA115_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
    }
  }

  class DFA115 extends DFA {

    public DFA115(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 115;
      this.eot = DFA115_eot;
      this.eof = DFA115_eof;
      this.min = DFA115_min;
      this.max = DFA115_max;
      this.accept = DFA115_accept;
      this.special = DFA115_special;
      this.transition = DFA115_transition;
    }

    public String getDescription() {
      return "728:1: nameExp : ( name -> ^( NAME_EXP name ) | globalName -> ^( NAME_EXP globalName ) );";
    }
  }

  static final String DFA121_eotS = "\124\uffff";
  static final String DFA121_eofS = "\1\1\123\uffff";
  static final String DFA121_minS = "\1\113\1\uffff\1\0\121\uffff";
  static final String DFA121_maxS = "\1\u00e0\1\uffff\1\0\121\uffff";
  static final String DFA121_acceptS = "\1\uffff\1\2\121\uffff\1\1";
  static final String DFA121_specialS = "\2\uffff\1\0\121\uffff}>";
  static final String[] DFA121_transitionS = {
      "\3\1\56\uffff\30\1\21\uffff\26\1\5\uffff\10\1\1\2\26\1\1\uffff" + "\1\1",
      "", "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
  static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
  static final char[] DFA121_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA121_minS);
  static final char[] DFA121_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA121_maxS);
  static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
  static final short[] DFA121_special = DFA
      .unpackEncodedString(DFA121_specialS);
  static final short[][] DFA121_transition;

  static {
    int numStates = DFA121_transitionS.length;
    DFA121_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
    }
  }

  class DFA121 extends DFA {

    public DFA121(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 121;
      this.eot = DFA121_eot;
      this.eof = DFA121_eof;
      this.min = DFA121_min;
      this.max = DFA121_max;
      this.accept = DFA121_accept;
      this.special = DFA121_special;
      this.transition = DFA121_transition;
    }

    public String getDescription() {
      return "()* loopback of 768:4: ( newMultiArrayTypeFragment )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA121_2 = input.LA(1);

          int index121_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred171_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index121_2);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          121, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA122_eotS = "\124\uffff";
  static final String DFA122_eofS = "\1\2\123\uffff";
  static final String DFA122_minS = "\1\113\1\0\23\uffff\1\0\2\uffff\1\0\73\uffff";
  static final String DFA122_maxS = "\1\u00e0\1\0\23\uffff\1\0\2\uffff\1\0\73\uffff";
  static final String DFA122_acceptS = "\2\uffff\1\2\120\uffff\1\1";
  static final String DFA122_specialS = "\1\uffff\1\0\23\uffff\1\1\2\uffff\1\2\73\uffff}>";
  static final String[] DFA122_transitionS = {
      "\3\2\56\uffff\30\2\21\uffff\12\2\1\25\13\2\5\uffff\10\2\1\1"
          + "\14\2\1\30\11\2\1\uffff\1\2", "\1\uffff", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "\1\uffff", "", "",
      "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "" };

  static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
  static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
  static final char[] DFA122_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA122_minS);
  static final char[] DFA122_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA122_maxS);
  static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
  static final short[] DFA122_special = DFA
      .unpackEncodedString(DFA122_specialS);
  static final short[][] DFA122_transition;

  static {
    int numStates = DFA122_transitionS.length;
    DFA122_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
    }
  }

  class DFA122 extends DFA {

    public DFA122(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 122;
      this.eot = DFA122_eot;
      this.eof = DFA122_eof;
      this.min = DFA122_min;
      this.max = DFA122_max;
      this.accept = DFA122_accept;
      this.special = DFA122_special;
      this.transition = DFA122_transition;
    }

    public String getDescription() {
      return "()* loopback of 769:4: ( typeFragment )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA122_1 = input.LA(1);

          int index122_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred172_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index122_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA122_21 = input.LA(1);

          int index122_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred172_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index122_21);
          if (s >= 0) return s;
          break;
        case 2:
          int LA122_24 = input.LA(1);

          int index122_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred172_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index122_24);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          122, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA144_eotS = "\124\uffff";
  static final String DFA144_eofS = "\1\1\123\uffff";
  static final String DFA144_minS = "\1\113\10\uffff\1\0\3\uffff\1\0\22\uffff\1\0\63\uffff";
  static final String DFA144_maxS = "\1\u00e0\10\uffff\1\0\3\uffff\1\0\22\uffff\1\0\63\uffff";
  static final String DFA144_acceptS = "\1\uffff\1\2\121\uffff\1\1";
  static final String DFA144_specialS = "\11\uffff\1\0\3\uffff\1\1\22\uffff\1\2\63\uffff}>";
  static final String[] DFA144_transitionS = {
      "\3\1\56\uffff\30\1\21\uffff\12\1\1\11\13\1\5\uffff\10\1\1\15"
          + "\14\1\1\40\11\1\1\uffff\1\1", "", "", "", "", "", "", "", "",
      "\1\uffff", "", "", "", "\1\uffff", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "\1\uffff", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "" };

  static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
  static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
  static final char[] DFA144_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA144_minS);
  static final char[] DFA144_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA144_maxS);
  static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
  static final short[] DFA144_special = DFA
      .unpackEncodedString(DFA144_specialS);
  static final short[][] DFA144_transition;

  static {
    int numStates = DFA144_transitionS.length;
    DFA144_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
    }
  }

  class DFA144 extends DFA {

    public DFA144(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 144;
      this.eot = DFA144_eot;
      this.eof = DFA144_eof;
      this.min = DFA144_min;
      this.max = DFA144_max;
      this.accept = DFA144_accept;
      this.special = DFA144_special;
      this.transition = DFA144_transition;
    }

    public String getDescription() {
      return "()* loopback of 851:13: ( typeFragment )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA144_9 = input.LA(1);

          int index144_9 = input.index();
          input.rewind();
          s = -1;
          if ((synpred194_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index144_9);
          if (s >= 0) return s;
          break;
        case 1:
          int LA144_13 = input.LA(1);

          int index144_13 = input.index();
          input.rewind();
          s = -1;
          if ((synpred194_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index144_13);
          if (s >= 0) return s;
          break;
        case 2:
          int LA144_32 = input.LA(1);

          int index144_32 = input.index();
          input.rewind();
          s = -1;
          if ((synpred194_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index144_32);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          144, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA148_eotS = "\124\uffff";
  static final String DFA148_eofS = "\1\2\123\uffff";
  static final String DFA148_minS = "\1\113\1\0\122\uffff";
  static final String DFA148_maxS = "\1\u00e0\1\0\122\uffff";
  static final String DFA148_acceptS = "\2\uffff\1\2\120\uffff\1\1";
  static final String DFA148_specialS = "\1\uffff\1\0\122\uffff}>";
  static final String[] DFA148_transitionS = {
      "\3\2\56\uffff\30\2\21\uffff\1\1\25\2\5\uffff\37\2\1\uffff\1" + "\2",
      "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
  static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
  static final char[] DFA148_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA148_minS);
  static final char[] DFA148_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA148_maxS);
  static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
  static final short[] DFA148_special = DFA
      .unpackEncodedString(DFA148_specialS);
  static final short[][] DFA148_transition;

  static {
    int numStates = DFA148_transitionS.length;
    DFA148_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
    }
  }

  class DFA148 extends DFA {

    public DFA148(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 148;
      this.eot = DFA148_eot;
      this.eof = DFA148_eof;
      this.min = DFA148_min;
      this.max = DFA148_max;
      this.accept = DFA148_accept;
      this.special = DFA148_special;
      this.transition = DFA148_transition;
    }

    public String getDescription() {
      return "863:20: ( typeTuple )?";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA148_1 = input.LA(1);

          int index148_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred201_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index148_1);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          148, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  public static final BitSet FOLLOW_model_in_modelFile658 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_modelFile660 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotation_in_annotationFile702 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_annotationFile704 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_packageDeclaration_in_packageDeclarationFile745 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_packageDeclarationFile747 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_packageElement_in_packageElementFile776 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_packageElementFile778 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_location_in_locationFile811 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_locationFile813 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_transformation_in_transformationFile852 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_transformationFile854 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_action_in_actionFile887 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_actionFile889 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_jump_in_jumpFile930 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_jumpFile932 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_expFile975 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_expFile977 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_typeFile1021 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_typeFile1023 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotationList_in_model1066 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x076E500000000000L });
  public static final BitSet FOLLOW_packageElement_in_model1071 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x076E500000000000L });
  public static final BitSet FOLLOW_packageDeclaration_in_model1077 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_EOF_in_model1101 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotation_in_annotationList1167 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000020000000000L });
  public static final BitSet FOLLOW_angleGroupedAnnotationList_in_annotationList1207 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_165_in_angleGroupedAnnotationList1278 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000024000000000L });
  public static final BitSet FOLLOW_annotation_in_angleGroupedAnnotationList1280 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000024000000000L });
  public static final BitSet FOLLOW_166_in_angleGroupedAnnotationList1283 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_parenGroupedAnnotationList1366 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000030000000000L });
  public static final BitSet FOLLOW_annotation_in_parenGroupedAnnotationList1368 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000030000000000L });
  public static final BitSet FOLLOW_168_in_parenGroupedAnnotationList1371 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_annotation1410 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_annotation1412 = new BitSet(
      new long[] { 0x0000000000000002L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_annotationParams_in_annotation1414 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_annotationParams1458 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008280000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_annotationParam_in_annotationParams1460 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_170_in_annotationParams1471 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008280000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_annotationParam_in_annotationParams1473 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_168_in_annotationParams1478 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_annotationParams1497 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_annotationParams1501 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_annotationParams1503 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_ID_in_annotationParam1549 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_171_in_annotationParam1551 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008280000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_annotation_in_annotationParam1555 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_annotationParam1559 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotation_in_annotationParam1593 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_annotationParam1636 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_172_in_packageDeclaration1694 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_name_in_packageDeclaration1696 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_packageDeclaration1698 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_packageDeclaration1700 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x076E400000000000L });
  public static final BitSet FOLLOW_packageElement_in_packageDeclaration1705 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x076E400000000000L });
  public static final BitSet FOLLOW_constDeclaration_in_packageElement1757 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_enumDeclaration_in_packageElement1762 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typealiasDeclaration_in_packageElement1767 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_recordDeclaration_in_packageElement1772 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_globalVarsDeclaration_in_packageElement1777 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procedureDeclaration_in_packageElement1782 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_virtualSetDeclaration_in_packageElement1787 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_funexpDeclaration_in_packageElement1792 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extDeclaration_in_packageElement1797 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_174_in_constDeclaration1810 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_constDeclaration1812 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_constDeclaration1814 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_constDeclaration1819 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_constElement_in_constDeclaration1821 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0001000000000000L });
  public static final BitSet FOLLOW_176_in_constDeclaration1824 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_constElement1870 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_171_in_constElement1872 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_constElement1877 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_constElement1879 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_constElement1881 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_177_in_enumDeclaration1922 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_enumDeclaration1924 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_enumDeclaration1926 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_enumDeclaration1931 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_enumElement_in_enumDeclaration1933 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_170_in_enumDeclaration1940 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_enumElement_in_enumDeclaration1942 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_176_in_enumDeclaration1947 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_enumElement1990 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_enumElement1992 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_178_in_typealiasDeclaration2033 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_typealiasDeclaration2035 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_typealiasDeclaration2037 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_typealiasDeclaration2045 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_typealiasDeclaration2047 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_179_in_recordDeclaration2090 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_recordDeclaration2095 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_recordDeclaration2097 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_recordDeclaration2100 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0010800000000000L });
  public static final BitSet FOLLOW_extendClause_in_recordDeclaration2105 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_recordDeclaration2111 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0001808000000000L });
  public static final BitSet FOLLOW_attribute_in_recordDeclaration2113 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0001808000000000L });
  public static final BitSet FOLLOW_176_in_recordDeclaration2116 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_165_in_typeVarTuple2180 = new BitSet(
      new long[] { 0x0000000000000000L, 0x2000000000000000L });
  public static final BitSet FOLLOW_typeVar_in_typeVarTuple2182 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000044000000000L });
  public static final BitSet FOLLOW_170_in_typeVarTuple2186 = new BitSet(
      new long[] { 0x0000000000000000L, 0x2000000000000000L });
  public static final BitSet FOLLOW_typeVar_in_typeVarTuple2188 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000044000000000L });
  public static final BitSet FOLLOW_166_in_typeVarTuple2193 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_TYPEVARID_in_typeVar2222 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_typeVar2224 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_180_in_extendClause2258 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_extendClauseElement_in_extendClause2260 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_extendClause2267 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_extendClauseElement_in_extendClause2269 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_name_in_extendClauseElement2301 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_typeTuple_in_extendClauseElement2303 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_extendClauseElement2306 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_165_in_typeTuple2343 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_typeTuple2345 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000044000000000L });
  public static final BitSet FOLLOW_170_in_typeTuple2349 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_typeTuple2351 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000044000000000L });
  public static final BitSet FOLLOW_166_in_typeTuple2356 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_attribute2389 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_attributeFragment_in_attribute2392 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000240000000000L });
  public static final BitSet FOLLOW_170_in_attribute2399 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_attributeFragment_in_attribute2401 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000240000000000L });
  public static final BitSet FOLLOW_173_in_attribute2406 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_attributeFragment2445 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_attributeFragment2447 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_171_in_attributeFragment2451 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_name_in_attributeFragment2453 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_181_in_globalVarsDeclaration2488 = new BitSet(
      new long[] { 0x0000000000000000L, 0x7000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_globalVarDeclaration_in_globalVarsDeclaration2490 = new BitSet(
      new long[] { 0x0000000000000002L, 0x7000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_globalVarDeclaration2513 = new BitSet(
      new long[] { 0x0000000000000000L, 0x7000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_globalVarFragment_in_globalVarDeclaration2516 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000240000000000L });
  public static final BitSet FOLLOW_170_in_globalVarDeclaration2523 = new BitSet(
      new long[] { 0x0000000000000000L, 0x7000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_globalVarFragment_in_globalVarDeclaration2525 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000240000000000L });
  public static final BitSet FOLLOW_173_in_globalVarDeclaration2530 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_GLOBALID_in_globalVarFragment2569 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_globalVarFragment2571 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_182_in_procedureDeclaration2607 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x000080A000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_procedureDeclaration2609 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_procedureDeclaration2615 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_procedureDeclaration2624 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x000002A000000000L });
  public static final BitSet FOLLOW_167_in_procedureDeclaration2631 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000818000000000L });
  public static final BitSet FOLLOW_paramVariable_in_procedureDeclaration2641 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_paramList_in_procedureDeclaration2652 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_170_in_procedureDeclaration2668 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_paramVariable_in_procedureDeclaration2670 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_168_in_procedureDeclaration2690 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_procedureDeclaration2699 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_body_in_procedureDeclaration2704 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_param_in_paramList2786 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_paramList2790 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_param_in_paramList2792 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_type_in_param2827 = new BitSet(new long[] {
      0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_param2830 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_param2832 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_paramVariable2873 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_paramVariable2876 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0080000000000000L });
  public static final BitSet FOLLOW_183_in_paramVariable2878 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_paramVariable2880 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_184_in_virtualSetDeclaration2918 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_virtualSetDeclaration2920 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_virtualSetDeclaration2922 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_virtualSetDeclaration2927 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_vsetElement_in_virtualSetDeclaration2932 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_170_in_virtualSetDeclaration2936 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_vsetElement_in_virtualSetDeclaration2938 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_176_in_virtualSetDeclaration2946 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_name_in_vsetElement3008 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_vsetElement3010 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_185_in_funexpDeclaration3050 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_funexpDeclaration3052 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_funexpDeclaration3054 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_171_in_funexpDeclaration3056 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_funExp_in_funexpDeclaration3061 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_186_in_extDeclaration3117 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0000002000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_extDeclaration3119 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_extDeclaration3125 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_extDeclaration3127 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_extDeclaration3132 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x7800000000000000L });
  public static final BitSet FOLLOW_extElement_in_extDeclaration3134 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x7801000000000000L });
  public static final BitSet FOLLOW_176_in_extDeclaration3137 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeExtension_in_extElement3191 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_actionExtension_in_extElement3197 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_expExtension_in_extElement3203 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procExtension_in_extElement3208 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_187_in_typeExtension3221 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0000002000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_typeExtension3223 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_typeExtension3229 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_typeExtension3231 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0010A00000000000L });
  public static final BitSet FOLLOW_173_in_typeExtension3238 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extendClause_in_typeExtension3245 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_typeExtension3253 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x7801000000000000L });
  public static final BitSet FOLLOW_typeExtensionMember_in_typeExtension3255 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x7801000000000000L });
  public static final BitSet FOLLOW_176_in_typeExtension3258 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeExtensionAttributeBinding_in_typeExtensionMember3309 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_actionExtension_in_typeExtensionMember3314 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_expExtension_in_typeExtensionMember3319 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procExtension_in_typeExtensionMember3324 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_typeExtensionAttributeBinding3337 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_171_in_typeExtensionAttributeBinding3339 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_typeExtensionAttributeBinding3343 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_typeExtensionAttributeBinding3348 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_typeExtensionAttributeBinding3350 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_188_in_actionExtension3396 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0000002000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_actionExtension3398 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_actionExtension3401 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x000002A000000000L });
  public static final BitSet FOLLOW_167_in_actionExtension3408 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x008082A000000000L });
  public static final BitSet FOLLOW_extParamList_in_actionExtension3410 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_168_in_actionExtension3412 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_actionExtension3420 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_actionExtension3422 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_189_in_expExtension3478 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x000080A000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_expExtension3480 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_expExtension3483 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_expExtension3486 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x000002A000000000L });
  public static final BitSet FOLLOW_167_in_expExtension3494 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x008082A000000000L });
  public static final BitSet FOLLOW_extParamList_in_expExtension3496 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_168_in_expExtension3498 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_expExtension3506 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_expExtension3508 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_190_in_procExtension3571 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x000080A000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_procExtension3573 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_procExtension3576 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_procExtension3579 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x000002A000000000L });
  public static final BitSet FOLLOW_167_in_procExtension3586 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x008082A000000000L });
  public static final BitSet FOLLOW_extParamList_in_procExtension3588 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_168_in_procExtension3590 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_procExtension3598 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_procExtension3600 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extParamVariable_in_extParamList3662 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extParam_in_extParamList3696 = new BitSet(
      new long[] { 0x0000000000000002L, 0x3000000000000000L,
          0x0080848000000000L });
  public static final BitSet FOLLOW_170_in_extParamList3700 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x008082A000000000L });
  public static final BitSet FOLLOW_extParam_in_extParamList3702 = new BitSet(
      new long[] { 0x0000000000000002L, 0x3000000000000000L,
          0x0080848000000000L });
  public static final BitSet FOLLOW_extParamVariable_in_extParamList3710 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_extParam3753 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_ID_in_extParam3756 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_extParam3759 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_extParamVariable3804 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0080000000000000L });
  public static final BitSet FOLLOW_ID_in_extParamVariable3807 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0080000000000000L });
  public static final BitSet FOLLOW_183_in_extParamVariable3814 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_extParamVariable3816 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_175_in_body3868 = new BitSet(new long[] {
      0x0000000000000000L, 0x8000000000000000L, 0x8000000000000000L });
  public static final BitSet FOLLOW_localVarsDeclaration_in_body3870 = new BitSet(
      new long[] { 0x0000000000000000L, 0x8000000000000000L,
          0x8000000000000000L });
  public static final BitSet FOLLOW_location_in_body3877 = new BitSet(
      new long[] { 0x0000000000000000L, 0x8000000000000000L,
          0x8001000000000000L, 0x0000000000020000L });
  public static final BitSet FOLLOW_catchClause_in_body3884 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001000000000000L, 0x0000000000020000L });
  public static final BitSet FOLLOW_176_in_body3887 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_191_in_localVarsDeclaration3948 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_localVarDeclaration_in_localVarsDeclaration3950 = new BitSet(
      new long[] { 0x0000000000000002L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_localVarDeclaration3978 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_localVarFragment_in_localVarDeclaration3981 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000240000000000L });
  public static final BitSet FOLLOW_170_in_localVarDeclaration3989 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_localVarFragment_in_localVarDeclaration3991 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000240000000000L });
  public static final BitSet FOLLOW_173_in_localVarDeclaration3996 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_localVarFragment4036 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_localVarFragment4038 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_LOCID_in_location4088 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x000080A0000FFC00L, 0x000000002FA07CBCL });
  public static final BitSet FOLLOW_angleGroupedAnnotationList_in_location4090 = new BitSet(
      new long[] { 0x0000000000000002L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA07CBCL });
  public static final BitSet FOLLOW_transformation_in_location4098 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_192_in_location4108 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA07CBCL });
  public static final BitSet FOLLOW_transformation_in_location4110 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_parenGroupedAnnotationList_in_transformation4195 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA07CBCL });
  public static final BitSet FOLLOW_guard_in_transformation4197 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA07CB8L });
  public static final BitSet FOLLOW_seqTransformation_in_transformation4204 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_guard4252 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_guard4254 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000002L });
  public static final BitSet FOLLOW_193_in_guard4256 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_194_in_guard4286 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_guard4288 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_lhs_in_lhsList4321 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_lhsList4325 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_lhs_in_lhsList4327 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000040000000000L });
  public static final BitSet FOLLOW_exp_in_lhs4370 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_lhs4372 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_action_in_seqTransformation4412 = new BitSet(
      new long[] { 0x0000000000000002L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA07CB8L });
  public static final BitSet FOLLOW_jump_in_seqTransformation4415 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_195_in_action4469 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_action4471 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_action4473 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_action4475 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_196_in_action4496 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_action4498 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_action4500 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_action4502 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_197_in_action4523 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_action4525 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_action4527 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_action4529 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_assignment_in_action4549 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_startThread_in_action4555 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extCall_in_action4560 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_lhsList_in_assignment4571 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000001L, 0x0000000000000040L });
  public static final BitSet FOLLOW_198_in_assignment4581 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_ACTION_EXT_OP_in_assignment4591 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_rhs_in_assignment4597 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000062000000000L });
  public static final BitSet FOLLOW_170_in_assignment4601 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_rhs_in_assignment4603 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000062000000000L });
  public static final BitSet FOLLOW_annotationList_in_assignment4611 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_assignment4613 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotationList_in_rhs4662 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_rhs4664 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_199_in_startThread4705 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_name_in_startThread4707 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x000082A0000FFC00L, 0x000000002FA04500L });
  public static final BitSet FOLLOW_200_in_startThread4714 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_startThread4718 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_startThread4720 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x000082A0000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_startThread4731 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_startThread4739 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_startThread4741 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_extCall4798 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_extCall4800 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_extCall4802 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_gotoJump_in_jump4837 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_returnJump_in_jump4842 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ifThenJump_in_jump4847 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_194_in_jump4854 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000004000L });
  public static final BitSet FOLLOW_ifThenJump_in_jump4856 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_ifElseJump_in_jump4864 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_jump4871 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_jump4873 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_202_in_jump4920 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_jump4922 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000000001L });
  public static final BitSet FOLLOW_switchCaseJump_in_jump4924 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_switchDefaultJump_in_jump4936 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_jump4942 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_jump4944 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_203_in_jump4994 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_nameExp_in_jump5001 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000040L });
  public static final BitSet FOLLOW_198_in_jump5003 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_jump5011 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_jump5013 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_jump5015 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000001000L });
  public static final BitSet FOLLOW_gotoJump_in_jump5022 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_204_in_gotoJump5087 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_gotoJump5089 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_gotoJump5091 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_gotoJump5093 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_205_in_returnJump5123 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x000082A0000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_returnJump5125 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_returnJump5128 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_returnJump5130 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_206_in_ifThenJump5161 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_ifThenJump5163 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000008000L });
  public static final BitSet FOLLOW_207_in_ifThenJump5165 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_ifThenJump5167 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000001000L });
  public static final BitSet FOLLOW_204_in_ifThenJump5173 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_ifThenJump5175 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_194_in_ifElseJump5228 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_ifElseJump5230 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000001000L });
  public static final BitSet FOLLOW_204_in_ifElseJump5232 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_ifElseJump5234 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_192_in_switchCaseJump5261 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_switchCaseJump5263 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000010000L });
  public static final BitSet FOLLOW_208_in_switchCaseJump5270 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_switchCaseJump5272 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000001000L });
  public static final BitSet FOLLOW_204_in_switchCaseJump5274 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_switchCaseJump5276 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_192_in_switchDefaultJump5309 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000010000L });
  public static final BitSet FOLLOW_208_in_switchDefaultJump5311 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_switchDefaultJump5313 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000001000L });
  public static final BitSet FOLLOW_204_in_switchDefaultJump5315 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_switchDefaultJump5317 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_209_in_catchClause5342 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_catchClause5344 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000828000000000L });
  public static final BitSet FOLLOW_type_in_catchClause5349 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0000020000000000L });
  public static final BitSet FOLLOW_ID_in_catchClause5355 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000020000000000L });
  public static final BitSet FOLLOW_169_in_catchClause5362 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000100L });
  public static final BitSet FOLLOW_200_in_catchClause5364 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_catchClause5368 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000040000L });
  public static final BitSet FOLLOW_210_in_catchClause5370 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_catchClause5377 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_catchClause5379 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000007C00L });
  public static final BitSet FOLLOW_jump_in_catchClause5384 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_conditionalExp_in_exp5461 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_conditionalImplyExp_in_conditionalExp5474 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ifThenExp_in_conditionalExp5479 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_194_in_conditionalExp5485 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_ifThenExp_in_conditionalExp5487 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_ifElseExp_in_conditionalExp5494 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_202_in_conditionalExp5541 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_conditionalExp5543 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_switchCaseExp_in_conditionalExp5545 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_switchDefaultExp_in_conditionalExp5561 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_206_in_ifThenExp5616 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_ifThenExp5620 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000008000L });
  public static final BitSet FOLLOW_207_in_ifThenExp5622 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_ifThenExp5624 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_ifThenExp5635 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_194_in_ifElseExp5690 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_ifElseExp5692 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_ifElseExp5694 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_192_in_switchCaseExp5728 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_switchCaseExp5732 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000010000L });
  public static final BitSet FOLLOW_208_in_switchCaseExp5734 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_switchCaseExp5739 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_switchCaseExp5743 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_192_in_switchDefaultExp5786 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000010000L });
  public static final BitSet FOLLOW_208_in_switchDefaultExp5788 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_switchDefaultExp5790 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_switchDefaultExp5792 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_conditionalOrExp_in_conditionalImplyExp5825 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000180000L });
  public static final BitSet FOLLOW_211_in_conditionalImplyExp5856 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_conditionalOrExp_in_conditionalImplyExp5860 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000180000L });
  public static final BitSet FOLLOW_212_in_conditionalImplyExp5891 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_conditionalOrExp_in_conditionalImplyExp5895 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000180000L });
  public static final BitSet FOLLOW_conditionalAndExp_in_conditionalOrExp5939 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000002L });
  public static final BitSet FOLLOW_COND_OR_OP_in_conditionalOrExp5970 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_conditionalAndExp_in_conditionalOrExp5982 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000002L });
  public static final BitSet FOLLOW_inclusiveOrExp_in_conditionalAndExp6032 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000004L });
  public static final BitSet FOLLOW_COND_AND_OP_in_conditionalAndExp6065 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_inclusiveOrExp_in_conditionalAndExp6069 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000004L });
  public static final BitSet FOLLOW_exclusiveOrExp_in_inclusiveOrExp6108 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000008L });
  public static final BitSet FOLLOW_OR_OP_in_inclusiveOrExp6141 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_exclusiveOrExp_in_inclusiveOrExp6145 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000008L });
  public static final BitSet FOLLOW_andExp_in_exclusiveOrExp6191 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000010L });
  public static final BitSet FOLLOW_XOR_OP_in_exclusiveOrExp6232 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_andExp_in_exclusiveOrExp6236 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000010L });
  public static final BitSet FOLLOW_equalityExp_in_andExp6288 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000020L });
  public static final BitSet FOLLOW_AND_OP_in_andExp6324 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_equalityExp_in_andExp6328 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000020L });
  public static final BitSet FOLLOW_typeTestExp_in_equalityExp6375 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000040L });
  public static final BitSet FOLLOW_EQ_OP_in_equalityExp6411 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_typeTestExp_in_equalityExp6415 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000040L });
  public static final BitSet FOLLOW_relationalExp_in_typeTestExp6465 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000080L });
  public static final BitSet FOLLOW_COLON_OP_in_typeTestExp6499 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_relationalExp_in_typeTestExp6503 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000080L });
  public static final BitSet FOLLOW_shiftExp_in_relationalExp6547 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000006000000100L });
  public static final BitSet FOLLOW_REL_OP_in_relationalExp6586 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_shiftExp_in_relationalExp6590 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000006000000100L });
  public static final BitSet FOLLOW_165_in_relationalExp6628 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_shiftExp_in_relationalExp6632 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000006000000100L });
  public static final BitSet FOLLOW_166_in_relationalExp6673 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_shiftExp_in_relationalExp6677 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000006000000100L });
  public static final BitSet FOLLOW_additiveExp_in_shiftExp6730 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000200L });
  public static final BitSet FOLLOW_SHIFT_OP_in_shiftExp6766 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_additiveExp_in_shiftExp6770 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000200L });
  public static final BitSet FOLLOW_multiplicativeExp_in_additiveExp6815 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000400L });
  public static final BitSet FOLLOW_ADD_OP_in_additiveExp6845 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_multiplicativeExp_in_additiveExp6849 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000400L });
  public static final BitSet FOLLOW_unaryExp_in_multiplicativeExp6891 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000800L, 0x0000000000200000L });
  public static final BitSet FOLLOW_MUL_OP_in_multiplicativeExp6931 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_unaryExp_in_multiplicativeExp6935 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000800L, 0x0000000000200000L });
  public static final BitSet FOLLOW_213_in_multiplicativeExp6973 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_unaryExp_in_multiplicativeExp6977 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000800L, 0x0000000000200000L });
  public static final BitSet FOLLOW_UN_OP_in_unaryExp7036 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_unaryExp_in_unaryExp7038 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ADD_OP_in_unaryExp7076 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_unaryExp_in_unaryExp7078 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_MUL_OP_in_unaryExp7115 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_unaryExp_in_unaryExp7117 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_213_in_unaryExp7154 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_unaryExp_in_unaryExp7156 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_castExp_in_unaryExp7194 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_castExp7207 = new BitSet(new long[] {
      0x0000000000000000L, 0x3000000000000000L, 0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_castExp7209 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_168_in_castExp7211 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA00000L });
  public static final BitSet FOLLOW_primaryExp_in_castExp7213 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_primaryExp_in_castExp7240 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_primary_in_primaryExp7256 = new BitSet(
      new long[] { 0x0000000000000002L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FE00100L });
  public static final BitSet FOLLOW_200_in_primaryExp7296 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_expList_in_primaryExp7298 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_primaryExp7300 = new BitSet(
      new long[] { 0x0000000000000002L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FE00100L });
  public static final BitSet FOLLOW_214_in_primaryExp7338 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_primaryExp7340 = new BitSet(
      new long[] { 0x0000000000000002L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FE00100L });
  public static final BitSet FOLLOW_callArg_in_primaryExp7385 = new BitSet(
      new long[] { 0x0000000000000002L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FE00100L });
  public static final BitSet FOLLOW_exp_in_expList7440 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_expList7444 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_expList7446 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000040000000000L });
  public static final BitSet FOLLOW_primary_in_callArg7493 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000400100L });
  public static final BitSet FOLLOW_200_in_callArg7533 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_expList_in_callArg7535 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_callArg7537 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000400100L });
  public static final BitSet FOLLOW_214_in_callArg7575 = new BitSet(new long[] {
      0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_callArg7577 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000400100L });
  public static final BitSet FOLLOW_literal_in_primary7634 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_tuple_in_primary7639 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_nameExp_in_primary7644 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newListRanged_in_primary7649 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newList_in_primary7654 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newMultiArray_in_primary7659 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newRecord_in_primary7664 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newSet_in_primary7669 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newFunction_in_primary7674 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_primary7682 = new BitSet(new long[] {
      0x0000000000000000L, 0x3000000000000000L, 0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_primary7684 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newExp_in_primary7724 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_funExp_in_primary7729 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_letExp_in_primary7734 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_name_in_nameExp7745 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_globalName_in_nameExp7790 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_216_in_literal7839 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_literal7881 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_218_in_literal7922 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_CHAR_LIT_in_literal7964 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_intLiteral_in_literal8005 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_realLiteral_in_literal8010 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_STRING_LIT_in_literal8017 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_SYMBOL_LIT_in_literal8058 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_RAW_LIT_in_literal8099 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_HEX_LIT_in_intLiteral8149 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_OCT_LIT_in_intLiteral8194 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_DEC_LIT_in_intLiteral8238 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_BIN_LIT_in_intLiteral8282 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_FLOAT_LIT_in_realLiteral8332 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_RATIONAL_LIT_in_realLiteral8374 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_tuple8420 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008180000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_annotatedExp_in_tuple8424 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_170_in_tuple8435 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_annotatedExp_in_tuple8437 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_168_in_tuple8445 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_annotatedExp8476 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_annotatedExp8478 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_219_in_newExp8519 = new BitSet(new long[] {
      0x0000000000000000L, 0x3000000000000000L, 0x0000808000000000L });
  public static final BitSet FOLLOW_baseType_in_newExp8521 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000800000000000L, 0x0000000000200100L });
  public static final BitSet FOLLOW_newMultiArrayTypeFragment_in_newExp8526 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000800000000000L, 0x0000000000200100L });
  public static final BitSet FOLLOW_typeFragment_in_newExp8532 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000800000000000L, 0x0000000000200100L });
  public static final BitSet FOLLOW_200_in_newMultiArrayTypeFragment8596 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_newMultiArrayTypeFragment8598 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_170_in_newMultiArrayTypeFragment8602 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_newMultiArrayTypeFragment8604 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_newMultiArrayTypeFragment8609 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_newListRanged8646 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000100L });
  public static final BitSet FOLLOW_200_in_newListRanged8648 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_newListRanged8650 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000040000L });
  public static final BitSet FOLLOW_210_in_newListRanged8652 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_newListRanged8654 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_newListRanged8656 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_newMultiArray8689 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000100L });
  public static final BitSet FOLLOW_200_in_newMultiArray8691 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04700L });
  public static final BitSet FOLLOW_newMultiArrayFragment_in_newMultiArray8699 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_170_in_newMultiArray8709 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04500L });
  public static final BitSet FOLLOW_newMultiArrayFragment_in_newMultiArray8711 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_newMultiArray8723 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_200_in_newMultiArrayFragment8780 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04700L });
  public static final BitSet FOLLOW_newMultiArrayFragment_in_newMultiArrayFragment8784 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_170_in_newMultiArrayFragment8798 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04500L });
  public static final BitSet FOLLOW_newMultiArrayFragment_in_newMultiArrayFragment8800 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_newMultiArrayFragment8831 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_newMultiArrayFragment8836 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_newList8849 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000000100L });
  public static final BitSet FOLLOW_200_in_newList8851 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04600L });
  public static final BitSet FOLLOW_exp_in_newList8855 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L,
      0x0000000000000200L });
  public static final BitSet FOLLOW_170_in_newList8859 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_newList8861 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L,
      0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_newList8869 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_newSet8897 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_newSet8899 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00018080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_newSet8903 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0001040000000000L });
  public static final BitSet FOLLOW_170_in_newSet8907 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_newSet8909 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0001040000000000L });
  public static final BitSet FOLLOW_176_in_newSet8917 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_newRecord8945 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_name_in_newRecord8947 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000802000000000L });
  public static final BitSet FOLLOW_typeTuple_in_newRecord8949 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_newRecord8955 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0001000000000000L });
  public static final BitSet FOLLOW_attrInit_in_newRecord8959 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_170_in_newRecord8963 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_attrInit_in_newRecord8965 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_176_in_newRecord8976 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_attrInit9053 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000080000000000L });
  public static final BitSet FOLLOW_171_in_attrInit9055 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_attrInit9057 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_newFunction9105 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_newFunction9107 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000003FA04400L });
  public static final BitSet FOLLOW_220_in_newFunction9111 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001000000000000L });
  public static final BitSet FOLLOW_mapping_in_newFunction9153 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_170_in_newFunction9157 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000003FA04400L });
  public static final BitSet FOLLOW_mapping_in_newFunction9159 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_176_in_newFunction9197 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_mapping9210 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000010000000L });
  public static final BitSet FOLLOW_220_in_mapping9212 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_mapping9216 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_175_in_funExp9260 = new BitSet(new long[] {
      0x0000000000000000L, 0x3000000000000000L, 0x0000808000000000L,
      0x0000000000010000L });
  public static final BitSet FOLLOW_matching_in_funExp9262 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_192_in_funExp9273 = new BitSet(new long[] {
      0x0000000000000000L, 0x3000000000000000L, 0x0000808000000000L,
      0x0000000000010000L });
  public static final BitSet FOLLOW_matching_in_funExp9275 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_176_in_funExp9280 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_208_in_matching9318 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_matching9320 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_paramList_in_matching9364 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000010000L });
  public static final BitSet FOLLOW_208_in_matching9366 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_matching9368 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_221_in_letExp9417 = new BitSet(new long[] {
      0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_binding_in_letExp9419 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000040000000L });
  public static final BitSet FOLLOW_170_in_letExp9431 = new BitSet(new long[] {
      0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_binding_in_letExp9433 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000040000000L });
  public static final BitSet FOLLOW_222_in_letExp9447 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_letExp9449 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_binding9501 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x00000C0000000000L });
  public static final BitSet FOLLOW_170_in_binding9505 = new BitSet(new long[] {
      0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_binding9507 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x00000C0000000000L });
  public static final BitSet FOLLOW_171_in_binding9512 = new BitSet(new long[] {
      0x0000000000000000L, 0x5000000000003800L, 0x00008080000FFC00L,
      0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_binding9514 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_name9556 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000080000000L });
  public static final BitSet FOLLOW_223_in_name9558 = new BitSet(new long[] {
      0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_name9565 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_globalName9611 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000080000000L });
  public static final BitSet FOLLOW_223_in_globalName9613 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000000000L });
  public static final BitSet FOLLOW_GLOBALID_in_globalName9620 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_baseType_in_type9664 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000800000000000L, 0x0000000000200100L });
  public static final BitSet FOLLOW_typeFragment_in_type9666 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000800000000000L, 0x0000000000200100L });
  public static final BitSet FOLLOW_213_in_typeFragment9710 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_200_in_typeFragment9755 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_typeFragment9757 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_200_in_typeFragment9798 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_typeFragment9800 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_typeFragment9803 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_175_in_typeFragment9846 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001000000000000L });
  public static final BitSet FOLLOW_176_in_typeFragment9848 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_TYPEVARID_in_baseType9895 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_name_in_baseType9935 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000002000000000L, 0x0000000000400000L });
  public static final BitSet FOLLOW_214_in_baseType9939 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_baseType9941 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000002000000000L });
  public static final BitSet FOLLOW_typeTuple_in_baseType9945 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procedureType_in_baseType9983 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_tupleType_in_baseType9988 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_functionType_in_baseType9993 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_relationType_in_baseType9998 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_procedureType10011 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L, 0x0000000110000000L });
  public static final BitSet FOLLOW_procedureTypeParamVariable_in_procedureType10022 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000110000000L });
  public static final BitSet FOLLOW_typeParam_in_procedureType10032 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000110000000L });
  public static final BitSet FOLLOW_170_in_procedureType10045 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_typeParam_in_procedureType10047 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000110000000L });
  public static final BitSet FOLLOW_170_in_procedureType10063 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_procedureTypeParamVariable_in_procedureType10065 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000110000000L });
  public static final BitSet FOLLOW_220_in_procedureType10099 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000818000000000L });
  public static final BitSet FOLLOW_annotatedType_in_procedureType10101 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_168_in_procedureType10104 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_224_in_procedureType10146 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000818000000000L });
  public static final BitSet FOLLOW_annotatedType_in_procedureType10148 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_168_in_procedureType10151 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_typeParam10201 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_ID_in_typeParam10203 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_typeParam10206 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_annotatedType10247 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_annotatedType10249 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_procedureTypeParamVariable10288 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L,
          0x0080000000000000L });
  public static final BitSet FOLLOW_ID_in_procedureTypeParamVariable10290 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0080000000000000L });
  public static final BitSet FOLLOW_183_in_procedureTypeParamVariable10293 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000022000000000L });
  public static final BitSet FOLLOW_annotationList_in_procedureTypeParamVariable10295 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_tupleType10332 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_typeParam_in_tupleType10334 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_170_in_tupleType10346 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_typeParam_in_tupleType10348 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_168_in_tupleType10352 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_175_in_functionType10390 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_typeParam_in_functionType10394 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000010000000L });
  public static final BitSet FOLLOW_170_in_functionType10406 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_typeParam_in_functionType10410 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L, 0x0000000010000000L });
  public static final BitSet FOLLOW_220_in_functionType10415 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_annotatedType_in_functionType10427 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001000000000000L });
  public static final BitSet FOLLOW_176_in_functionType10429 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_175_in_relationType10482 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_typeParam_in_relationType10484 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_relationType10496 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_typeParam_in_relationType10498 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0001040000000000L });
  public static final BitSet FOLLOW_176_in_relationType10503 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotation_in_synpred4_AntlrPilar1167 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000020000000000L });
  public static final BitSet FOLLOW_annotationParams_in_synpred9_AntlrPilar1414 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_synpred11_AntlrPilar1458 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008280000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_annotationParam_in_synpred11_AntlrPilar1460 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_170_in_synpred11_AntlrPilar1471 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008280000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_annotationParam_in_synpred11_AntlrPilar1473 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000050000000000L });
  public static final BitSet FOLLOW_168_in_synpred11_AntlrPilar1478 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_170_in_synpred12_AntlrPilar1501 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_exp_in_synpred12_AntlrPilar1503 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_paramVariable_in_synpred42_AntlrPilar2641 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_170_in_synpred46_AntlrPilar2790 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_param_in_synpred46_AntlrPilar2792 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extParamVariable_in_synpred70_AntlrPilar3662 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_synpred73_AntlrPilar3753 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_synpred74_AntlrPilar3756 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_synpred75_AntlrPilar3804 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_transformation_in_synpred84_AntlrPilar4098 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_192_in_synpred84_AntlrPilar4108 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA07CBCL });
  public static final BitSet FOLLOW_transformation_in_synpred84_AntlrPilar4110 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_guard_in_synpred85_AntlrPilar4197 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_action_in_synpred88_AntlrPilar4412 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_assignment_in_synpred93_AntlrPilar4549 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_synpred110_AntlrPilar5349 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_194_in_synpred113_AntlrPilar5485 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_ifThenExp_in_synpred113_AntlrPilar5487 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_switchCaseExp_in_synpred115_AntlrPilar5545 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_switchDefaultExp_in_synpred116_AntlrPilar5561 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_211_in_synpred117_AntlrPilar5856 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_conditionalOrExp_in_synpred117_AntlrPilar5860 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_212_in_synpred118_AntlrPilar5891 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_conditionalOrExp_in_synpred118_AntlrPilar5895 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_COND_OR_OP_in_synpred119_AntlrPilar5970 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_conditionalAndExp_in_synpred119_AntlrPilar5982 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_COND_AND_OP_in_synpred120_AntlrPilar6065 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_inclusiveOrExp_in_synpred120_AntlrPilar6069 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_OR_OP_in_synpred121_AntlrPilar6141 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_exclusiveOrExp_in_synpred121_AntlrPilar6145 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_XOR_OP_in_synpred122_AntlrPilar6232 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_andExp_in_synpred122_AntlrPilar6236 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_AND_OP_in_synpred123_AntlrPilar6324 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_equalityExp_in_synpred123_AntlrPilar6328 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_EQ_OP_in_synpred124_AntlrPilar6411 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_typeTestExp_in_synpred124_AntlrPilar6415 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_COLON_OP_in_synpred125_AntlrPilar6499 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_relationalExp_in_synpred125_AntlrPilar6503 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_REL_OP_in_synpred126_AntlrPilar6586 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_shiftExp_in_synpred126_AntlrPilar6590 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_165_in_synpred127_AntlrPilar6628 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_shiftExp_in_synpred127_AntlrPilar6632 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_166_in_synpred128_AntlrPilar6673 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_shiftExp_in_synpred128_AntlrPilar6677 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_SHIFT_OP_in_synpred129_AntlrPilar6766 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_additiveExp_in_synpred129_AntlrPilar6770 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ADD_OP_in_synpred130_AntlrPilar6845 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_multiplicativeExp_in_synpred130_AntlrPilar6849 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_MUL_OP_in_synpred131_AntlrPilar6931 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_unaryExp_in_synpred131_AntlrPilar6935 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_213_in_synpred132_AntlrPilar6973 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_unaryExp_in_synpred132_AntlrPilar6977 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_synpred137_AntlrPilar7207 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_synpred137_AntlrPilar7209 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000010000000000L });
  public static final BitSet FOLLOW_168_in_synpred137_AntlrPilar7211 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA00000L });
  public static final BitSet FOLLOW_primaryExp_in_synpred137_AntlrPilar7213 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_200_in_synpred138_AntlrPilar7296 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_expList_in_synpred138_AntlrPilar7298 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_synpred138_AntlrPilar7300 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_214_in_synpred139_AntlrPilar7338 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_synpred139_AntlrPilar7340 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_callArg_in_synpred140_AntlrPilar7385 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_200_in_synpred142_AntlrPilar7533 = new BitSet(
      new long[] { 0x0000000000000000L, 0x5000000000003800L,
          0x00008080000FFC00L, 0x000000002FA04400L });
  public static final BitSet FOLLOW_expList_in_synpred142_AntlrPilar7535 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000200L });
  public static final BitSet FOLLOW_201_in_synpred142_AntlrPilar7537 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_214_in_synpred143_AntlrPilar7575 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_synpred143_AntlrPilar7577 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newListRanged_in_synpred147_AntlrPilar7649 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newList_in_synpred148_AntlrPilar7654 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newMultiArray_in_synpred149_AntlrPilar7659 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newRecord_in_synpred150_AntlrPilar7664 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newSet_in_synpred151_AntlrPilar7669 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newFunction_in_synpred152_AntlrPilar7674 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_synpred153_AntlrPilar7682 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_type_in_synpred153_AntlrPilar7684 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newMultiArrayTypeFragment_in_synpred171_AntlrPilar8526 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeFragment_in_synpred172_AntlrPilar8532 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeFragment_in_synpred194_AntlrPilar9666 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_214_in_synpred200_AntlrPilar9939 = new BitSet(
      new long[] { 0x0000000000000000L, 0x1000000000000000L });
  public static final BitSet FOLLOW_ID_in_synpred200_AntlrPilar9941 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeTuple_in_synpred201_AntlrPilar9945 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procedureType_in_synpred203_AntlrPilar9983 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_tupleType_in_synpred204_AntlrPilar9988 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_functionType_in_synpred205_AntlrPilar9993 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procedureTypeParamVariable_in_synpred206_AntlrPilar10022 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_170_in_synpred207_AntlrPilar10045 = new BitSet(
      new long[] { 0x0000000000000000L, 0x3000000000000000L,
          0x0000808000000000L });
  public static final BitSet FOLLOW_typeParam_in_synpred207_AntlrPilar10047 = new BitSet(
      new long[] { 0x0000000000000002L });

}
