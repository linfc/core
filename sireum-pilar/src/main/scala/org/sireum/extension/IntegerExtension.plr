/*
Copyright (c) 2011 Robby, Kansas State University.        
All rights reserved. This program and the accompanying materials      
are made available under the terms of the Eclipse Public License v1.0 
which accompanies this distribution, and is available at              
http://www.eclipse.org/legal/epl-v10.html                             
*/

package org::sireum::extension;

extension Integer @ExtSpec {
  typedef Type @NonReferenceType;
  
  expdef Boolean.Type isPositive(Integer.Type);
  expdef Boolean.Type isZero(Integer.Type);
  expdef Boolean.Type isNegative(Integer.Type);
  
  expdef Integer.Type pos (Integer.Type n) @Exp +n;
  expdef Integer.Type neg (Integer.Type n) @Exp -n;

  expdef Integer.Type add (Integer.Type n, Integer.Type m) @Exp n + m;
  expdef Integer.Type sub (Integer.Type n, Integer.Type m) @Exp n - m;
  expdef Integer.Type mul (Integer.Type n, Integer.Type m) @Exp n * m;
  expdef Integer.Type div (Integer.Type n, Integer.Type m) @Exp n / m;
  expdef Integer.Type rem (Integer.Type n, Integer.Type m) @Exp n % m;

  expdef Boolean.Type eq (Integer.Type n, Integer.Type m) @Exp n == m;
  expdef Boolean.Type ne (Integer.Type n, Integer.Type m) @Exp n != m;
  expdef Boolean.Type lt (Integer.Type n, Integer.Type m) @Exp n < m;
  expdef Boolean.Type gt (Integer.Type n, Integer.Type m) @Exp n > m;
  expdef Boolean.Type le (Integer.Type n, Integer.Type m) @Exp n <= m;
  expdef Boolean.Type ge (Integer.Type n, Integer.Type m) @Exp n >= m;
}
