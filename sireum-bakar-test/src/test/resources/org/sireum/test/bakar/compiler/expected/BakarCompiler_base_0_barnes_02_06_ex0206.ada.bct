@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Stacks
@PackageAnnotation(
  theSourceFileName = "ex0206.ada",
  theSparkName = Stacks,
  thePilarSparkName = Stacks,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 27,
  theCol = 12,
  theOffset = 723),
  theOptionalSource = "ex0206.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 15,
  theOffset = 13),
  theOptionalSource = "ex0206.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

const $Const {
  Stack_Size = (Standard::Integer) (100) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PRIVATE,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 18,
        theCol = 4,
        theOffset = 394),
        theEndCaret = 
        @Caret(
        theLine = 18,
        theCol = 14,
        theOffset = 403),
        theOptionalSource = "ex0206.ada"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Pointer_Range
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PRIVATE,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 4,
      theOffset = 428),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 48,
      theOffset = 471),
      theOptionalSource = "ex0206.ada"
    ),
    fullyQualifiedName = Stacks::Pointer_Range,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = 0,
        theHighRangeExp = Stacks::$Const.Stack_Size))
{}
record Index_Range
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PRIVATE,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 4,
      theOffset = 477),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 63,
      theOffset = 535),
      theOptionalSource = "ex0206.ada"
    ),
    fullyQualifiedName = Stacks::Index_Range,
    type = `Stacks::Pointer_Range,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = Stacks::$Const.Stack_Size,
        lowerBound = 1)))
{}
record Vector
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PRIVATE,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 4,
      theOffset = 541),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 49,
      theOffset = 585),
      theOptionalSource = "ex0206.ada"
    ),
    fullyQualifiedName = Stacks::Vector,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Integer,
        theDiscreteSubTypes = 
          @List(`Stacks::Index_Range)
      ))
{}
record Stack
  @PrivateTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 4,
      theOffset = 591),
      theEndCaret = 
      @Caret(
      theLine = 26,
      theCol = 18,
      theOffset = 710),
      theOptionalSource = "ex0206.ada"
    ),
    fullyQualifiedName = Stacks::Stack,
    tagged = false,
    limited = false,
    theDeclarationLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 3,
        theCol = 4,
        theOffset = 24),
        theEndCaret = 
        @Caret(
        theLine = 3,
        theCol = 26,
        theOffset = 45),
        theOptionalSource = "ex0206.ada"
      ),
    typeDefinition = 
      @RecordTypeDefinition(
        tagged = false,
        parentType=@NONE))
{
  Stacks::Vector stack_vector @RecordComponentAnnotation(
    sparkID = Stack_Vector
  );
  Stacks::Pointer_Range stack_pointer @RecordComponentAnnotation(
    sparkID = Stack_Pointer
  );
}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Boolean Is_Empty 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 22,
  theOffset = 71),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 23,
  theOffset = 71),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 53),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 48,
      theOffset = 96),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 13,
      theOffset = 62),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 21,
      theOffset = 69),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 53),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 47,
      theOffset = 95),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Empty 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 22,
  theOffset = 71),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 23,
  theOffset = 71),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 53),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 48,
      theOffset = 96),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 53),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 48,
      theOffset = 96),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 53),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 48,
      theOffset = 96),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Full 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 21,
  theOffset = 119),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 22,
  theOffset = 119),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 102),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 47,
      theOffset = 144),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 13,
      theOffset = 111),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 20,
      theOffset = 117),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 102),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 46,
      theOffset = 143),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Full 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 21,
  theOffset = 119),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 22,
  theOffset = 119),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 102),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 47,
      theOffset = 144),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 102),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 47,
      theOffset = 144),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 102),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 47,
      theOffset = 144),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}
procedure Clear 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 20,
  theOffset = 168),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 21,
  theOffset = 168),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @NONE,
      theOptionalOutParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 9,
                          theCol = 16,
                          theOffset = 200),
                          theEndCaret = 
                          @Caret(
                          theLine = 9,
                          theCol = 17,
                          theOffset = 200),
                          theOptionalSource = "ex0206.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @NONE
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 9,
                  theCol = 16,
                  theOffset = 200),
                  theEndCaret = 
                  @Caret(
                  theLine = 9,
                  theCol = 22,
                  theOffset = 205),
                  theOptionalSource = "ex0206.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 9,
              theCol = 8,
              theOffset = 192),
              theEndCaret = 
              @Caret(
              theLine = 9,
              theCol = 24,
              theOffset = 207),
              theOptionalSource = "ex0206.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 4,
      theOffset = 152),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 35,
      theOffset = 182),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 14,
      theOffset = 162),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 19,
      theOffset = 166),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 4,
      theOffset = 152),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 34,
      theOffset = 181),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}
procedure Push 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 19,
  theOffset = 230),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 20,
  theOffset = 230),
  theOptionalSource = "ex0206.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 37,
  theOffset = 248),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 38,
  theOffset = 248),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S,
            X),
      theOptionalOutParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 16,
                          theOffset = 281),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 17,
                          theOffset = 281),
                          theOptionalSource = "ex0206.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 23,
                          theOffset = 288),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 24,
                          theOffset = 288),
                          theOptionalSource = "ex0206.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = X,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 26,
                          theOffset = 291),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 27,
                          theOffset = 291),
                          theOptionalSource = "ex0206.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 12,
                  theCol = 16,
                  theOffset = 281),
                  theEndCaret = 
                  @Caret(
                  theLine = 12,
                  theCol = 27,
                  theOffset = 291),
                  theOptionalSource = "ex0206.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 12,
              theCol = 8,
              theOffset = 273),
              theEndCaret = 
              @Caret(
              theLine = 12,
              theCol = 28,
              theOffset = 292),
              theOptionalSource = "ex0206.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 4,
      theOffset = 215),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 53,
      theOffset = 263),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 14,
      theOffset = 225),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 18,
      theOffset = 228),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 4,
      theOffset = 215),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 52,
      theOffset = 262),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}
procedure Pop 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 18,
  theOffset = 314),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 19,
  theOffset = 314),
  theOptionalSource = "ex0206.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 36,
  theOffset = 332),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 37,
  theOffset = 332),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S),
      theOptionalOutParameters = @List(S,
          X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 16,
                          theOffset = 366),
                          theEndCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 17,
                          theOffset = 366),
                          theOptionalSource = "ex0206.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 26,
                          theOffset = 376),
                          theEndCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 27,
                          theOffset = 376),
                          theOptionalSource = "ex0206.ada"
                        )
                    ))
                ),
                      @DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = X,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 19,
                          theOffset = 369),
                          theEndCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 20,
                          theOffset = 369),
                          theOptionalSource = "ex0206.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 26,
                          theOffset = 376),
                          theEndCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 27,
                          theOffset = 376),
                          theOptionalSource = "ex0206.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 15,
                  theCol = 16,
                  theOffset = 366),
                  theEndCaret = 
                  @Caret(
                  theLine = 15,
                  theCol = 27,
                  theOffset = 376),
                  theOptionalSource = "ex0206.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 15,
              theCol = 8,
              theOffset = 358),
              theEndCaret = 
              @Caret(
              theLine = 15,
              theCol = 28,
              theOffset = 377),
              theOptionalSource = "ex0206.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 300),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 53,
      theOffset = 348),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 14,
      theOffset = 310),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 17,
      theOffset = 312),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 300),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 52,
      theOffset = 347),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Stacks
@PackageAnnotation(
  theSourceFileName = "ex0206.ada",
  theSparkName = Stacks,
  thePilarSparkName = Stacks,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 29,
  theCol = 1,
  theOffset = 728),
  theEndCaret = 
  @Caret(
  theLine = 57,
  theCol = 12,
  theOffset = 1492),
  theOptionalSource = "ex0206.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 29,
  theCol = 1,
  theOffset = 728),
  theEndCaret = 
  @Caret(
  theLine = 29,
  theCol = 20,
  theOffset = 746),
  theOptionalSource = "ex0206.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Boolean Is_Empty 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 30,
  theCol = 22,
  theOffset = 773),
  theEndCaret = 
  @Caret(
  theLine = 30,
  theCol = 23,
  theOffset = 773),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 755),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 863),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 13,
      theOffset = 764),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 21,
      theOffset = 771),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 755),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 47,
      theOffset = 797),
      theOptionalSource = "ex0206.ada"
    )
) 
{

  local
    Stacks::Pointer_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := S.stack_pointer;
  #l2.  temp$2 := 0;
  #l3.  temp$3 := (temp$1 == temp$2);
  #l4. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l4,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 7,
      theOffset = 819),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 34,
      theOffset = 845),
      theOptionalSource = "ex0206.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$3;
}
procedure Standard::Boolean Is_Empty 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 30,
  theCol = 22,
  theOffset = 773),
  theEndCaret = 
  @Caret(
  theLine = 30,
  theCol = 23,
  theOffset = 773),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 755),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 863),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 755),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 863),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 755),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 863),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Full 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 21,
  theOffset = 888),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 22,
  theOffset = 888),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 871),
      theEndCaret = 
      @Caret(
      theLine = 38,
      theCol = 16,
      theOffset = 986),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 13,
      theOffset = 880),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 20,
      theOffset = 886),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 871),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 46,
      theOffset = 912),
      theOptionalSource = "ex0206.ada"
    )
) 
{

  local
    Stacks::Pointer_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l5.  temp$1 := S.stack_pointer;
  #l6.  temp$2 := Stacks::$Const.Stack_Size;
  #l7.  temp$3 := (temp$1 == temp$2);
  #l8. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l5,
      endLabel = l8,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 7,
      theOffset = 934),
      theEndCaret = 
      @Caret(
      theLine = 37,
      theCol = 43,
      theOffset = 969),
      theOptionalSource = "ex0206.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$3;
}
procedure Standard::Boolean Is_Full 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 21,
  theOffset = 888),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 22,
  theOffset = 888),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 871),
      theEndCaret = 
      @Caret(
      theLine = 38,
      theCol = 16,
      theOffset = 986),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 871),
      theEndCaret = 
      @Caret(
      theLine = 38,
      theCol = 16,
      theOffset = 986),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 871),
      theEndCaret = 
      @Caret(
      theLine = 38,
      theCol = 16,
      theOffset = 986),
      theOptionalSource = "ex0206.ada"
    )
) 
{ #locret. return;}
procedure Clear 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 40,
  theCol = 20,
  theOffset = 1010),
  theEndCaret = 
  @Caret(
  theLine = 40,
  theCol = 21,
  theOffset = 1010),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @NONE,
      theOptionalOutParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 40,
      theCol = 4,
      theOffset = 994),
      theEndCaret = 
      @Caret(
      theLine = 44,
      theCol = 14,
      theOffset = 1132),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 40,
      theCol = 14,
      theOffset = 1004),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 19,
      theOffset = 1008),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 40,
      theCol = 4,
      theOffset = 994),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 34,
      theOffset = 1023),
      theOptionalSource = "ex0206.ada"
    )
) 
{

  local
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l9.  temp$1 := 0;
  #l10. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l9,
      endLabel = l10,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 42,
      theCol = 7,
      theOffset = 1045),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 28,
      theOffset = 1065),
      theOptionalSource = "ex0206.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  S.stack_pointer := temp$1;
  #l11. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l11,
      endLabel = l11,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 43,
      theCol = 7,
      theOffset = 1074),
      theEndCaret = 
      @Caret(
      theLine = 43,
      theCol = 51,
      theOffset = 1117),
      theOptionalSource = "ex0206.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  S.stack_vector := `Stacks::Vector (
     
    {
      Stacks::Index_Range iter1 => 
        switch iter1 
            | ($First(`Stacks::Index_Range), $Last(`Stacks::Index_Range)) => (
                0
              )
    | => ($I_THOUGHT_PILAR_SWITCH_STATEMENTS_DID_NOT_NEED_A_DEFAULT_ANYMORE__PLEASE_FIX_ME())
    }
  );
  #l12.  return;
}
procedure Push 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 46,
  theCol = 19,
  theOffset = 1155),
  theEndCaret = 
  @Caret(
  theLine = 46,
  theCol = 20,
  theOffset = 1155),
  theOptionalSource = "ex0206.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 46,
  theCol = 37,
  theOffset = 1173),
  theEndCaret = 
  @Caret(
  theLine = 46,
  theCol = 38,
  theOffset = 1173),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(S,
            X),
      theOptionalOutParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 46,
      theCol = 4,
      theOffset = 1140),
      theEndCaret = 
      @Caret(
      theLine = 50,
      theCol = 13,
      theOffset = 1306),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 46,
      theCol = 14,
      theOffset = 1150),
      theEndCaret = 
      @Caret(
      theLine = 46,
      theCol = 18,
      theOffset = 1153),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 46,
      theCol = 4,
      theOffset = 1140),
      theEndCaret = 
      @Caret(
      theLine = 46,
      theCol = 52,
      theOffset = 1187),
      theOptionalSource = "ex0206.ada"
    )
) 
{

  local
    Stacks::Pointer_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Stacks::Pointer_Range temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Stacks::Pointer_Range temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l13.  temp$1 := S.stack_pointer;
  #l14.  temp$2 := 1;
  #l15.  temp$3 := (temp$1 + temp$2);
  #l16. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l13,
      endLabel = l16,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 7,
      theOffset = 1209),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 46,
      theOffset = 1247),
      theOptionalSource = "ex0206.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  S.stack_pointer := temp$3;
  #l17.  temp$4 := S.stack_pointer;
  #l18.  temp$5 := X;
  #l19. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l17,
      endLabel = l19,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 49,
      theCol = 7,
      theOffset = 1256),
      theEndCaret = 
      @Caret(
      theLine = 49,
      theCol = 44,
      theOffset = 1292),
      theOptionalSource = "ex0206.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  S.stack_vector [temp$4] := temp$5;
  #l20.  return;
}
procedure Pop 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 52,
  theCol = 18,
  theOffset = 1328),
  theEndCaret = 
  @Caret(
  theLine = 52,
  theCol = 19,
  theOffset = 1328),
  theOptionalSource = "ex0206.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 52,
  theCol = 36,
  theOffset = 1346),
  theEndCaret = 
  @Caret(
  theLine = 52,
  theCol = 37,
  theOffset = 1346),
  theOptionalSource = "ex0206.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0206.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(S),
      theOptionalOutParameters = @List(S,
          X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 52,
      theCol = 4,
      theOffset = 1314),
      theEndCaret = 
      @Caret(
      theLine = 56,
      theCol = 12,
      theOffset = 1479),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 52,
      theCol = 14,
      theOffset = 1324),
      theEndCaret = 
      @Caret(
      theLine = 52,
      theCol = 17,
      theOffset = 1326),
      theOptionalSource = "ex0206.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 52,
      theCol = 4,
      theOffset = 1314),
      theEndCaret = 
      @Caret(
      theLine = 52,
      theCol = 52,
      theOffset = 1361),
      theOptionalSource = "ex0206.ada"
    )
) 
{

  local
    Stacks::Pointer_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Stacks::Pointer_Range temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Stacks::Pointer_Range temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l21.  temp$1 := S.stack_pointer;
  #l22.  temp$2 := S.stack_vector [temp$1];
  #l23. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l21,
      endLabel = l23,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 7,
      theOffset = 1383),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 44,
      theOffset = 1419),
      theOptionalSource = "ex0206.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  X := temp$2;
  #l24.  temp$3 := S.stack_pointer;
  #l25.  temp$4 := 1;
  #l26.  temp$5 := (temp$3 - temp$4);
  #l27. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l24,
      endLabel = l27,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 55,
      theCol = 7,
      theOffset = 1428),
      theEndCaret = 
      @Caret(
      theLine = 55,
      theCol = 46,
      theOffset = 1466),
      theOptionalSource = "ex0206.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  S.stack_pointer := temp$5;
  #l28.  return;
}