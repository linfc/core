@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Sort
@PackageAnnotation(
  theSourceFileName = "sort.ada",
  theSparkName = Sort,
  thePilarSparkName = Sort,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 34,
  theCol = 10,
  theOffset = 1326),
  theOptionalSource = "sort.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 13,
  theOffset = 11),
  theOptionalSource = "sort.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

const $Const {
  Max_Elements = (Standard::Integer) (3) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PUBLIC,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 2,
        theCol = 3,
        theOffset = 18),
        theEndCaret = 
        @Caret(
        theLine = 2,
        theCol = 15,
        theOffset = 29),
        theOptionalSource = "sort.ada"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Base_Index_Type
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 4,
      theCol = 3,
      theOffset = 51),
      theEndCaret = 
      @Caret(
      theLine = 4,
      theCol = 62,
      theOffset = 109),
      theOptionalSource = "sort.ada"
    ),
    fullyQualifiedName = Sort::Base_Index_Type,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = Sort::$Const.Max_Elements,
        lowerBound = 0)))
{}
record Index_Type
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 113),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 73,
      theOffset = 182),
      theOptionalSource = "sort.ada"
    ),
    fullyQualifiedName = Sort::Index_Type,
    type = `Sort::Base_Index_Type,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Sort::Base_Index_Type),
        lowerBound = 1)))
{}
record Contents_Type
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 187),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 45,
      theOffset = 228),
      theOptionalSource = "sort.ada"
    ),
    fullyQualifiedName = Sort::Contents_Type,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = -(1000),
        theHighRangeExp = 1000))
{}
record Array_Type
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 232),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 57,
      theOffset = 285),
      theOptionalSource = "sort.ada"
    ),
    fullyQualifiedName = Sort::Array_Type,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Sort::Contents_Type,
        theDiscreteSubTypes = 
          @List(`Sort::Index_Type)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Boolean Ordered 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 20,
  theOffset = 307),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 21,
  theOffset = 307),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 36,
  theOffset = 323),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 37,
  theOffset = 323),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 38,
  theOffset = 325),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 39,
  theOffset = 325),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 290),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 69,
      theOffset = 355),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 12,
      theOffset = 299),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 19,
      theOffset = 305),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 290),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 68,
      theOffset = 354),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Ordered 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 20,
  theOffset = 307),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 21,
  theOffset = 307),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 36,
  theOffset = 323),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 37,
  theOffset = 323),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 38,
  theOffset = 325),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 39,
  theOffset = 325),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 290),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 69,
      theOffset = 355),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 290),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 69,
      theOffset = 355),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 290),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 69,
      theOffset = 355),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Perm 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 17,
  theOffset = 374),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 18,
  theOffset = 374),
  theOptionalSource = "sort.ada"
),
       Sort::Array_Type B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 20,
  theOffset = 377),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 21,
  theOffset = 377),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 36,
  theOffset = 393),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 37,
  theOffset = 393),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 38,
  theOffset = 395),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 39,
  theOffset = 395),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A,
            B,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 360),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 69,
      theOffset = 425),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 12,
      theOffset = 369),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 16,
      theOffset = 372),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 360),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 68,
      theOffset = 424),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Perm 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 17,
  theOffset = 374),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 18,
  theOffset = 374),
  theOptionalSource = "sort.ada"
),
       Sort::Array_Type B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 20,
  theOffset = 377),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 21,
  theOffset = 377),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 36,
  theOffset = 393),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 37,
  theOffset = 393),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 38,
  theOffset = 395),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 39,
  theOffset = 395),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A,
            B,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 360),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 69,
      theOffset = 425),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 360),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 69,
      theOffset = 425),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 360),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 69,
      theOffset = 425),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure BubbleSort 
      (Sort::Array_Type Table @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 25,
  theOffset = 452),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 30,
  theOffset = 456),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Table),
      theOptionalOutParameters = @List(Table)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $AND(Sort::Ordered (Table, $First(`Sort::Index_Type), $Last(`Sort::Index_Type)),Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 16,
          theCol = 8,
          theOffset = 520),
          theEndCaret = 
          @Caret(
          theLine = 17,
          theCol = 68,
          theOffset = 646),
          theOptionalSource = "sort.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Table,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 16,
                          theOffset = 495),
                          theEndCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 21,
                          theOffset = 499),
                          theOptionalSource = "sort.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Table,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 27,
                          theOffset = 506),
                          theEndCaret = 
                          @Caret(
                          theLine = 15,
                          theCol = 32,
                          theOffset = 510),
                          theOptionalSource = "sort.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 15,
                  theCol = 16,
                  theOffset = 495),
                  theEndCaret = 
                  @Caret(
                  theLine = 15,
                  theCol = 32,
                  theOffset = 510),
                  theOptionalSource = "sort.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 15,
              theCol = 8,
              theOffset = 487),
              theEndCaret = 
              @Caret(
              theLine = 15,
              theCol = 33,
              theOffset = 511),
              theOptionalSource = "sort.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 431),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 52,
      theOffset = 478),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 14,
      theOffset = 441),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 24,
      theOffset = 450),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 431),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 51,
      theOffset = 477),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure BubbleSortFast 
      (Sort::Array_Type Table @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 19,
  theCol = 28,
  theOffset = 676),
  theEndCaret = 
  @Caret(
  theLine = 19,
  theCol = 33,
  theOffset = 680),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Table),
      theOptionalOutParameters = @List(Table)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $AND(Sort::Ordered (Table, $First(`Sort::Index_Type), $Last(`Sort::Index_Type)),Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 21,
          theCol = 9,
          theOffset = 746),
          theEndCaret = 
          @Caret(
          theLine = 22,
          theCol = 66,
          theOffset = 869),
          theOptionalSource = "sort.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Table,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 20,
                          theCol = 17,
                          theOffset = 720),
                          theEndCaret = 
                          @Caret(
                          theLine = 20,
                          theCol = 22,
                          theOffset = 724),
                          theOptionalSource = "sort.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Table,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 20,
                          theCol = 28,
                          theOffset = 731),
                          theEndCaret = 
                          @Caret(
                          theLine = 20,
                          theCol = 33,
                          theOffset = 735),
                          theOptionalSource = "sort.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 20,
                  theCol = 17,
                  theOffset = 720),
                  theEndCaret = 
                  @Caret(
                  theLine = 20,
                  theCol = 33,
                  theOffset = 735),
                  theOptionalSource = "sort.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 20,
              theCol = 9,
              theOffset = 712),
              theEndCaret = 
              @Caret(
              theLine = 20,
              theCol = 34,
              theOffset = 736),
              theOptionalSource = "sort.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 3,
      theOffset = 651),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 55,
      theOffset = 702),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 13,
      theOffset = 661),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 27,
      theOffset = 674),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 3,
      theOffset = 651),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 54,
      theOffset = 701),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure InsertionSort 
      (Sort::Array_Type Table @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 24,
  theCol = 27,
  theOffset = 902),
  theEndCaret = 
  @Caret(
  theLine = 24,
  theCol = 32,
  theOffset = 906),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Table),
      theOptionalOutParameters = @List(Table)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $AND(Sort::Ordered (Table, $First(`Sort::Index_Type), $Last(`Sort::Index_Type)),Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 26,
          theCol = 9,
          theOffset = 972),
          theEndCaret = 
          @Caret(
          theLine = 27,
          theCol = 65,
          theOffset = 1094),
          theOptionalSource = "sort.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Table,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 25,
                          theCol = 17,
                          theOffset = 946),
                          theEndCaret = 
                          @Caret(
                          theLine = 25,
                          theCol = 22,
                          theOffset = 950),
                          theOptionalSource = "sort.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Table,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 25,
                          theCol = 28,
                          theOffset = 957),
                          theEndCaret = 
                          @Caret(
                          theLine = 25,
                          theCol = 33,
                          theOffset = 961),
                          theOptionalSource = "sort.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 25,
                  theCol = 17,
                  theOffset = 946),
                  theEndCaret = 
                  @Caret(
                  theLine = 25,
                  theCol = 33,
                  theOffset = 961),
                  theOptionalSource = "sort.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 25,
              theCol = 9,
              theOffset = 938),
              theEndCaret = 
              @Caret(
              theLine = 25,
              theCol = 34,
              theOffset = 962),
              theOptionalSource = "sort.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 24,
      theCol = 3,
      theOffset = 878),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 54,
      theOffset = 928),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 24,
      theCol = 13,
      theOffset = 888),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 26,
      theOffset = 900),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 24,
      theCol = 3,
      theOffset = 878),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 53,
      theOffset = 927),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure ShellSort 
      (Sort::Array_Type Table @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 29,
  theCol = 23,
  theOffset = 1123),
  theEndCaret = 
  @Caret(
  theLine = 29,
  theCol = 28,
  theOffset = 1127),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Table),
      theOptionalOutParameters = @List(Table)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $AND(Sort::Ordered (Table, $First(`Sort::Index_Type), $Last(`Sort::Index_Type)),Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 31,
          theCol = 7,
          theOffset = 1189),
          theEndCaret = 
          @Caret(
          theLine = 32,
          theCol = 67,
          theOffset = 1313),
          theOptionalSource = "sort.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Table,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 30,
                          theCol = 15,
                          theOffset = 1165),
                          theEndCaret = 
                          @Caret(
                          theLine = 30,
                          theCol = 20,
                          theOffset = 1169),
                          theOptionalSource = "sort.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Table,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 30,
                          theCol = 26,
                          theOffset = 1176),
                          theEndCaret = 
                          @Caret(
                          theLine = 30,
                          theCol = 31,
                          theOffset = 1180),
                          theOptionalSource = "sort.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 30,
                  theCol = 15,
                  theOffset = 1165),
                  theEndCaret = 
                  @Caret(
                  theLine = 30,
                  theCol = 31,
                  theOffset = 1180),
                  theOptionalSource = "sort.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 30,
              theCol = 7,
              theOffset = 1157),
              theEndCaret = 
              @Caret(
              theLine = 30,
              theCol = 32,
              theOffset = 1181),
              theOptionalSource = "sort.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 29,
      theCol = 3,
      theOffset = 1103),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 50,
      theOffset = 1149),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 29,
      theCol = 13,
      theOffset = 1113),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 22,
      theOffset = 1121),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 29,
      theCol = 3,
      theOffset = 1103),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 49,
      theOffset = 1148),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Sort
@PackageAnnotation(
  theSourceFileName = "sort.ada",
  theSparkName = Sort,
  thePilarSparkName = Sort,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 36,
  theCol = 1,
  theOffset = 1329),
  theEndCaret = 
  @Caret(
  theLine = 203,
  theCol = 10,
  theOffset = 6836),
  theOptionalSource = "sort.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 36,
  theCol = 1,
  theOffset = 1329),
  theEndCaret = 
  @Caret(
  theLine = 36,
  theCol = 18,
  theOffset = 1345),
  theOptionalSource = "sort.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Integer Num_Repetition 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 37,
  theCol = 27,
  theOffset = 1376),
  theEndCaret = 
  @Caret(
  theLine = 37,
  theCol = 28,
  theOffset = 1376),
  theOptionalSource = "sort.ada"
),
       Sort::Contents_Type E @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 37,
  theCol = 43,
  theOffset = 1392),
  theEndCaret = 
  @Caret(
  theLine = 37,
  theCol = 44,
  theOffset = 1392),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 38,
  theCol = 27,
  theOffset = 1438),
  theEndCaret = 
  @Caret(
  theLine = 38,
  theCol = 28,
  theOffset = 1438),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 38,
  theCol = 29,
  theOffset = 1440),
  theEndCaret = 
  @Caret(
  theLine = 38,
  theCol = 30,
  theOffset = 1440),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            E,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 3,
      theOffset = 1352),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 22,
      theOffset = 1673),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 12,
      theOffset = 1361),
      theEndCaret = 
      @Caret(
      theLine = 37,
      theCol = 26,
      theOffset = 1374),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 3,
      theOffset = 1352),
      theEndCaret = 
      @Caret(
      theLine = 38,
      theCol = 59,
      theOffset = 1469),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Standard::Integer Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 40,
      theCol = 5,
      theOffset = 1481),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 11,
      theOffset = 1486),
      theOptionalSource = "sort.ada"
    )
    );
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := 0;
  #l2. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l2,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 40,
      theCol = 5,
      theOffset = 1481),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 11,
      theOffset = 1486),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Result := temp$1;
    #l5.  temp$2 := U;
    #l6.  temp$3 := L;
    #l7.  if (temp$3 > temp$2) then goto l4;
    #l8.  I := temp$3;
    #l3. 
    #l9.  temp$4 := I;
    #l10.  temp$5 := A [temp$4];
    #l11.  temp$6 := E;
    #l12.  temp$7 := (temp$5 == temp$6);
    #l13.  if !(temp$7) then goto l14; 
    #l15.  temp$8 := Result;
    #l16.  temp$9 := 1;
    #l17.  temp$10 := (temp$8 + temp$9);
    #l18. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l15,
        endLabel = l18,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 44,
        theCol = 9,
        theOffset = 1584),
        theEndCaret = 
        @Caret(
        theLine = 44,
        theCol = 30,
        theOffset = 1604),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$10;
    #l19.  goto l20;
    #l14. 
    #l20. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l9,
      endLabel = l13,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 43,
      theCol = 7,
      theOffset = 1559),
      theEndCaret = 
      @Caret(
      theLine = 43,
      theCol = 18,
      theOffset = 1569),
      theOptionalSource = "sort.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l9,
        endLabel = l20,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 43,
        theCol = 7,
        theOffset = 1559),
        theEndCaret = 
        @Caret(
        theLine = 45,
        theCol = 14,
        theOffset = 1618),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l21.  temp$11 := (I == temp$2);
    #l22.  if temp$11 then goto l4;
    #l23.  temp$12 := I + 1;
    #l24.  I := temp$12;
    #l25.  goto l3;
    #l4. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l5,
      endLabel = l8,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 42,
      theCol = 5,
      theOffset = 1515),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 42,
      theOffset = 1551),
      theOptionalSource = "sort.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l5,
          endLabel = l4,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 42,
          theCol = 5,
          theOffset = 1515),
          theEndCaret = 
          @Caret(
          theLine = 46,
          theCol = 14,
          theOffset = 1632),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l26.  temp$13 := Result;
  #l27. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l26,
      endLabel = l27,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 47,
      theCol = 5,
      theOffset = 1638),
      theEndCaret = 
      @Caret(
      theLine = 47,
      theCol = 19,
      theOffset = 1651),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$13;
}
procedure Standard::Integer Num_Repetition 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 37,
  theCol = 27,
  theOffset = 1376),
  theEndCaret = 
  @Caret(
  theLine = 37,
  theCol = 28,
  theOffset = 1376),
  theOptionalSource = "sort.ada"
),
       Sort::Contents_Type E @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 37,
  theCol = 43,
  theOffset = 1392),
  theEndCaret = 
  @Caret(
  theLine = 37,
  theCol = 44,
  theOffset = 1392),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 38,
  theCol = 27,
  theOffset = 1438),
  theEndCaret = 
  @Caret(
  theLine = 38,
  theCol = 28,
  theOffset = 1438),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 38,
  theCol = 29,
  theOffset = 1440),
  theEndCaret = 
  @Caret(
  theLine = 38,
  theCol = 30,
  theOffset = 1440),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            E,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 3,
      theOffset = 1352),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 22,
      theOffset = 1673),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 3,
      theOffset = 1352),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 22,
      theOffset = 1673),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 3,
      theOffset = 1352),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 22,
      theOffset = 1673),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Perm 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 17,
  theOffset = 1692),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 18,
  theOffset = 1692),
  theOptionalSource = "sort.ada"
),
       Sort::Array_Type B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 20,
  theOffset = 1695),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 21,
  theOffset = 1695),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 36,
  theOffset = 1711),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 37,
  theOffset = 1711),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 38,
  theOffset = 1713),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 39,
  theOffset = 1713),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            B,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 1678),
      theEndCaret = 
      @Caret(
      theLine = 60,
      theCol = 12,
      theOffset = 1988),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 12,
      theOffset = 1687),
      theEndCaret = 
      @Caret(
      theLine = 50,
      theCol = 16,
      theOffset = 1690),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 1678),
      theEndCaret = 
      @Caret(
      theLine = 50,
      theCol = 68,
      theOffset = 1742),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 52,
      theCol = 5,
      theOffset = 1754),
      theEndCaret = 
      @Caret(
      theLine = 52,
      theCol = 11,
      theOffset = 1759),
      theOptionalSource = "sort.ada"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Array_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Array_Type temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l28.  temp$1 := true;
  #l29. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l28,
      endLabel = l29,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 52,
      theCol = 5,
      theOffset = 1754),
      theEndCaret = 
      @Caret(
      theLine = 52,
      theCol = 11,
      theOffset = 1759),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Result := temp$1;
    #l32.  temp$2 := U;
    #l33.  temp$3 := L;
    #l34.  if (temp$3 > temp$2) then goto l31;
    #l35.  I := temp$3;
    #l30. 
    #l36.  temp$4 := A;
    #l37.  temp$5 := I;
    #l38.  temp$6 := A [temp$5];
    #l39.  temp$7 := L;
    #l40.  temp$8 := U;
    #l41.  call temp$9 := Sort::Num_Repetition (temp$4, temp$6, temp$7, temp$8);
    #l42.  temp$10 := B;
    #l43.  temp$11 := I;
    #l44.  temp$12 := A [temp$11];
    #l45.  temp$13 := L;
    #l46.  temp$14 := U;
    #l47.  call temp$15 := Sort::Num_Repetition (temp$10, temp$12, temp$13, temp$14);
    #l48.  temp$16 := (temp$9 != temp$15);
    #l49.  if !(temp$16) then goto l50; 
    #l51.  temp$17 := false;
    #l52. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l51,
        endLabel = l52,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 56,
        theCol = 9,
        theOffset = 1914),
        theEndCaret = 
        @Caret(
        theLine = 56,
        theCol = 25,
        theOffset = 1929),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$17;
    #l53.  goto l54;
    #l50. 
    #l54. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l36,
      endLabel = l49,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 55,
      theCol = 7,
      theOffset = 1835),
      theEndCaret = 
      @Caret(
      theLine = 55,
      theCol = 72,
      theOffset = 1899),
      theOptionalSource = "sort.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l36,
        endLabel = l54,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 55,
        theCol = 7,
        theOffset = 1835),
        theEndCaret = 
        @Caret(
        theLine = 57,
        theCol = 14,
        theOffset = 1943),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l55.  temp$18 := (I == temp$2);
    #l56.  if temp$18 then goto l31;
    #l57.  temp$19 := I + 1;
    #l58.  I := temp$19;
    #l59.  goto l30;
    #l31. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l32,
      endLabel = l35,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 5,
      theOffset = 1791),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 42,
      theOffset = 1827),
      theOptionalSource = "sort.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l32,
          endLabel = l31,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 54,
          theCol = 5,
          theOffset = 1791),
          theEndCaret = 
          @Caret(
          theLine = 58,
          theCol = 14,
          theOffset = 1957),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l60.  temp$20 := Result;
  #l61. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l60,
      endLabel = l61,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 59,
      theCol = 5,
      theOffset = 1963),
      theEndCaret = 
      @Caret(
      theLine = 59,
      theCol = 19,
      theOffset = 1976),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$20;
}
procedure Standard::Boolean Perm 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 17,
  theOffset = 1692),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 18,
  theOffset = 1692),
  theOptionalSource = "sort.ada"
),
       Sort::Array_Type B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 20,
  theOffset = 1695),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 21,
  theOffset = 1695),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 36,
  theOffset = 1711),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 37,
  theOffset = 1711),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 38,
  theOffset = 1713),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 39,
  theOffset = 1713),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            B,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 1678),
      theEndCaret = 
      @Caret(
      theLine = 60,
      theCol = 12,
      theOffset = 1988),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 1678),
      theEndCaret = 
      @Caret(
      theLine = 60,
      theCol = 12,
      theOffset = 1988),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 1678),
      theEndCaret = 
      @Caret(
      theLine = 60,
      theCol = 12,
      theOffset = 1988),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Ordered 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 62,
  theCol = 20,
  theOffset = 2010),
  theEndCaret = 
  @Caret(
  theLine = 62,
  theCol = 21,
  theOffset = 2010),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 62,
  theCol = 35,
  theOffset = 2025),
  theEndCaret = 
  @Caret(
  theLine = 62,
  theCol = 36,
  theOffset = 2025),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 62,
  theCol = 37,
  theOffset = 2027),
  theEndCaret = 
  @Caret(
  theLine = 62,
  theCol = 38,
  theOffset = 2027),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 62,
      theCol = 3,
      theOffset = 1993),
      theEndCaret = 
      @Caret(
      theLine = 72,
      theCol = 15,
      theOffset = 2261),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 62,
      theCol = 12,
      theOffset = 2002),
      theEndCaret = 
      @Caret(
      theLine = 62,
      theCol = 19,
      theOffset = 2008),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 62,
      theCol = 3,
      theOffset = 1993),
      theEndCaret = 
      @Caret(
      theLine = 62,
      theCol = 67,
      theOffset = 2056),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 64,
      theCol = 5,
      theOffset = 2067),
      theEndCaret = 
      @Caret(
      theLine = 64,
      theCol = 11,
      theOffset = 2072),
      theOptionalSource = "sort.ada"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l62.  temp$1 := true;
  #l63. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l62,
      endLabel = l63,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 64,
      theCol = 5,
      theOffset = 2067),
      theEndCaret = 
      @Caret(
      theLine = 64,
      theCol = 11,
      theOffset = 2072),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Result := temp$1;
    #l66.  temp$2 := U;
    #l67.  temp$3 := 1;
    #l68.  temp$4 := (temp$2 - temp$3);
    #l69.  temp$5 := L;
    #l70.  if (temp$5 > temp$4) then goto l65;
    #l71.  I := temp$5;
    #l64. 
    #l72.  temp$6 := I;
    #l73.  temp$7 := A [temp$6];
    #l74.  temp$8 := I;
    #l75.  temp$9 := 1;
    #l76.  temp$10 := (temp$8 + temp$9);
    #l77.  temp$11 := A [temp$10];
    #l78.  temp$12 := (temp$7 > temp$11);
    #l79.  if !(temp$12) then goto l80; 
    #l81.  temp$13 := false;
    #l82. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l81,
        endLabel = l82,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 68,
        theCol = 9,
        theOffset = 2184),
        theEndCaret = 
        @Caret(
        theLine = 68,
        theCol = 25,
        theOffset = 2199),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$13;
    #l83.  goto l84;
    #l80. 
    #l84. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l72,
      endLabel = l79,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 67,
      theCol = 7,
      theOffset = 2152),
      theEndCaret = 
      @Caret(
      theLine = 67,
      theCol = 25,
      theOffset = 2169),
      theOptionalSource = "sort.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l72,
        endLabel = l84,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 67,
        theCol = 7,
        theOffset = 2152),
        theEndCaret = 
        @Caret(
        theLine = 69,
        theCol = 14,
        theOffset = 2213),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l85.  temp$14 := (I == temp$4);
    #l86.  if temp$14 then goto l65;
    #l87.  temp$15 := I + 1;
    #l88.  I := temp$15;
    #l89.  goto l64;
    #l65. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l66,
      endLabel = l71,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 66,
      theCol = 5,
      theOffset = 2104),
      theEndCaret = 
      @Caret(
      theLine = 66,
      theCol = 46,
      theOffset = 2144),
      theOptionalSource = "sort.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l66,
          endLabel = l65,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 66,
          theCol = 5,
          theOffset = 2104),
          theEndCaret = 
          @Caret(
          theLine = 70,
          theCol = 14,
          theOffset = 2227),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l90.  temp$16 := Result;
  #l91. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l90,
      endLabel = l91,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 71,
      theCol = 5,
      theOffset = 2233),
      theEndCaret = 
      @Caret(
      theLine = 71,
      theCol = 19,
      theOffset = 2246),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$16;
}
procedure Standard::Boolean Ordered 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 62,
  theCol = 20,
  theOffset = 2010),
  theEndCaret = 
  @Caret(
  theLine = 62,
  theCol = 21,
  theOffset = 2010),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 62,
  theCol = 35,
  theOffset = 2025),
  theEndCaret = 
  @Caret(
  theLine = 62,
  theCol = 36,
  theOffset = 2025),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 62,
  theCol = 37,
  theOffset = 2027),
  theEndCaret = 
  @Caret(
  theLine = 62,
  theCol = 38,
  theOffset = 2027),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            L,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 62,
      theCol = 3,
      theOffset = 1993),
      theEndCaret = 
      @Caret(
      theLine = 72,
      theCol = 15,
      theOffset = 2261),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 62,
      theCol = 3,
      theOffset = 1993),
      theEndCaret = 
      @Caret(
      theLine = 72,
      theCol = 15,
      theOffset = 2261),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 62,
      theCol = 3,
      theOffset = 1993),
      theEndCaret = 
      @Caret(
      theLine = 72,
      theCol = 15,
      theOffset = 2261),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Partitioned 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 74,
  theCol = 24,
  theOffset = 2287),
  theEndCaret = 
  @Caret(
  theLine = 74,
  theCol = 25,
  theOffset = 2287),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 75,
  theCol = 24,
  theOffset = 2326),
  theEndCaret = 
  @Caret(
  theLine = 75,
  theCol = 25,
  theOffset = 2326),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 75,
  theCol = 27,
  theOffset = 2329),
  theEndCaret = 
  @Caret(
  theLine = 75,
  theCol = 28,
  theOffset = 2329),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 75,
  theCol = 30,
  theOffset = 2332),
  theEndCaret = 
  @Caret(
  theLine = 75,
  theCol = 31,
  theOffset = 2332),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            L,
            M,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = $AND($AND($AND(($First(`Sort::Index_Type) <= L),(L <= M)),(M <= U)),(U <= $Last(`Sort::Index_Type))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 76,
          theCol = 7,
          theOffset = 2370),
          theEndCaret = 
          @Caret(
          theLine = 76,
          theCol = 80,
          theOffset = 2442),
          theOptionalSource = "sort.ada"
        )
        ),
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalReturnAnnotation = 
        @NONE
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 74,
      theCol = 3,
      theOffset = 2266),
      theEndCaret = 
      @Caret(
      theLine = 88,
      theCol = 19,
      theOffset = 2713),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 74,
      theCol = 12,
      theOffset = 2275),
      theEndCaret = 
      @Caret(
      theLine = 74,
      theCol = 23,
      theOffset = 2285),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 74,
      theCol = 3,
      theOffset = 2266),
      theEndCaret = 
      @Caret(
      theLine = 75,
      theCol = 60,
      theOffset = 2361),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 78,
      theCol = 5,
      theOffset = 2453),
      theEndCaret = 
      @Caret(
      theLine = 78,
      theCol = 11,
      theOffset = 2458),
      theOptionalSource = "sort.ada"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type J @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l92.  temp$1 := true;
  #l93. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l92,
      endLabel = l93,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 78,
      theCol = 5,
      theOffset = 2453),
      theEndCaret = 
      @Caret(
      theLine = 78,
      theCol = 11,
      theOffset = 2458),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Result := temp$1;
    #l96.  temp$2 := M;
    #l97.  temp$3 := L;
    #l98.  if (temp$3 > temp$2) then goto l95;
    #l99.  I := temp$3;
    #l94. 
      #l102.  temp$4 := U;
      #l103.  temp$5 := M;
      #l104.  temp$6 := 1;
      #l105.  temp$7 := (temp$5 + temp$6);
      #l106.  if (temp$7 > temp$4) then goto l101;
      #l107.  J := temp$7;
      #l100. 
      #l108.  temp$8 := I;
      #l109.  temp$9 := A [temp$8];
      #l110.  temp$10 := J;
      #l111.  temp$11 := A [temp$10];
      #l112.  temp$12 := (temp$9 > temp$11);
      #l113.  if !(temp$12) then goto l114; 
      #l115.  temp$13 := false;
      #l116. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l115,
          endLabel = l116,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 83,
          theCol = 11,
          theOffset = 2614),
          theEndCaret = 
          @Caret(
          theLine = 83,
          theCol = 27,
          theOffset = 2629),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Result := temp$13;
      #l117.  goto l118;
      #l114. 
      #l118. <@IfStatementAnnotation(
        ifPart = @Mark(
        startLabel = l108,
        endLabel = l113,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 82,
        theCol = 9,
        theOffset = 2584),
        theEndCaret = 
        @Caret(
        theLine = 82,
        theCol = 23,
        theOffset = 2597),
        theOptionalSource = "sort.ada"
      )
      ),
        thenPart= @MARK_PLACEHOLDER,
        optElsIfParts = @NONE,
        optElsePart = @NONE,
          mark = @Mark(
          startLabel = l108,
          endLabel = l118,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 82,
          theCol = 9,
          theOffset = 2584),
          theEndCaret = 
          @Caret(
          theLine = 84,
          theCol = 16,
          theOffset = 2645),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
      )> 
      #l119.  temp$14 := (J == temp$4);
      #l120.  if temp$14 then goto l101;
      #l121.  temp$15 := J + 1;
      #l122.  J := temp$15;
      #l123.  goto l100;
      #l101. <@ForLoopStatementAnnotation(
        sparkIterVarID = J,
        pilarIterVarID = J,
        initPart = @Mark(
        startLabel = l102,
        endLabel = l107,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 81,
        theCol = 7,
        theOffset = 2534),
        theEndCaret = 
        @Caret(
        theLine = 81,
        theCol = 48,
        theOffset = 2574),
        theOptionalSource = "sort.ada"
      )
      ),
        isRev = false,
          optLoopId = @NONE,
          body = @MARK_PLACEHOLDER,
            mark = @Mark(
            startLabel = l102,
            endLabel = l101,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 81,
            theCol = 7,
            theOffset = 2534),
            theEndCaret = 
            @Caret(
            theLine = 85,
            theCol = 16,
            theOffset = 2661),
            theOptionalSource = "sort.ada"
          )
          ),
            optSparkLabelList = @NONE  
      )> 
    #l124.  temp$16 := (I == temp$2);
    #l125.  if temp$16 then goto l95;
    #l126.  temp$17 := I + 1;
    #l127.  I := temp$17;
    #l128.  goto l94;
    #l95. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l96,
      endLabel = l99,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 80,
      theCol = 5,
      theOffset = 2490),
      theEndCaret = 
      @Caret(
      theLine = 80,
      theCol = 42,
      theOffset = 2526),
      theOptionalSource = "sort.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l96,
          endLabel = l95,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 80,
          theCol = 5,
          theOffset = 2490),
          theEndCaret = 
          @Caret(
          theLine = 86,
          theCol = 14,
          theOffset = 2675),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l129.  temp$18 := Result;
  #l130. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l129,
      endLabel = l130,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 87,
      theCol = 5,
      theOffset = 2681),
      theEndCaret = 
      @Caret(
      theLine = 87,
      theCol = 19,
      theOffset = 2694),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$18;
}
procedure Standard::Boolean Partitioned 
      (Sort::Array_Type A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 74,
  theCol = 24,
  theOffset = 2287),
  theEndCaret = 
  @Caret(
  theLine = 74,
  theCol = 25,
  theOffset = 2287),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type L @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 75,
  theCol = 24,
  theOffset = 2326),
  theEndCaret = 
  @Caret(
  theLine = 75,
  theCol = 25,
  theOffset = 2326),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 75,
  theCol = 27,
  theOffset = 2329),
  theEndCaret = 
  @Caret(
  theLine = 75,
  theCol = 28,
  theOffset = 2329),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type U @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 75,
  theCol = 30,
  theOffset = 2332),
  theEndCaret = 
  @Caret(
  theLine = 75,
  theCol = 31,
  theOffset = 2332),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            L,
            M,
            U)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 74,
      theCol = 3,
      theOffset = 2266),
      theEndCaret = 
      @Caret(
      theLine = 88,
      theCol = 19,
      theOffset = 2713),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 74,
      theCol = 3,
      theOffset = 2266),
      theEndCaret = 
      @Caret(
      theLine = 88,
      theCol = 19,
      theOffset = 2713),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 74,
      theCol = 3,
      theOffset = 2266),
      theEndCaret = 
      @Caret(
      theLine = 88,
      theCol = 19,
      theOffset = 2713),
      theOptionalSource = "sort.ada"
    )
) 
{ #locret. return;}
procedure Swap_Elements 
      (Sort::Array_Type T @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 90,
  theCol = 27,
  theOffset = 2744),
  theEndCaret = 
  @Caret(
  theLine = 90,
  theCol = 28,
  theOffset = 2744),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 90,
  theCol = 50,
  theOffset = 2767),
  theEndCaret = 
  @Caret(
  theLine = 90,
  theCol = 51,
  theOffset = 2767),
  theOptionalSource = "sort.ada"
),
       Sort::Index_Type J @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 90,
  theCol = 53,
  theOffset = 2770),
  theEndCaret = 
  @Caret(
  theLine = 90,
  theCol = 54,
  theOffset = 2770),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(T,
            I,
            J),
      theOptionalOutParameters = @List(T)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $AND((T == $ARRAY_UPDATE (($OLD(T)), `{I -> ($OLD(T)) [J], J -> ($OLD(T)) [I]}) ),Sort::Perm (T, ($OLD(T)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 92,
          theCol = 9,
          theOffset = 2827),
          theEndCaret = 
          @Caret(
          theLine = 93,
          theCol = 61,
          theOffset = 2927),
          theOptionalSource = "sort.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = T,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 91,
                          theCol = 17,
                          theOffset = 2805),
                          theEndCaret = 
                          @Caret(
                          theLine = 91,
                          theCol = 18,
                          theOffset = 2805),
                          theOptionalSource = "sort.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = T,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 91,
                          theCol = 24,
                          theOffset = 2812),
                          theEndCaret = 
                          @Caret(
                          theLine = 91,
                          theCol = 25,
                          theOffset = 2812),
                          theOptionalSource = "sort.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = I,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 91,
                          theCol = 26,
                          theOffset = 2814),
                          theEndCaret = 
                          @Caret(
                          theLine = 91,
                          theCol = 27,
                          theOffset = 2814),
                          theOptionalSource = "sort.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = J,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 91,
                          theCol = 28,
                          theOffset = 2816),
                          theEndCaret = 
                          @Caret(
                          theLine = 91,
                          theCol = 29,
                          theOffset = 2816),
                          theOptionalSource = "sort.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 91,
                  theCol = 17,
                  theOffset = 2805),
                  theEndCaret = 
                  @Caret(
                  theLine = 91,
                  theCol = 29,
                  theOffset = 2816),
                  theOptionalSource = "sort.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 91,
              theCol = 9,
              theOffset = 2797),
              theEndCaret = 
              @Caret(
              theLine = 91,
              theCol = 30,
              theOffset = 2817),
              theOptionalSource = "sort.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 90,
      theCol = 3,
      theOffset = 2720),
      theEndCaret = 
      @Caret(
      theLine = 100,
      theCol = 21,
      theOffset = 3041),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 90,
      theCol = 13,
      theOffset = 2730),
      theEndCaret = 
      @Caret(
      theLine = 90,
      theCol = 26,
      theOffset = 2742),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 90,
      theCol = 3,
      theOffset = 2720),
      theEndCaret = 
      @Caret(
      theLine = 90,
      theCol = 71,
      theOffset = 2787),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Sort::Contents_Type Temp @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 95,
      theCol = 5,
      theOffset = 2938),
      theEndCaret = 
      @Caret(
      theLine = 95,
      theCol = 9,
      theOffset = 2941),
      theOptionalSource = "sort.ada"
    )
    );
    Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l131.  temp$1 := I;
  #l132.  temp$2 := T [temp$1];
  #l133. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l131,
      endLabel = l133,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 97,
      theCol = 5,
      theOffset = 2972),
      theEndCaret = 
      @Caret(
      theLine = 97,
      theCol = 18,
      theOffset = 2984),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Temp := temp$2;
  #l134.  temp$3 := I;
  #l135.  temp$4 := J;
  #l136.  temp$5 := T [temp$4];
  #l137. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l134,
      endLabel = l137,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 98,
      theCol = 5,
      theOffset = 2990),
      theEndCaret = 
      @Caret(
      theLine = 98,
      theCol = 18,
      theOffset = 3002),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  T [temp$3] := temp$5;
  #l138.  temp$6 := J;
  #l139.  temp$7 := Temp;
  #l140. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l138,
      endLabel = l140,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 99,
      theCol = 5,
      theOffset = 3008),
      theEndCaret = 
      @Caret(
      theLine = 99,
      theCol = 18,
      theOffset = 3020),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  T [temp$6] := temp$7;
  #l141.  return;
}
procedure BubbleSort 
      (Sort::Array_Type Table @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 102,
  theCol = 24,
  theOffset = 3067),
  theEndCaret = 
  @Caret(
  theLine = 102,
  theCol = 29,
  theOffset = 3071),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Table),
      theOptionalOutParameters = @List(Table)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 102,
      theCol = 3,
      theOffset = 3046),
      theEndCaret = 
      @Caret(
      theLine = 117,
      theCol = 18,
      theOffset = 3786),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 102,
      theCol = 13,
      theOffset = 3056),
      theEndCaret = 
      @Caret(
      theLine = 102,
      theCol = 23,
      theOffset = 3065),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 102,
      theCol = 3,
      theOffset = 3046),
      theEndCaret = 
      @Caret(
      theLine = 102,
      theCol = 50,
      theOffset = 3092),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type J @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Array_Type temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l144.  if ($First(`Sort::Array_Type) > $Last(`Sort::Array_Type)) then goto l143;
    #l145.  I := $Last(`Sort::Array_Type);
    #l142. 
      #l148.  temp$1 := I;
      #l149.  temp$2 := $First(`Sort::Index_Type);
      #l150.  temp$3 := 1;
      #l151.  temp$4 := (temp$2 + temp$3);
      #l152.  if (temp$4 > temp$1) then goto l147;
      #l153.  J := temp$4;
      #l146. 
      #l154.  temp$5 := J;
      #l155.  temp$6 := 1;
      #l156.  temp$7 := (temp$5 - temp$6);
      #l157.  temp$8 := Table [temp$7];
      #l158.  temp$9 := J;
      #l159.  temp$10 := Table [temp$9];
      #l160.  temp$11 := (temp$8 > temp$10);
      #l161.  if !(temp$11) then goto l162; 
      #l163.  temp$12 := Table;
      #l165.  temp$13 := J;
      #l166.  temp$14 := 1;
      #l167.  temp$15 := (temp$13 - temp$14);
      #l168.  temp$16 := J;
      #l169. <@ProcedureCallStatementAnnotation(
        optCopyBackPart = @Mark(
        startLabel = l164,
        endLabel = l164,
        optRS = @NONE
      ),
          mark = @Mark(
          startLabel = l163,
          endLabel = l169,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 107,
          theCol = 12,
          theOffset = 3285),
          theEndCaret = 
          @Caret(
          theLine = 107,
          theCol = 43,
          theOffset = 3315),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE
      )>  call  Sort::Swap_Elements (temp$12, temp$15, temp$16);
      #l164. <@CopyBackStatementAnnotation(
          mark = @Mark(
          startLabel = l164,
          endLabel = l164,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 107,
          theCol = 26,
          theOffset = 3299),
          theEndCaret = 
          @Caret(
          theLine = 107,
          theCol = 31,
          theOffset = 3303),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE
      )>  Table := temp$12;
      #l170.  goto l171;
      #l162. 
      #l171. <@IfStatementAnnotation(
        ifPart = @Mark(
        startLabel = l154,
        endLabel = l161,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 106,
        theCol = 10,
        theOffset = 3242),
        theEndCaret = 
        @Caret(
        theLine = 106,
        theCol = 36,
        theOffset = 3267),
        theOptionalSource = "sort.ada"
      )
      ),
        thenPart= @MARK_PLACEHOLDER,
        optElsIfParts = @NONE,
        optElsePart = @NONE,
          mark = @Mark(
          startLabel = l154,
          endLabel = l171,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 106,
          theCol = 10,
          theOffset = 3242),
          theEndCaret = 
          @Caret(
          theLine = 108,
          theCol = 17,
          theOffset = 3332),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
      )> 
      #l172. <@AssertStatementAnnotation(
          mark = @Mark(
          startLabel = l172,
          endLabel = l172,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 109,
          theCol = 14,
          theOffset = 3347),
          theEndCaret = 
          @Caret(
          theLine = 111,
          theCol = 75,
          theOffset = 3535),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE
      )>  assert $AND($FOR_ALL {Sort::Index_Type K => 
        switch K
          | ($First(`Sort::Index_Type), (J - 1)) => (Table [K] <= Table [J])
          | => true},Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))) ;
      #l173.  temp$17 := (J == temp$1);
      #l174.  if temp$17 then goto l147;
      #l175.  temp$18 := J + 1;
      #l176.  J := temp$18;
      #l177.  goto l146;
      #l147. <@ForLoopStatementAnnotation(
        sparkIterVarID = J,
        pilarIterVarID = J,
        initPart = @Mark(
        startLabel = l148,
        endLabel = l153,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 105,
        theCol = 8,
        theOffset = 3176),
        theEndCaret = 
        @Caret(
        theLine = 105,
        theCol = 64,
        theOffset = 3231),
        theOptionalSource = "sort.ada"
      )
      ),
        isRev = false,
          optLoopId = @NONE,
          body = @MARK_PLACEHOLDER,
            mark = @Mark(
            startLabel = l148,
            endLabel = l147,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 105,
            theCol = 8,
            theOffset = 3176),
            theEndCaret = 
            @Caret(
            theLine = 112,
            theCol = 17,
            theOffset = 3553),
            theOptionalSource = "sort.ada"
          )
          ),
            optSparkLabelList = @NONE  
      )> 
    #l178. <@AssertStatementAnnotation(
        mark = @Mark(
        startLabel = l178,
        endLabel = l178,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 113,
        theCol = 12,
        theOffset = 3566),
        theEndCaret = 
        @Caret(
        theLine = 115,
        theCol = 73,
        theOffset = 3753),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  assert $AND($AND(Sort::Ordered (Table, I, $Last(`Sort::Index_Type)),Sort::Partitioned (Table, $First(`Sort::Index_Type), I, $Last(`Sort::Index_Type))),Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))) ;
    #l179.  temp$19 := (I == $First(`Sort::Array_Type));
    #l180.  if temp$19 then goto l143;
    #l181.  temp$20 := I - 1;
    #l182.  I := temp$20;
    #l183.  goto l142;
    #l143. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l144,
      endLabel = l145,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 104,
      theCol = 6,
      theOffset = 3113),
      theEndCaret = 
      @Caret(
      theLine = 104,
      theCol = 61,
      theOffset = 3167),
      theOptionalSource = "sort.ada"
    )
    ),
      isRev = true,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l144,
          endLabel = l143,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 104,
          theCol = 6,
          theOffset = 3113),
          theEndCaret = 
          @Caret(
          theLine = 116,
          theCol = 15,
          theOffset = 3768),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l184.  return;
}
procedure BubbleSortFast 
      (Sort::Array_Type Table @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 119,
  theCol = 28,
  theOffset = 3816),
  theEndCaret = 
  @Caret(
  theLine = 119,
  theCol = 33,
  theOffset = 3820),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Table),
      theOptionalOutParameters = @List(Table)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 119,
      theCol = 3,
      theOffset = 3791),
      theEndCaret = 
      @Caret(
      theLine = 146,
      theCol = 22,
      theOffset = 4780),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 119,
      theCol = 13,
      theOffset = 3801),
      theEndCaret = 
      @Caret(
      theLine = 119,
      theCol = 27,
      theOffset = 3814),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 119,
      theCol = 3,
      theOffset = 3791),
      theEndCaret = 
      @Caret(
      theLine = 119,
      theCol = 54,
      theOffset = 3841),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Sort::Base_Index_Type Bound @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 121,
      theCol = 5,
      theOffset = 3852),
      theEndCaret = 
      @Caret(
      theLine = 121,
      theCol = 10,
      theOffset = 3856),
      theOptionalSource = "sort.ada"
    )
    );
    Sort::Base_Index_Type T @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 122,
      theCol = 5,
      theOffset = 3899),
      theEndCaret = 
      @Caret(
      theLine = 122,
      theCol = 6,
      theOffset = 3899),
      theOptionalSource = "sort.ada"
    )
    );
    Sort::Index_Type J @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 123,
      theCol = 5,
      theOffset = 3924),
      theEndCaret = 
      @Caret(
      theLine = 123,
      theCol = 6,
      theOffset = 3924),
      theOptionalSource = "sort.ada"
    )
    );
    Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Base_Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Base_Index_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Base_Index_Type temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Array_Type temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Base_Index_Type temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l185.  temp$1 := $Last(`Sort::Index_Type);
  #l186. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l185,
      endLabel = l186,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 121,
      theCol = 5,
      theOffset = 3852),
      theEndCaret = 
      @Caret(
      theLine = 121,
      theCol = 10,
      theOffset = 3856),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Bound := temp$1;
  #l187. 
  #l189.  temp$2 := Bound;
  #l190.  temp$3 := 0;
  #l191.  temp$4 := (temp$2 == temp$3);
  #l192. <@ExitStatementAnnotation(
    hasWhen = true,
      mark = @Mark(
      startLabel = l189,
      endLabel = l192,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 125,
      theCol = 10,
      theOffset = 3958),
      theEndCaret = 
      @Caret(
      theLine = 125,
      theCol = 30,
      theOffset = 3977),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  if temp$4 then goto l188;
  #l193.  temp$5 := $First(`Sort::Index_Type);
  #l194. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l193,
      endLabel = l194,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 126,
      theCol = 7,
      theOffset = 3985),
      theEndCaret = 
      @Caret(
      theLine = 126,
      theCol = 29,
      theOffset = 4006),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  J := temp$5;
  #l195.  temp$6 := 0;
  #l196. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l195,
      endLabel = l196,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 127,
      theCol = 7,
      theOffset = 4014),
      theEndCaret = 
      @Caret(
      theLine = 127,
      theCol = 14,
      theOffset = 4020),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  T := temp$6;
  #l197. 
  #l198.  temp$7 := J;
  #l199.  temp$8 := Bound;
  #l200.  temp$9 := 1;
  #l201.  temp$10 := (temp$8 - temp$9);
  #l202.  temp$11 := (temp$7 <= temp$10);
  #l204.  if !temp$11 then goto l203;
  #l205.  temp$12 := J;
  #l206.  temp$13 := Table [temp$12];
  #l207.  temp$14 := J;
  #l208.  temp$15 := 1;
  #l209.  temp$16 := (temp$14 + temp$15);
  #l210.  temp$17 := Table [temp$16];
  #l211.  temp$18 := (temp$13 > temp$17);
  #l212.  if !(temp$18) then goto l213; 
  #l214.  temp$19 := Table;
  #l216.  temp$20 := J;
  #l217.  temp$21 := J;
  #l218.  temp$22 := 1;
  #l219.  temp$23 := (temp$21 + temp$22);
  #l220. <@ProcedureCallStatementAnnotation(
    optCopyBackPart = @Mark(
    startLabel = l215,
    endLabel = l215,
    optRS = @NONE
  ),
      mark = @Mark(
      startLabel = l214,
      endLabel = l220,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 130,
      theCol = 11,
      theOffset = 4104),
      theEndCaret = 
      @Caret(
      theLine = 130,
      theCol = 42,
      theOffset = 4134),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  call  Sort::Swap_Elements (temp$19, temp$20, temp$23);
  #l215. <@CopyBackStatementAnnotation(
      mark = @Mark(
      startLabel = l215,
      endLabel = l215,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 130,
      theCol = 25,
      theOffset = 4118),
      theEndCaret = 
      @Caret(
      theLine = 130,
      theCol = 30,
      theOffset = 4122),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Table := temp$19;
  #l221.  temp$24 := J;
  #l222. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l221,
      endLabel = l222,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 131,
      theCol = 11,
      theOffset = 4146),
      theEndCaret = 
      @Caret(
      theLine = 131,
      theCol = 18,
      theOffset = 4152),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  T := temp$24;
  #l223.  goto l224;
  #l213. 
  #l224. <@IfStatementAnnotation(
    ifPart = @Mark(
    startLabel = l205,
    endLabel = l212,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 129,
    theCol = 9,
    theOffset = 4062),
    theEndCaret = 
    @Caret(
    theLine = 129,
    theCol = 35,
    theOffset = 4087),
    theOptionalSource = "sort.ada"
  )
  ),
    thenPart= @MARK_PLACEHOLDER,
    optElsIfParts = @NONE,
    optElsePart = @NONE,
      mark = @Mark(
      startLabel = l205,
      endLabel = l224,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 129,
      theCol = 9,
      theOffset = 4062),
      theEndCaret = 
      @Caret(
      theLine = 132,
      theCol = 16,
      theOffset = 4168),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE  
  )> 
  #l225.  temp$25 := J;
  #l226.  temp$26 := 1;
  #l227.  temp$27 := (temp$25 + temp$26);
  #l228. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l225,
      endLabel = l228,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 133,
      theCol = 9,
      theOffset = 4178),
      theEndCaret = 
      @Caret(
      theLine = 133,
      theCol = 20,
      theOffset = 4188),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  J := temp$27;
  #l229. <@AssertStatementAnnotation(
      mark = @Mark(
      startLabel = l229,
      endLabel = l229,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 135,
      theCol = 13,
      theOffset = 4220),
      theEndCaret = 
      @Caret(
      theLine = 138,
      theCol = 75,
      theOffset = 4478),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  assert $AND($AND($FOR_ALL {Sort::Index_Type K => 
    switch K
      | ($First(`Sort::Index_Type), (J - 1)) => (Table [K] <= Table [J])
      | => true},Sort::Partitioned (Table, $First(`Sort::Index_Type), T, J)),Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))) ;
  #l230.  goto l197;
  #l203. <@WhileLoopStatementAnnotation(
    condPart = @Mark(
    startLabel = l198,
    endLabel = l204,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 128,
    theCol = 7,
    theOffset = 4028),
    theEndCaret = 
    @Caret(
    theLine = 128,
    theCol = 32,
    theOffset = 4052),
    theOptionalSource = "sort.ada"
  )
  ),
      optLoopId = @NONE,
      body = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l197,
        endLabel = l203,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 128,
        theCol = 7,
        theOffset = 4028),
        theEndCaret = 
        @Caret(
        theLine = 139,
        theCol = 16,
        theOffset = 4494),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE  
  )> 
  #l231. <@AssertStatementAnnotation(
      mark = @Mark(
      startLabel = l231,
      endLabel = l231,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 140,
      theCol = 11,
      theOffset = 4506),
      theEndCaret = 
      @Caret(
      theLine = 142,
      theCol = 78,
      theOffset = 4712),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  assert $AND($AND(Sort::Ordered (Table, Bound, $Last(`Sort::Index_Type)),Sort::Partitioned (Table, $First(`Sort::Index_Type), Bound, $Last(`Sort::Index_Type))),Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), $Last(`Sort::Index_Type))) ;
  #l232.  temp$28 := T;
  #l233. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l232,
      endLabel = l233,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 144,
      theCol = 7,
      theOffset = 4734),
      theEndCaret = 
      @Caret(
      theLine = 144,
      theCol = 18,
      theOffset = 4744),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Bound := temp$28;
  #l234.  goto l187;
  #l188. <@DefaultLoopStatementAnnotation(
      optLoopId = @NONE,
      body = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l187,
        endLabel = l188,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 125,
        theCol = 5,
        theOffset = 3953),
        theEndCaret = 
        @Caret(
        theLine = 145,
        theCol = 14,
        theOffset = 4758),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE  
  )> 
  #l235.  return;
}
procedure InsertionSort 
      (Sort::Array_Type Table @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 148,
  theCol = 27,
  theOffset = 4813),
  theEndCaret = 
  @Caret(
  theLine = 148,
  theCol = 32,
  theOffset = 4817),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Table),
      theOptionalOutParameters = @List(Table)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 148,
      theCol = 3,
      theOffset = 4789),
      theEndCaret = 
      @Caret(
      theLine = 175,
      theCol = 21,
      theOffset = 5837),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 148,
      theCol = 13,
      theOffset = 4799),
      theEndCaret = 
      @Caret(
      theLine = 148,
      theCol = 26,
      theOffset = 4811),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 148,
      theCol = 3,
      theOffset = 4789),
      theEndCaret = 
      @Caret(
      theLine = 148,
      theCol = 53,
      theOffset = 4838),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Sort::Index_Type J @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 150,
      theCol = 5,
      theOffset = 4850),
      theEndCaret = 
      @Caret(
      theLine = 150,
      theCol = 6,
      theOffset = 4850),
      theOptionalSource = "sort.ada"
    )
    );
    Sort::Contents_Type Temp @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 151,
      theCol = 5,
      theOffset = 4870),
      theEndCaret = 
      @Caret(
      theLine = 151,
      theCol = 9,
      theOffset = 4873),
      theOptionalSource = "sort.ada"
    )
    );
    Sort::Index_Type P @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$32 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l238.  temp$1 := $Last(`Sort::Index_Type);
    #l239.  temp$2 := $First(`Sort::Index_Type);
    #l240.  temp$3 := 1;
    #l241.  temp$4 := (temp$2 + temp$3);
    #l242.  if (temp$4 > temp$1) then goto l237;
    #l243.  P := temp$4;
    #l236. 
    #l244.  temp$5 := P;
    #l245.  temp$6 := Table [temp$5];
    #l246. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l244,
        endLabel = l246,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 154,
        theCol = 7,
        theOffset = 4981),
        theEndCaret = 
        @Caret(
        theLine = 154,
        theCol = 24,
        theOffset = 4997),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Temp := temp$6;
    #l247.  temp$7 := P;
    #l248. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l247,
        endLabel = l248,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 155,
        theCol = 7,
        theOffset = 5005),
        theEndCaret = 
        @Caret(
        theLine = 155,
        theCol = 14,
        theOffset = 5011),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  J := temp$7;
    #l249. 
    #l250. temp$19 := false;
      #l251.  temp$8 := J;
      #l252.  temp$9 := $First(`Sort::Index_Type);
      #l253.  temp$10 := 1;
      #l254.  temp$11 := (temp$9 + temp$10);
      #l255.  temp$12 := (temp$8 >= temp$11);
    #l262.  if (!temp$12) then goto l265;
      #l256.  temp$13 := J;
      #l257.  temp$14 := 1;
      #l258.  temp$15 := (temp$13 - temp$14);
      #l259.  temp$16 := Table [temp$15];
      #l260.  temp$17 := Temp;
      #l261.  temp$18 := (temp$16 > temp$17);
    #l263.  if (!temp$18) then goto l265;
    #l264. temp$19 := true;
    #l265.
    #l266.  temp$20 := temp$19;
    #l268.  if !temp$20 then goto l267;
    #l269.  temp$21 := J;
    #l270.  temp$22 := J;
    #l271.  temp$23 := 1;
    #l272.  temp$24 := (temp$22 - temp$23);
    #l273.  temp$25 := Table [temp$24];
    #l274. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l269,
        endLabel = l274,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 157,
        theCol = 9,
        theOffset = 5095),
        theEndCaret = 
        @Caret(
        theLine = 157,
        theCol = 34,
        theOffset = 5119),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Table [temp$21] := temp$25;
    #l275.  temp$26 := J;
    #l276.  temp$27 := 1;
    #l277.  temp$28 := (temp$26 - temp$27);
    #l278. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l275,
        endLabel = l278,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 158,
        theCol = 9,
        theOffset = 5129),
        theEndCaret = 
        @Caret(
        theLine = 158,
        theCol = 20,
        theOffset = 5139),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  J := temp$28;
    #l279. <@AssertStatementAnnotation(
        mark = @Mark(
        startLabel = l279,
        endLabel = l279,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 159,
        theCol = 13,
        theOffset = 5153),
        theEndCaret = 
        @Caret(
        theLine = 163,
        theCol = 67,
        theOffset = 5437),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  assert $AND($AND($AND($AND($AND((Temp == ($OLD(Table)) [P]),($First(`Sort::Index_Type) <= J)),(J < P)),$FOR_ALL {Sort::Index_Type K => 
      switch K
        | ((J + 1), P) => (Table [K] > Temp)
        | => true}),Sort::Ordered (Table, $First(`Sort::Index_Type), P)),Sort::Perm ($ARRAY_UPDATE (Table, `{J -> Temp}) , ($OLD(Table)), $First(`Sort::Index_Type), P)) ;
    #l280.  goto l249;
    #l267. <@WhileLoopStatementAnnotation(
      condPart = @Mark(
      startLabel = l250,
      endLabel = l268,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 156,
      theCol = 7,
      theOffset = 5019),
      theEndCaret = 
      @Caret(
      theLine = 156,
      theCol = 74,
      theOffset = 5085),
      theOptionalSource = "sort.ada"
    )
    ),
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l249,
          endLabel = l267,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 156,
          theCol = 7,
          theOffset = 5019),
          theEndCaret = 
          @Caret(
          theLine = 164,
          theCol = 16,
          theOffset = 5454),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
    #l281.  temp$29 := J;
    #l282.  temp$30 := Temp;
    #l283. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l281,
        endLabel = l283,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 166,
        theCol = 7,
        theOffset = 5469),
        theEndCaret = 
        @Caret(
        theLine = 166,
        theCol = 24,
        theOffset = 5485),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Table [temp$29] := temp$30;
    #l284. <@AssertStatementAnnotation(
        mark = @Mark(
        startLabel = l284,
        endLabel = l284,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 168,
        theCol = 11,
        theOffset = 5504),
        theEndCaret = 
        @Caret(
        theLine = 172,
        theCol = 42,
        theOffset = 5797),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  assert $AND($AND($AND($AND((($First(`Sort::Index_Type) + 1) <= P),(P <= $Last(`Sort::Index_Type))),Sort::Ordered (Table, $First(`Sort::Index_Type), P)),Sort::Perm (Table, ($OLD(Table)), $First(`Sort::Index_Type), P)),$FOR_ALL {Sort::Index_Type K => 
      switch K
        | ((P + 1), $Last(`Sort::Index_Type)) => (Table [K] == ($OLD(Table)) [K])
        | => true}) ;
    #l285.  temp$31 := (P == temp$1);
    #l286.  if temp$31 then goto l237;
    #l287.  temp$32 := P + 1;
    #l288.  P := temp$32;
    #l289.  goto l236;
    #l237. <@ForLoopStatementAnnotation(
      sparkIterVarID = P,
      pilarIterVarID = P,
      initPart = @Mark(
      startLabel = l238,
      endLabel = l243,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 153,
      theCol = 5,
      theOffset = 4904),
      theEndCaret = 
      @Caret(
      theLine = 153,
      theCol = 75,
      theOffset = 4973),
      theOptionalSource = "sort.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l238,
          endLabel = l237,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 153,
          theCol = 5,
          theOffset = 4904),
          theEndCaret = 
          @Caret(
          theLine = 173,
          theCol = 14,
          theOffset = 5811),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l290.  return;
}
procedure ShellSort 
      (Sort::Array_Type Table @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 177,
  theCol = 23,
  theOffset = 5864),
  theEndCaret = 
  @Caret(
  theLine = 177,
  theCol = 28,
  theOffset = 5868),
  theOptionalSource = "sort.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Table),
      theOptionalOutParameters = @List(Table)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 177,
      theCol = 3,
      theOffset = 5844),
      theEndCaret = 
      @Caret(
      theLine = 202,
      theCol = 17,
      theOffset = 6826),
      theOptionalSource = "sort.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 177,
      theCol = 13,
      theOffset = 5854),
      theEndCaret = 
      @Caret(
      theLine = 177,
      theCol = 22,
      theOffset = 5862),
      theOptionalSource = "sort.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 177,
      theCol = 3,
      theOffset = 5844),
      theEndCaret = 
      @Caret(
      theLine = 177,
      theCol = 49,
      theOffset = 5889),
      theOptionalSource = "sort.ada"
    )
) 
{

  local
    Sort::Index_Type Gap @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 179,
      theCol = 5,
      theOffset = 5901),
      theEndCaret = 
      @Caret(
      theLine = 179,
      theCol = 8,
      theOffset = 5903),
      theOptionalSource = "sort.ada"
    )
    );
    Standard::Integer J @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 180,
      theCol = 5,
      theOffset = 5923),
      theEndCaret = 
      @Caret(
      theLine = 180,
      theCol = 6,
      theOffset = 5923),
      theOptionalSource = "sort.ada"
    )
    );
    Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Contents_Type temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Array_Type temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$32 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Sort::Index_Type temp$33 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$34 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l291.  temp$1 := $Last(`Sort::Index_Type);
  #l292. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l291,
      endLabel = l292,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 182,
      theCol = 5,
      theOffset = 5949),
      theEndCaret = 
      @Caret(
      theLine = 182,
      theCol = 28,
      theOffset = 5971),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Gap := temp$1;
  #l293. 
  #l295.  temp$2 := Gap;
  #l296.  temp$3 := 2;
  #l297.  temp$4 := (temp$2 / temp$3);
  #l298. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l295,
      endLabel = l298,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 184,
      theCol = 7,
      theOffset = 5988),
      theEndCaret = 
      @Caret(
      theLine = 184,
      theCol = 22,
      theOffset = 6002),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Gap := temp$4;
    #l301.  temp$5 := $Last(`Sort::Index_Type);
    #l302.  temp$6 := Gap;
    #l303.  if (temp$6 > temp$5) then goto l300;
    #l304.  I := temp$6;
    #l299. 
    #l305.  temp$7 := I;
    #l306.  temp$8 := Gap;
    #l307.  temp$9 := (temp$7 - temp$8);
    #l308. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l305,
        endLabel = l308,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 186,
        theCol = 9,
        theOffset = 6072),
        theEndCaret = 
        @Caret(
        theLine = 186,
        theCol = 22,
        theOffset = 6084),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  J := temp$9;
    #l309. 
    #l310. temp$20 := false;
      #l311.  temp$10 := J;
      #l312.  temp$11 := $First(`Sort::Index_Type);
      #l313.  temp$12 := (temp$10 >= temp$11);
    #l321.  if (!temp$12) then goto l324;
      #l314.  temp$13 := J;
      #l315.  temp$14 := Table [temp$13];
      #l316.  temp$15 := J;
      #l317.  temp$16 := Gap;
      #l318.  temp$17 := (temp$15 + temp$16);
      #l319.  temp$18 := Table [temp$17];
      #l320.  temp$19 := (temp$14 > temp$18);
    #l322.  if (!temp$19) then goto l324;
    #l323. temp$20 := true;
    #l324.
    #l325.  temp$21 := temp$20;
    #l327.  if !temp$21 then goto l326;
    #l328.  temp$22 := Table;
    #l330.  temp$23 := J;
    #l331.  temp$24 := J;
    #l332.  temp$25 := Gap;
    #l333.  temp$26 := (temp$24 + temp$25);
    #l334. <@ProcedureCallStatementAnnotation(
      optCopyBackPart = @Mark(
      startLabel = l329,
      endLabel = l329,
      optRS = @NONE
    ),
        mark = @Mark(
        startLabel = l328,
        endLabel = l334,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 188,
        theCol = 11,
        theOffset = 6172),
        theEndCaret = 
        @Caret(
        theLine = 188,
        theCol = 44,
        theOffset = 6204),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  call  Sort::Swap_Elements (temp$22, temp$23, temp$26);
    #l329. <@CopyBackStatementAnnotation(
        mark = @Mark(
        startLabel = l329,
        endLabel = l329,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 188,
        theCol = 25,
        theOffset = 6186),
        theEndCaret = 
        @Caret(
        theLine = 188,
        theCol = 30,
        theOffset = 6190),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  Table := temp$22;
    #l335.  temp$27 := J;
    #l336.  temp$28 := Gap;
    #l337.  temp$29 := (temp$27 - temp$28);
    #l338. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l335,
        endLabel = l338,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 189,
        theCol = 11,
        theOffset = 6216),
        theEndCaret = 
        @Caret(
        theLine = 189,
        theCol = 24,
        theOffset = 6228),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  J := temp$29;
    #l339.  goto l309;
    #l326. <@WhileLoopStatementAnnotation(
      condPart = @Mark(
      startLabel = l310,
      endLabel = l327,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 187,
      theCol = 9,
      theOffset = 6094),
      theEndCaret = 
      @Caret(
      theLine = 187,
      theCol = 76,
      theOffset = 6160),
      theOptionalSource = "sort.ada"
    )
    ),
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l309,
          endLabel = l326,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 187,
          theCol = 9,
          theOffset = 6094),
          theEndCaret = 
          @Caret(
          theLine = 193,
          theCol = 18,
          theOffset = 6435),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
    #l340.  temp$30 := (I == temp$5);
    #l341.  if temp$30 then goto l300;
    #l342.  temp$31 := I + 1;
    #l343.  I := temp$31;
    #l344.  goto l299;
    #l300. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l301,
      endLabel = l304,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 185,
      theCol = 7,
      theOffset = 6010),
      theEndCaret = 
      @Caret(
      theLine = 185,
      theCol = 60,
      theOffset = 6062),
      theOptionalSource = "sort.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l301,
          endLabel = l300,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 185,
          theCol = 7,
          theOffset = 6010),
          theEndCaret = 
          @Caret(
          theLine = 197,
          theCol = 16,
          theOffset = 6625),
          theOptionalSource = "sort.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l345.  temp$32 := Gap;
  #l346.  temp$33 := $First(`Sort::Index_Type);
  #l347.  temp$34 := (temp$32 == temp$33);
  #l348. <@ExitStatementAnnotation(
    hasWhen = true,
      mark = @Mark(
      startLabel = l345,
      endLabel = l348,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 198,
      theCol = 7,
      theOffset = 6633),
      theEndCaret = 
      @Caret(
      theLine = 198,
      theCol = 40,
      theOffset = 6665),
      theOptionalSource = "sort.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  if temp$34 then goto l294;
  #l349.  goto l293;
  #l294. <@DefaultLoopStatementAnnotation(
      optLoopId = @NONE,
      body = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l293,
        endLabel = l294,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 183,
        theCol = 5,
        theOffset = 5977),
        theEndCaret = 
        @Caret(
        theLine = 201,
        theCol = 14,
        theOffset = 6809),
        theOptionalSource = "sort.ada"
      )
      ),
        optSparkLabelList = @NONE  
  )> 
  #l350.  return;
}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Simple_Sort
@PackageAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theSparkName = Simple_Sort,
  thePilarSparkName = Simple_Sort,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 37,
  theCol = 17,
  theOffset = 1037),
  theOptionalSource = "sort_simple_contract.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 20,
  theOffset = 18),
  theOptionalSource = "sort_simple_contract.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

const $Const {
  Max_Elements = (Standard::Integer) (3) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PUBLIC,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 3,
        theCol = 3,
        theOffset = 25),
        theEndCaret = 
        @Caret(
        theLine = 3,
        theCol = 15,
        theOffset = 36),
        theOptionalSource = "sort_simple_contract.ada"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Index_Type
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 60),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 57,
      theOffset = 113),
      theOptionalSource = "sort_simple_contract.ada"
    ),
    fullyQualifiedName = Simple_Sort::Index_Type,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = Simple_Sort::$Const.Max_Elements,
        lowerBound = 1)))
{}
record Vector
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 117),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 47,
      theOffset = 160),
      theOptionalSource = "sort_simple_contract.ada"
    ),
    fullyQualifiedName = Simple_Sort::Vector,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Integer,
        theDiscreteSubTypes = 
          @List(`Simple_Sort::Index_Type)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Boolean isSorted 
      (Simple_Sort::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 21,
  theOffset = 183),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 22,
  theOffset = 183),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 165),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 48,
      theOffset = 209),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 12,
      theOffset = 174),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 20,
      theOffset = 181),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 165),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 47,
      theOffset = 208),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isSorted 
      (Simple_Sort::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 21,
  theOffset = 183),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 22,
  theOffset = 183),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 165),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 48,
      theOffset = 209),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 165),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 48,
      theOffset = 209),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 165),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 48,
      theOffset = 209),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isPerm 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 19,
  theOffset = 229),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 20,
  theOffset = 229),
  theOptionalSource = "sort_simple_contract.ada"
),
       Simple_Sort::Vector B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 22,
  theOffset = 232),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 23,
  theOffset = 232),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A,
            B)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 213),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 49,
      theOffset = 258),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 12,
      theOffset = 222),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 18,
      theOffset = 227),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 213),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 48,
      theOffset = 257),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isPerm 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 19,
  theOffset = 229),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 20,
  theOffset = 229),
  theOptionalSource = "sort_simple_contract.ada"
),
       Simple_Sort::Vector B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 22,
  theOffset = 232),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 23,
  theOffset = 232),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A,
            B)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 213),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 49,
      theOffset = 258),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 213),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 49,
      theOffset = 258),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 213),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 49,
      theOffset = 258),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isSet 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 18,
  theOffset = 277),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 19,
  theOffset = 277),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 262),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 45,
      theOffset = 303),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 12,
      theOffset = 271),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 17,
      theOffset = 275),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 262),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 44,
      theOffset = 302),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isSet 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 18,
  theOffset = 277),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 19,
  theOffset = 277),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 262),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 45,
      theOffset = 303),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 262),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 45,
      theOffset = 303),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 262),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 45,
      theOffset = 303),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure BubbleSort 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 24,
  theOffset = 331),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 25,
  theOffset = 331),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Simple_Sort::isSorted (A) && Simple_Sort::isPerm (A, ($OLD(A)))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 15,
          theCol = 7,
          theOffset = 400),
          theEndCaret = 
          @Caret(
          theLine = 15,
          theCol = 47,
          theOffset = 439),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 15,
                          theOffset = 365),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 16,
                          theOffset = 365),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 22,
                          theOffset = 372),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 23,
                          theOffset = 372),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 13,
                  theCol = 15,
                  theOffset = 365),
                  theEndCaret = 
                  @Caret(
                  theLine = 13,
                  theCol = 23,
                  theOffset = 372),
                  theOptionalSource = "sort_simple_contract.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 13,
              theCol = 7,
              theOffset = 357),
              theEndCaret = 
              @Caret(
              theLine = 13,
              theCol = 24,
              theOffset = 373),
              theOptionalSource = "sort_simple_contract.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 310),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 43,
      theOffset = 349),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 13,
      theOffset = 320),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 23,
      theOffset = 329),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 310),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 42,
      theOffset = 348),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure BubbleSort_using_SwapElements 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 17,
  theCol = 43,
  theOffset = 484),
  theEndCaret = 
  @Caret(
  theLine = 17,
  theCol = 44,
  theOffset = 484),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Simple_Sort::isSorted (A) && Simple_Sort::isPerm (A, ($OLD(A)))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 20,
          theCol = 7,
          theOffset = 555),
          theEndCaret = 
          @Caret(
          theLine = 20,
          theCol = 47,
          theOffset = 594),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 18,
                          theCol = 15,
                          theOffset = 518),
                          theEndCaret = 
                          @Caret(
                          theLine = 18,
                          theCol = 16,
                          theOffset = 518),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 18,
                          theCol = 22,
                          theOffset = 525),
                          theEndCaret = 
                          @Caret(
                          theLine = 18,
                          theCol = 23,
                          theOffset = 525),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 18,
                  theCol = 15,
                  theOffset = 518),
                  theEndCaret = 
                  @Caret(
                  theLine = 18,
                  theCol = 23,
                  theOffset = 525),
                  theOptionalSource = "sort_simple_contract.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 18,
              theCol = 7,
              theOffset = 510),
              theEndCaret = 
              @Caret(
              theLine = 18,
              theCol = 24,
              theOffset = 526),
              theOptionalSource = "sort_simple_contract.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 444),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 62,
      theOffset = 502),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 13,
      theOffset = 454),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 42,
      theOffset = 482),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 444),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 61,
      theOffset = 501),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure InsertionSort 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 22,
  theCol = 27,
  theOffset = 627),
  theEndCaret = 
  @Caret(
  theLine = 22,
  theCol = 28,
  theOffset = 627),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Simple_Sort::isSorted (A) && Simple_Sort::isPerm (A, ($OLD(A)))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 25,
          theCol = 7,
          theOffset = 698),
          theEndCaret = 
          @Caret(
          theLine = 25,
          theCol = 47,
          theOffset = 737),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 23,
                          theCol = 15,
                          theOffset = 661),
                          theEndCaret = 
                          @Caret(
                          theLine = 23,
                          theCol = 16,
                          theOffset = 661),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 23,
                          theCol = 22,
                          theOffset = 668),
                          theEndCaret = 
                          @Caret(
                          theLine = 23,
                          theCol = 23,
                          theOffset = 668),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 23,
                  theCol = 15,
                  theOffset = 661),
                  theEndCaret = 
                  @Caret(
                  theLine = 23,
                  theCol = 23,
                  theOffset = 668),
                  theOptionalSource = "sort_simple_contract.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 23,
              theCol = 7,
              theOffset = 653),
              theEndCaret = 
              @Caret(
              theLine = 23,
              theCol = 24,
              theOffset = 669),
              theOptionalSource = "sort_simple_contract.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 3,
      theOffset = 603),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 46,
      theOffset = 645),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 13,
      theOffset = 613),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 26,
      theOffset = 625),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 3,
      theOffset = 603),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 45,
      theOffset = 644),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure SelectionSort 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 27,
  theCol = 27,
  theOffset = 768),
  theEndCaret = 
  @Caret(
  theLine = 27,
  theCol = 28,
  theOffset = 768),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Simple_Sort::isSorted (A) && Simple_Sort::isPerm (A, ($OLD(A)))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 30,
          theCol = 7,
          theOffset = 839),
          theEndCaret = 
          @Caret(
          theLine = 30,
          theCol = 47,
          theOffset = 878),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 28,
                          theCol = 15,
                          theOffset = 802),
                          theEndCaret = 
                          @Caret(
                          theLine = 28,
                          theCol = 16,
                          theOffset = 802),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 28,
                          theCol = 22,
                          theOffset = 809),
                          theEndCaret = 
                          @Caret(
                          theLine = 28,
                          theCol = 23,
                          theOffset = 809),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 28,
                  theCol = 15,
                  theOffset = 802),
                  theEndCaret = 
                  @Caret(
                  theLine = 28,
                  theCol = 23,
                  theOffset = 809),
                  theOptionalSource = "sort_simple_contract.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 28,
              theCol = 7,
              theOffset = 794),
              theEndCaret = 
              @Caret(
              theLine = 28,
              theCol = 24,
              theOffset = 810),
              theOptionalSource = "sort_simple_contract.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 27,
      theCol = 3,
      theOffset = 744),
      theEndCaret = 
      @Caret(
      theLine = 27,
      theCol = 46,
      theOffset = 786),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 27,
      theCol = 13,
      theOffset = 754),
      theEndCaret = 
      @Caret(
      theLine = 27,
      theCol = 26,
      theOffset = 766),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 27,
      theCol = 3,
      theOffset = 744),
      theEndCaret = 
      @Caret(
      theLine = 27,
      theCol = 45,
      theOffset = 785),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure ShellSort 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 32,
  theCol = 23,
  theOffset = 905),
  theEndCaret = 
  @Caret(
  theLine = 32,
  theCol = 24,
  theOffset = 905),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Simple_Sort::isSorted (A) && Simple_Sort::isPerm (A, ($OLD(A)))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 35,
          theCol = 7,
          theOffset = 976),
          theEndCaret = 
          @Caret(
          theLine = 35,
          theCol = 47,
          theOffset = 1015),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 33,
                          theCol = 15,
                          theOffset = 939),
                          theEndCaret = 
                          @Caret(
                          theLine = 33,
                          theCol = 16,
                          theOffset = 939),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 33,
                          theCol = 22,
                          theOffset = 946),
                          theEndCaret = 
                          @Caret(
                          theLine = 33,
                          theCol = 23,
                          theOffset = 946),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 33,
                  theCol = 15,
                  theOffset = 939),
                  theEndCaret = 
                  @Caret(
                  theLine = 33,
                  theCol = 23,
                  theOffset = 946),
                  theOptionalSource = "sort_simple_contract.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 33,
              theCol = 7,
              theOffset = 931),
              theEndCaret = 
              @Caret(
              theLine = 33,
              theCol = 24,
              theOffset = 947),
              theOptionalSource = "sort_simple_contract.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 3,
      theOffset = 885),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 42,
      theOffset = 923),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 13,
      theOffset = 895),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 22,
      theOffset = 903),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 3,
      theOffset = 885),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 41,
      theOffset = 922),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Simple_Sort
@PackageAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theSparkName = Simple_Sort,
  thePilarSparkName = Simple_Sort,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 39,
  theCol = 1,
  theOffset = 1040),
  theEndCaret = 
  @Caret(
  theLine = 202,
  theCol = 17,
  theOffset = 4927),
  theOptionalSource = "sort_simple_contract.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 39,
  theCol = 1,
  theOffset = 1040),
  theEndCaret = 
  @Caret(
  theLine = 39,
  theCol = 25,
  theOffset = 1063),
  theOptionalSource = "sort_simple_contract.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Boolean isSorted 
      (Simple_Sort::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 41,
  theCol = 21,
  theOffset = 1090),
  theEndCaret = 
  @Caret(
  theLine = 41,
  theCol = 22,
  theOffset = 1090),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 3,
      theOffset = 1072),
      theEndCaret = 
      @Caret(
      theLine = 49,
      theCol = 16,
      theOffset = 1314),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 12,
      theOffset = 1081),
      theEndCaret = 
      @Caret(
      theLine = 41,
      theCol = 20,
      theOffset = 1088),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 3,
      theOffset = 1072),
      theEndCaret = 
      @Caret(
      theLine = 41,
      theCol = 47,
      theOffset = 1115),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Boolean B @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 42,
      theCol = 5,
      theOffset = 1124),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 6,
      theOffset = 1124),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Simple_Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l3.  temp$1 := $Last(`Simple_Sort::Index_Type);
    #l4.  temp$2 := 1;
    #l5.  temp$3 := (temp$1 - temp$2);
    #l6.  temp$4 := $First(`Simple_Sort::Index_Type);
    #l7.  if (temp$4 > temp$3) then goto l2;
    #l8.  I := temp$4;
    #l1. 
    #l9.  temp$5 := I;
    #l10.  temp$6 := Z [temp$5];
    #l11.  temp$7 := I;
    #l12.  temp$8 := 1;
    #l13.  temp$9 := (temp$7 + temp$8);
    #l14.  temp$10 := Z [temp$9];
    #l15.  temp$11 := (temp$6 <= temp$10);
    #l16. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l9,
        endLabel = l16,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 45,
        theCol = 7,
        theOffset = 1226),
        theEndCaret = 
        @Caret(
        theLine = 45,
        theCol = 29,
        theOffset = 1247),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  B := temp$11;
    #l17.  temp$12 := B;
    #l18.  temp$13 := !(temp$12);
    #l19. <@ExitStatementAnnotation(
      hasWhen = true,
        mark = @Mark(
        startLabel = l17,
        endLabel = l19,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 46,
        theCol = 7,
        theOffset = 1255),
        theEndCaret = 
        @Caret(
        theLine = 46,
        theCol = 23,
        theOffset = 1270),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  if temp$13 then goto l2;
    #l20.  temp$14 := (I == temp$3);
    #l21.  if temp$14 then goto l2;
    #l22.  temp$15 := I + 1;
    #l23.  I := temp$15;
    #l24.  goto l1;
    #l2. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l3,
      endLabel = l8,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 5,
      theOffset = 1149),
      theEndCaret = 
      @Caret(
      theLine = 44,
      theCol = 75,
      theOffset = 1218),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l3,
          endLabel = l2,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 44,
          theCol = 5,
          theOffset = 1149),
          theEndCaret = 
          @Caret(
          theLine = 47,
          theCol = 14,
          theOffset = 1284),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l25.  temp$16 := B;
  #l26. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l25,
      endLabel = l26,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 5,
      theOffset = 1290),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 14,
      theOffset = 1298),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$16;
}
procedure Standard::Boolean isSorted 
      (Simple_Sort::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 41,
  theCol = 21,
  theOffset = 1090),
  theEndCaret = 
  @Caret(
  theLine = 41,
  theCol = 22,
  theOffset = 1090),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 3,
      theOffset = 1072),
      theEndCaret = 
      @Caret(
      theLine = 49,
      theCol = 16,
      theOffset = 1314),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 3,
      theOffset = 1072),
      theEndCaret = 
      @Caret(
      theLine = 49,
      theCol = 16,
      theOffset = 1314),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 3,
      theOffset = 1072),
      theEndCaret = 
      @Caret(
      theLine = 49,
      theCol = 16,
      theOffset = 1314),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure Standard::Integer Num_Repetitions 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 51,
  theCol = 28,
  theOffset = 1346),
  theEndCaret = 
  @Caret(
  theLine = 51,
  theCol = 29,
  theOffset = 1346),
  theOptionalSource = "sort_simple_contract.ada"
),
       Standard::Integer E @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 51,
  theCol = 40,
  theOffset = 1358),
  theEndCaret = 
  @Caret(
  theLine = 51,
  theCol = 41,
  theOffset = 1358),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            E)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 51,
      theCol = 3,
      theOffset = 1321),
      theEndCaret = 
      @Caret(
      theLine = 61,
      theCol = 23,
      theOffset = 1576),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 51,
      theCol = 12,
      theOffset = 1330),
      theEndCaret = 
      @Caret(
      theLine = 51,
      theCol = 27,
      theOffset = 1344),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 51,
      theCol = 3,
      theOffset = 1321),
      theEndCaret = 
      @Caret(
      theLine = 51,
      theCol = 67,
      theOffset = 1384),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Integer Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 53,
      theCol = 5,
      theOffset = 1395),
      theEndCaret = 
      @Caret(
      theLine = 53,
      theCol = 11,
      theOffset = 1400),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l27.  temp$1 := 0;
  #l28. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l27,
      endLabel = l28,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 53,
      theCol = 5,
      theOffset = 1395),
      theEndCaret = 
      @Caret(
      theLine = 53,
      theCol = 11,
      theOffset = 1400),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Result := temp$1;
    #l31.  temp$2 := $First(`Simple_Sort::Index_Type);
    #l32.  temp$3 := $Last(`Simple_Sort::Index_Type);
    #l33.  if (temp$2 > temp$3) then goto l30;
    #l34.  I := temp$2;
    #l29. 
    #l35.  temp$4 := I;
    #l36.  temp$5 := A [temp$4];
    #l37.  temp$6 := E;
    #l38.  temp$7 := (temp$5 == temp$6);
    #l39.  if !(temp$7) then goto l40; 
    #l41.  temp$8 := Result;
    #l42.  temp$9 := 1;
    #l43.  temp$10 := (temp$8 + temp$9);
    #l44. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l41,
        endLabel = l44,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 57,
        theCol = 9,
        theOffset = 1486),
        theEndCaret = 
        @Caret(
        theLine = 57,
        theCol = 30,
        theOffset = 1506),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$10;
    #l45.  goto l46;
    #l40. 
    #l46. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l35,
      endLabel = l39,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 56,
      theCol = 7,
      theOffset = 1461),
      theEndCaret = 
      @Caret(
      theLine = 56,
      theCol = 18,
      theOffset = 1471),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l35,
        endLabel = l46,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 56,
        theCol = 7,
        theOffset = 1461),
        theEndCaret = 
        @Caret(
        theLine = 58,
        theCol = 14,
        theOffset = 1520),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l47.  temp$11 := (I == temp$3);
    #l48.  if temp$11 then goto l30;
    #l49.  temp$12 := I + 1;
    #l50.  I := temp$12;
    #l51.  goto l29;
    #l30. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l31,
      endLabel = l34,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 55,
      theCol = 5,
      theOffset = 1430),
      theEndCaret = 
      @Caret(
      theLine = 55,
      theCol = 29,
      theOffset = 1453),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l31,
          endLabel = l30,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 55,
          theCol = 5,
          theOffset = 1430),
          theEndCaret = 
          @Caret(
          theLine = 59,
          theCol = 14,
          theOffset = 1534),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l52.  temp$13 := Result;
  #l53. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l52,
      endLabel = l53,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 60,
      theCol = 5,
      theOffset = 1540),
      theEndCaret = 
      @Caret(
      theLine = 60,
      theCol = 19,
      theOffset = 1553),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$13;
}
procedure Standard::Integer Num_Repetitions 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 51,
  theCol = 28,
  theOffset = 1346),
  theEndCaret = 
  @Caret(
  theLine = 51,
  theCol = 29,
  theOffset = 1346),
  theOptionalSource = "sort_simple_contract.ada"
),
       Standard::Integer E @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 51,
  theCol = 40,
  theOffset = 1358),
  theEndCaret = 
  @Caret(
  theLine = 51,
  theCol = 41,
  theOffset = 1358),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            E)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 51,
      theCol = 3,
      theOffset = 1321),
      theEndCaret = 
      @Caret(
      theLine = 61,
      theCol = 23,
      theOffset = 1576),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 51,
      theCol = 3,
      theOffset = 1321),
      theEndCaret = 
      @Caret(
      theLine = 61,
      theCol = 23,
      theOffset = 1576),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 51,
      theCol = 3,
      theOffset = 1321),
      theEndCaret = 
      @Caret(
      theLine = 61,
      theCol = 23,
      theOffset = 1576),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isSet 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 63,
  theCol = 18,
  theOffset = 1598),
  theEndCaret = 
  @Caret(
  theLine = 63,
  theCol = 19,
  theOffset = 1598),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 63,
      theCol = 3,
      theOffset = 1583),
      theEndCaret = 
      @Caret(
      theLine = 75,
      theCol = 13,
      theOffset = 1884),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 63,
      theCol = 12,
      theOffset = 1592),
      theEndCaret = 
      @Caret(
      theLine = 63,
      theCol = 17,
      theOffset = 1596),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 63,
      theCol = 3,
      theOffset = 1583),
      theEndCaret = 
      @Caret(
      theLine = 63,
      theCol = 44,
      theOffset = 1623),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 65,
      theCol = 5,
      theOffset = 1634),
      theEndCaret = 
      @Caret(
      theLine = 65,
      theCol = 11,
      theOffset = 1639),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Simple_Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type J @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l56.  temp$1 := $First(`Simple_Sort::Index_Type);
    #l57.  temp$2 := $Last(`Simple_Sort::Index_Type);
    #l58.  if (temp$1 > temp$2) then goto l55;
    #l59.  I := temp$1;
    #l54. 
      #l62.  temp$3 := $First(`Simple_Sort::Index_Type);
      #l63.  temp$4 := $Last(`Simple_Sort::Index_Type);
      #l64.  if (temp$3 > temp$4) then goto l61;
      #l65.  J := temp$3;
      #l60. 
      #l66. temp$13 := false;
        #l67.  temp$5 := I;
        #l68.  temp$6 := J;
        #l69.  temp$7 := (temp$5 == temp$6);
      #l76.  if (temp$7) then goto l75;
        #l70.  temp$8 := I;
        #l71.  temp$9 := A [temp$8];
        #l72.  temp$10 := J;
        #l73.  temp$11 := A [temp$10];
        #l74.  temp$12 := (temp$9 != temp$11);
      #l77.  if (!temp$12) then goto l79;
      #l75.
      #l78. temp$13 := true;
      #l79.
      #l80.  temp$14 := temp$13;
      #l81. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l66,
          endLabel = l81,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 69,
          theCol = 9,
          theOffset = 1728),
          theEndCaret = 
          @Caret(
          theLine = 69,
          theCol = 46,
          theOffset = 1764),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Result := temp$14;
      #l82.  temp$15 := Result;
      #l83.  temp$16 := !(temp$15);
      #l84. <@ExitStatementAnnotation(
        hasWhen = true,
          mark = @Mark(
          startLabel = l82,
          endLabel = l84,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 70,
          theCol = 9,
          theOffset = 1774),
          theEndCaret = 
          @Caret(
          theLine = 70,
          theCol = 30,
          theOffset = 1794),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE
      )>  if temp$16 then goto l61;
      #l85.  temp$17 := (J == temp$4);
      #l86.  if temp$17 then goto l61;
      #l87.  temp$18 := J + 1;
      #l88.  J := temp$18;
      #l89.  goto l60;
      #l61. <@ForLoopStatementAnnotation(
        sparkIterVarID = J,
        pilarIterVarID = J,
        initPart = @Mark(
        startLabel = l62,
        endLabel = l65,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 68,
        theCol = 7,
        theOffset = 1695),
        theEndCaret = 
        @Caret(
        theLine = 68,
        theCol = 31,
        theOffset = 1718),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        isRev = false,
          optLoopId = @NONE,
          body = @MARK_PLACEHOLDER,
            mark = @Mark(
            startLabel = l62,
            endLabel = l61,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 68,
            theCol = 7,
            theOffset = 1695),
            theEndCaret = 
            @Caret(
            theLine = 71,
            theCol = 16,
            theOffset = 1810),
            theOptionalSource = "sort_simple_contract.ada"
          )
          ),
            optSparkLabelList = @NONE  
      )> 
    #l90.  temp$19 := Result;
    #l91.  temp$20 := !(temp$19);
    #l92. <@ExitStatementAnnotation(
      hasWhen = true,
        mark = @Mark(
        startLabel = l90,
        endLabel = l92,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 72,
        theCol = 7,
        theOffset = 1818),
        theEndCaret = 
        @Caret(
        theLine = 72,
        theCol = 28,
        theOffset = 1838),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  if temp$20 then goto l55;
    #l93.  temp$21 := (I == temp$2);
    #l94.  if temp$21 then goto l55;
    #l95.  temp$22 := I + 1;
    #l96.  I := temp$22;
    #l97.  goto l54;
    #l55. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l56,
      endLabel = l59,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 67,
      theCol = 5,
      theOffset = 1664),
      theEndCaret = 
      @Caret(
      theLine = 67,
      theCol = 29,
      theOffset = 1687),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l56,
          endLabel = l55,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 67,
          theCol = 5,
          theOffset = 1664),
          theEndCaret = 
          @Caret(
          theLine = 73,
          theCol = 14,
          theOffset = 1852),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l98.  temp$23 := Result;
  #l99. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l98,
      endLabel = l99,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 74,
      theCol = 5,
      theOffset = 1858),
      theEndCaret = 
      @Caret(
      theLine = 74,
      theCol = 19,
      theOffset = 1871),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$23;
}
procedure Standard::Boolean isSet 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 63,
  theCol = 18,
  theOffset = 1598),
  theEndCaret = 
  @Caret(
  theLine = 63,
  theCol = 19,
  theOffset = 1598),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 63,
      theCol = 3,
      theOffset = 1583),
      theEndCaret = 
      @Caret(
      theLine = 75,
      theCol = 13,
      theOffset = 1884),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 63,
      theCol = 3,
      theOffset = 1583),
      theEndCaret = 
      @Caret(
      theLine = 75,
      theCol = 13,
      theOffset = 1884),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 63,
      theCol = 3,
      theOffset = 1583),
      theEndCaret = 
      @Caret(
      theLine = 75,
      theCol = 13,
      theOffset = 1884),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isPerm 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 77,
  theCol = 19,
  theOffset = 1907),
  theEndCaret = 
  @Caret(
  theLine = 77,
  theCol = 20,
  theOffset = 1907),
  theOptionalSource = "sort_simple_contract.ada"
),
       Simple_Sort::Vector B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 77,
  theCol = 22,
  theOffset = 1910),
  theEndCaret = 
  @Caret(
  theLine = 77,
  theCol = 23,
  theOffset = 1910),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            B)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 77,
      theCol = 3,
      theOffset = 1891),
      theEndCaret = 
      @Caret(
      theLine = 90,
      theCol = 14,
      theOffset = 2345),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 77,
      theCol = 12,
      theOffset = 1900),
      theEndCaret = 
      @Caret(
      theLine = 77,
      theCol = 18,
      theOffset = 1905),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 77,
      theCol = 3,
      theOffset = 1891),
      theEndCaret = 
      @Caret(
      theLine = 77,
      theCol = 48,
      theOffset = 1935),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 79,
      theCol = 5,
      theOffset = 1947),
      theEndCaret = 
      @Caret(
      theLine = 79,
      theCol = 11,
      theOffset = 1952),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Vector temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Vector temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l100.  temp$1 := true;
  #l101. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l100,
      endLabel = l101,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 79,
      theCol = 5,
      theOffset = 1947),
      theEndCaret = 
      @Caret(
      theLine = 79,
      theCol = 11,
      theOffset = 1952),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Result := temp$1;
    #l104.  temp$2 := $First(`Simple_Sort::Index_Type);
    #l105.  temp$3 := $Last(`Simple_Sort::Index_Type);
    #l106.  if (temp$2 > temp$3) then goto l103;
    #l107.  I := temp$2;
    #l102. 
    #l108. temp$14 := false;
      #l109.  temp$4 := I;
      #l110.  temp$5 := $First(`Simple_Sort::Index_Type);
      #l111.  temp$6 := (temp$4 == temp$5);
    #l120.  if (temp$6) then goto l119;
      #l112.  temp$7 := I;
      #l113.  temp$8 := 1;
      #l114.  temp$9 := (temp$7 - temp$8);
      #l115.  temp$10 := A [temp$9];
      #l116.  temp$11 := I;
      #l117.  temp$12 := A [temp$11];
      #l118.  temp$13 := (temp$10 != temp$12);
    #l121.  if (!temp$13) then goto l123;
    #l119.
    #l122. temp$14 := true;
    #l123.
    #l124.  temp$15 := temp$14;
    #l125.  if !(temp$15) then goto l126; 
    #l127.  temp$16 := A;
    #l128.  temp$17 := I;
    #l129.  temp$18 := A [temp$17];
    #l130.  call temp$19 := Simple_Sort::Num_Repetitions (temp$16, temp$18);
    #l131.  temp$20 := B;
    #l132.  temp$21 := I;
    #l133.  temp$22 := A [temp$21];
    #l134.  call temp$23 := Simple_Sort::Num_Repetitions (temp$20, temp$22);
    #l135.  temp$24 := (temp$19 == temp$23);
    #l136. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l127,
        endLabel = l136,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 85,
        theCol = 9,
        theOffset = 2195),
        theEndCaret = 
        @Caret(
        theLine = 85,
        theCol = 71,
        theOffset = 2256),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$24;
    #l137.  goto l138;
    #l126. 
    #l138. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l108,
      endLabel = l125,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 84,
      theCol = 7,
      theOffset = 2133),
      theEndCaret = 
      @Caret(
      theLine = 84,
      theCol = 55,
      theOffset = 2180),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l108,
        endLabel = l138,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 84,
        theCol = 7,
        theOffset = 2133),
        theEndCaret = 
        @Caret(
        theLine = 86,
        theCol = 14,
        theOffset = 2270),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l139.  temp$25 := Result;
    #l140.  temp$26 := !(temp$25);
    #l141. <@ExitStatementAnnotation(
      hasWhen = true,
        mark = @Mark(
        startLabel = l139,
        endLabel = l141,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 87,
        theCol = 7,
        theOffset = 2278),
        theEndCaret = 
        @Caret(
        theLine = 87,
        theCol = 28,
        theOffset = 2298),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  if temp$26 then goto l103;
    #l142.  temp$27 := (I == temp$3);
    #l143.  if temp$27 then goto l103;
    #l144.  temp$28 := I + 1;
    #l145.  I := temp$28;
    #l146.  goto l102;
    #l103. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l104,
      endLabel = l107,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 81,
      theCol = 5,
      theOffset = 1985),
      theEndCaret = 
      @Caret(
      theLine = 81,
      theCol = 29,
      theOffset = 2008),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l104,
          endLabel = l103,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 81,
          theCol = 5,
          theOffset = 1985),
          theEndCaret = 
          @Caret(
          theLine = 88,
          theCol = 14,
          theOffset = 2312),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l147.  temp$29 := Result;
  #l148. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l147,
      endLabel = l148,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 89,
      theCol = 5,
      theOffset = 2318),
      theEndCaret = 
      @Caret(
      theLine = 89,
      theCol = 19,
      theOffset = 2331),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$29;
}
procedure Standard::Boolean isPerm 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 77,
  theCol = 19,
  theOffset = 1907),
  theEndCaret = 
  @Caret(
  theLine = 77,
  theCol = 20,
  theOffset = 1907),
  theOptionalSource = "sort_simple_contract.ada"
),
       Simple_Sort::Vector B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 77,
  theCol = 22,
  theOffset = 1910),
  theEndCaret = 
  @Caret(
  theLine = 77,
  theCol = 23,
  theOffset = 1910),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            B)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 77,
      theCol = 3,
      theOffset = 1891),
      theEndCaret = 
      @Caret(
      theLine = 90,
      theCol = 14,
      theOffset = 2345),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 77,
      theCol = 3,
      theOffset = 1891),
      theEndCaret = 
      @Caret(
      theLine = 90,
      theCol = 14,
      theOffset = 2345),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 77,
      theCol = 3,
      theOffset = 1891),
      theEndCaret = 
      @Caret(
      theLine = 90,
      theCol = 14,
      theOffset = 2345),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{ #locret. return;}
procedure BubbleSort 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 92,
  theCol = 24,
  theOffset = 2373),
  theEndCaret = 
  @Caret(
  theLine = 92,
  theCol = 25,
  theOffset = 2373),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 92,
      theCol = 3,
      theOffset = 2352),
      theEndCaret = 
      @Caret(
      theLine = 112,
      theCol = 18,
      theOffset = 2816),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 92,
      theCol = 13,
      theOffset = 2362),
      theEndCaret = 
      @Caret(
      theLine = 92,
      theCol = 23,
      theOffset = 2371),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 92,
      theCol = 3,
      theOffset = 2352),
      theEndCaret = 
      @Caret(
      theLine = 92,
      theCol = 42,
      theOffset = 2390),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Boolean Swapped @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 94,
      theCol = 5,
      theOffset = 2401),
      theEndCaret = 
      @Caret(
      theLine = 94,
      theCol = 12,
      theOffset = 2407),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Integer Temp @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 95,
      theCol = 5,
      theOffset = 2424),
      theEndCaret = 
      @Caret(
      theLine = 95,
      theCol = 9,
      theOffset = 2427),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Integer N @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 96,
      theCol = 5,
      theOffset = 2444),
      theEndCaret = 
      @Caret(
      theLine = 96,
      theCol = 6,
      theOffset = 2444),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Simple_Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$32 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l149.  temp$1 := $Last(`Simple_Sort::Index_Type);
  #l150. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l149,
      endLabel = l150,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 98,
      theCol = 5,
      theOffset = 2469),
      theEndCaret = 
      @Caret(
      theLine = 98,
      theCol = 17,
      theOffset = 2480),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  N := temp$1;
  #l151. 
  #l153.  temp$2 := false;
  #l154. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l153,
      endLabel = l154,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 100,
      theCol = 7,
      theOffset = 2498),
      theEndCaret = 
      @Caret(
      theLine = 100,
      theCol = 24,
      theOffset = 2514),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Swapped := temp$2;
    #l157.  temp$3 := N;
    #l158.  temp$4 := 1;
    #l159.  temp$5 := (temp$3 - temp$4);
    #l160.  temp$6 := $First(`Simple_Sort::Index_Type);
    #l161.  if (temp$6 > temp$5) then goto l156;
    #l162.  I := temp$6;
    #l155. 
    #l163.  temp$7 := I;
    #l164.  temp$8 := A [temp$7];
    #l165.  temp$9 := I;
    #l166.  temp$10 := 1;
    #l167.  temp$11 := (temp$9 + temp$10);
    #l168.  temp$12 := A [temp$11];
    #l169.  temp$13 := (temp$8 > temp$12);
    #l170.  if !(temp$13) then goto l171; 
    #l172.  temp$14 := I;
    #l173.  temp$15 := A [temp$14];
    #l174. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l172,
        endLabel = l174,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 103,
        theCol = 11,
        theOffset = 2609),
        theEndCaret = 
        @Caret(
        theLine = 103,
        theCol = 24,
        theOffset = 2621),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Temp := temp$15;
    #l175.  temp$16 := I;
    #l176.  temp$17 := I;
    #l177.  temp$18 := 1;
    #l178.  temp$19 := (temp$17 + temp$18);
    #l179.  temp$20 := A [temp$19];
    #l180. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l175,
        endLabel = l180,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 104,
        theCol = 11,
        theOffset = 2633),
        theEndCaret = 
        @Caret(
        theLine = 104,
        theCol = 28,
        theOffset = 2649),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  A [temp$16] := temp$20;
    #l181.  temp$21 := I;
    #l182.  temp$22 := 1;
    #l183.  temp$23 := (temp$21 + temp$22);
    #l184.  temp$24 := Temp;
    #l185. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l181,
        endLabel = l185,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 105,
        theCol = 11,
        theOffset = 2661),
        theEndCaret = 
        @Caret(
        theLine = 105,
        theCol = 28,
        theOffset = 2677),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  A [temp$23] := temp$24;
    #l186.  temp$25 := true;
    #l187. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l186,
        endLabel = l187,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 106,
        theCol = 11,
        theOffset = 2689),
        theEndCaret = 
        @Caret(
        theLine = 106,
        theCol = 27,
        theOffset = 2704),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Swapped := temp$25;
    #l188.  goto l189;
    #l171. 
    #l189. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l163,
      endLabel = l170,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 102,
      theCol = 9,
      theOffset = 2575),
      theEndCaret = 
      @Caret(
      theLine = 102,
      theCol = 27,
      theOffset = 2592),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l163,
        endLabel = l189,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 102,
        theCol = 9,
        theOffset = 2575),
        theEndCaret = 
        @Caret(
        theLine = 107,
        theCol = 16,
        theOffset = 2720),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l190.  temp$26 := (I == temp$5);
    #l191.  if temp$26 then goto l156;
    #l192.  temp$27 := I + 1;
    #l193.  I := temp$27;
    #l194.  goto l155;
    #l156. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l157,
      endLabel = l162,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 101,
      theCol = 7,
      theOffset = 2522),
      theEndCaret = 
      @Caret(
      theLine = 101,
      theCol = 51,
      theOffset = 2565),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l157,
          endLabel = l156,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 101,
          theCol = 7,
          theOffset = 2522),
          theEndCaret = 
          @Caret(
          theLine = 108,
          theCol = 16,
          theOffset = 2736),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l195.  temp$28 := N;
  #l196.  temp$29 := 1;
  #l197.  temp$30 := (temp$28 - temp$29);
  #l198. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l195,
      endLabel = l198,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 109,
      theCol = 7,
      theOffset = 2744),
      theEndCaret = 
      @Caret(
      theLine = 109,
      theCol = 18,
      theOffset = 2754),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  N := temp$30;
  #l199.  temp$31 := Swapped;
  #l200.  temp$32 := !(temp$31);
  #l201. <@ExitStatementAnnotation(
    hasWhen = true,
      mark = @Mark(
      startLabel = l199,
      endLabel = l201,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 110,
      theCol = 7,
      theOffset = 2762),
      theEndCaret = 
      @Caret(
      theLine = 110,
      theCol = 29,
      theOffset = 2783),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  if temp$32 then goto l152;
  #l202.  goto l151;
  #l152. <@DefaultLoopStatementAnnotation(
      optLoopId = @NONE,
      body = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l151,
        endLabel = l152,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 99,
        theCol = 5,
        theOffset = 2486),
        theEndCaret = 
        @Caret(
        theLine = 111,
        theCol = 14,
        theOffset = 2797),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE  
  )> 
  #l203.  return;
}
procedure SwapElements 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 114,
  theCol = 26,
  theOffset = 2844),
  theEndCaret = 
  @Caret(
  theLine = 114,
  theCol = 27,
  theOffset = 2844),
  theOptionalSource = "sort_simple_contract.ada"
),
       Standard::Integer I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 114,
  theCol = 45,
  theOffset = 2863),
  theEndCaret = 
  @Caret(
  theLine = 114,
  theCol = 46,
  theOffset = 2863),
  theOptionalSource = "sort_simple_contract.ada"
),
       Standard::Integer J @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 114,
  theCol = 48,
  theOffset = 2866),
  theEndCaret = 
  @Caret(
  theLine = 114,
  theCol = 49,
  theOffset = 2866),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            I,
            J),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = $AND(((I >= $First(`Simple_Sort::Vector)) && (I <= $Last(`Simple_Sort::Vector))),((J >= $First(`Simple_Sort::Vector)) && (J <= $Last(`Simple_Sort::Vector)))),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 116,
          theCol = 9,
          theOffset = 2923),
          theEndCaret = 
          @Caret(
          theLine = 116,
          theCol = 43,
          theOffset = 2956),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (($OLD(A)) == $ARRAY_UPDATE (A, `{I -> A [J], J -> A [I]}) ),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 117,
          theCol = 9,
          theOffset = 2966),
          theEndCaret = 
          @Caret(
          theLine = 117,
          theCol = 43,
          theOffset = 2999),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 115,
                          theCol = 17,
                          theOffset = 2899),
                          theEndCaret = 
                          @Caret(
                          theLine = 115,
                          theCol = 18,
                          theOffset = 2899),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 115,
                          theCol = 24,
                          theOffset = 2906),
                          theEndCaret = 
                          @Caret(
                          theLine = 115,
                          theCol = 25,
                          theOffset = 2906),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = I,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 115,
                          theCol = 27,
                          theOffset = 2909),
                          theEndCaret = 
                          @Caret(
                          theLine = 115,
                          theCol = 28,
                          theOffset = 2909),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = J,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 115,
                          theCol = 30,
                          theOffset = 2912),
                          theEndCaret = 
                          @Caret(
                          theLine = 115,
                          theCol = 31,
                          theOffset = 2912),
                          theOptionalSource = "sort_simple_contract.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 115,
                  theCol = 17,
                  theOffset = 2899),
                  theEndCaret = 
                  @Caret(
                  theLine = 115,
                  theCol = 31,
                  theOffset = 2912),
                  theOptionalSource = "sort_simple_contract.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 115,
              theCol = 9,
              theOffset = 2891),
              theEndCaret = 
              @Caret(
              theLine = 115,
              theCol = 32,
              theOffset = 2913),
              theOptionalSource = "sort_simple_contract.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 114,
      theCol = 3,
      theOffset = 2821),
      theEndCaret = 
      @Caret(
      theLine = 124,
      theCol = 20,
      theOffset = 3112),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 114,
      theCol = 13,
      theOffset = 2831),
      theEndCaret = 
      @Caret(
      theLine = 114,
      theCol = 25,
      theOffset = 2842),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 114,
      theCol = 3,
      theOffset = 2821),
      theEndCaret = 
      @Caret(
      theLine = 114,
      theCol = 63,
      theOffset = 2880),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Integer Temp @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 119,
      theCol = 5,
      theOffset = 3016),
      theEndCaret = 
      @Caret(
      theLine = 119,
      theCol = 9,
      theOffset = 3019),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l204.  temp$1 := I;
  #l205.  temp$2 := A [temp$1];
  #l206. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l204,
      endLabel = l206,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 121,
      theCol = 5,
      theOffset = 3044),
      theEndCaret = 
      @Caret(
      theLine = 121,
      theCol = 18,
      theOffset = 3056),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Temp := temp$2;
  #l207.  temp$3 := I;
  #l208.  temp$4 := J;
  #l209.  temp$5 := A [temp$4];
  #l210. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l207,
      endLabel = l210,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 122,
      theCol = 5,
      theOffset = 3062),
      theEndCaret = 
      @Caret(
      theLine = 122,
      theCol = 18,
      theOffset = 3074),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  A [temp$3] := temp$5;
  #l211.  temp$6 := J;
  #l212.  temp$7 := Temp;
  #l213. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l211,
      endLabel = l213,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 123,
      theCol = 5,
      theOffset = 3080),
      theEndCaret = 
      @Caret(
      theLine = 123,
      theCol = 18,
      theOffset = 3092),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  A [temp$6] := temp$7;
  #l214.  return;
}
procedure BubbleSort_using_SwapElements 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 126,
  theCol = 43,
  theOffset = 3159),
  theEndCaret = 
  @Caret(
  theLine = 126,
  theCol = 44,
  theOffset = 3159),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 126,
      theCol = 3,
      theOffset = 3119),
      theEndCaret = 
      @Caret(
      theLine = 143,
      theCol = 37,
      theOffset = 3558),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 126,
      theCol = 13,
      theOffset = 3129),
      theEndCaret = 
      @Caret(
      theLine = 126,
      theCol = 42,
      theOffset = 3157),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 126,
      theCol = 3,
      theOffset = 3119),
      theEndCaret = 
      @Caret(
      theLine = 126,
      theCol = 61,
      theOffset = 3176),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Boolean Swapped @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 128,
      theCol = 5,
      theOffset = 3187),
      theEndCaret = 
      @Caret(
      theLine = 128,
      theCol = 12,
      theOffset = 3193),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Integer N @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 129,
      theCol = 5,
      theOffset = 3210),
      theEndCaret = 
      @Caret(
      theLine = 129,
      theCol = 6,
      theOffset = 3210),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Simple_Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Vector temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l215.  temp$1 := $Last(`Simple_Sort::Index_Type);
  #l216. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l215,
      endLabel = l216,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 131,
      theCol = 5,
      theOffset = 3235),
      theEndCaret = 
      @Caret(
      theLine = 131,
      theCol = 17,
      theOffset = 3246),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  N := temp$1;
  #l217. 
  #l219.  temp$2 := false;
  #l220. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l219,
      endLabel = l220,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 133,
      theCol = 7,
      theOffset = 3264),
      theEndCaret = 
      @Caret(
      theLine = 133,
      theCol = 24,
      theOffset = 3280),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Swapped := temp$2;
    #l223.  temp$3 := N;
    #l224.  temp$4 := 1;
    #l225.  temp$5 := (temp$3 - temp$4);
    #l226.  temp$6 := $First(`Simple_Sort::Index_Type);
    #l227.  if (temp$6 > temp$5) then goto l222;
    #l228.  I := temp$6;
    #l221. 
    #l229.  temp$7 := I;
    #l230.  temp$8 := A [temp$7];
    #l231.  temp$9 := I;
    #l232.  temp$10 := 1;
    #l233.  temp$11 := (temp$9 + temp$10);
    #l234.  temp$12 := A [temp$11];
    #l235.  temp$13 := (temp$8 > temp$12);
    #l236.  if !(temp$13) then goto l237; 
    #l238.  temp$14 := A;
    #l240.  temp$15 := I;
    #l241.  temp$16 := I;
    #l242.  temp$17 := 1;
    #l243.  temp$18 := (temp$16 + temp$17);
    #l244. <@ProcedureCallStatementAnnotation(
      optCopyBackPart = @Mark(
      startLabel = l239,
      endLabel = l239,
      optRS = @NONE
    ),
        mark = @Mark(
        startLabel = l238,
        endLabel = l244,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 136,
        theCol = 11,
        theOffset = 3375),
        theEndCaret = 
        @Caret(
        theLine = 136,
        theCol = 37,
        theOffset = 3400),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  call  Simple_Sort::SwapElements (temp$14, temp$15, temp$18);
    #l239. <@CopyBackStatementAnnotation(
        mark = @Mark(
        startLabel = l239,
        endLabel = l239,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 136,
        theCol = 24,
        theOffset = 3388),
        theEndCaret = 
        @Caret(
        theLine = 136,
        theCol = 25,
        theOffset = 3388),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  A := temp$14;
    #l245.  temp$19 := true;
    #l246. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l245,
        endLabel = l246,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 137,
        theCol = 11,
        theOffset = 3412),
        theEndCaret = 
        @Caret(
        theLine = 137,
        theCol = 27,
        theOffset = 3427),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Swapped := temp$19;
    #l247.  goto l248;
    #l237. 
    #l248. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l229,
      endLabel = l236,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 135,
      theCol = 9,
      theOffset = 3341),
      theEndCaret = 
      @Caret(
      theLine = 135,
      theCol = 27,
      theOffset = 3358),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l229,
        endLabel = l248,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 135,
        theCol = 9,
        theOffset = 3341),
        theEndCaret = 
        @Caret(
        theLine = 138,
        theCol = 16,
        theOffset = 3443),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l249.  temp$20 := (I == temp$5);
    #l250.  if temp$20 then goto l222;
    #l251.  temp$21 := I + 1;
    #l252.  I := temp$21;
    #l253.  goto l221;
    #l222. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l223,
      endLabel = l228,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 134,
      theCol = 7,
      theOffset = 3288),
      theEndCaret = 
      @Caret(
      theLine = 134,
      theCol = 51,
      theOffset = 3331),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l223,
          endLabel = l222,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 134,
          theCol = 7,
          theOffset = 3288),
          theEndCaret = 
          @Caret(
          theLine = 139,
          theCol = 16,
          theOffset = 3459),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l254.  temp$22 := N;
  #l255.  temp$23 := 1;
  #l256.  temp$24 := (temp$22 - temp$23);
  #l257. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l254,
      endLabel = l257,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 140,
      theCol = 7,
      theOffset = 3467),
      theEndCaret = 
      @Caret(
      theLine = 140,
      theCol = 18,
      theOffset = 3477),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  N := temp$24;
  #l258.  temp$25 := Swapped;
  #l259.  temp$26 := !(temp$25);
  #l260. <@ExitStatementAnnotation(
    hasWhen = true,
      mark = @Mark(
      startLabel = l258,
      endLabel = l260,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 141,
      theCol = 7,
      theOffset = 3485),
      theEndCaret = 
      @Caret(
      theLine = 141,
      theCol = 29,
      theOffset = 3506),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  if temp$26 then goto l218;
  #l261.  goto l217;
  #l218. <@DefaultLoopStatementAnnotation(
      optLoopId = @NONE,
      body = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l217,
        endLabel = l218,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 132,
        theCol = 5,
        theOffset = 3252),
        theEndCaret = 
        @Caret(
        theLine = 142,
        theCol = 14,
        theOffset = 3520),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE  
  )> 
  #l262.  return;
}
procedure InsertionSort 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 145,
  theCol = 28,
  theOffset = 3590),
  theEndCaret = 
  @Caret(
  theLine = 145,
  theCol = 29,
  theOffset = 3590),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 145,
      theCol = 3,
      theOffset = 3565),
      theEndCaret = 
      @Caret(
      theLine = 159,
      theCol = 21,
      theOffset = 3925),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 145,
      theCol = 13,
      theOffset = 3575),
      theEndCaret = 
      @Caret(
      theLine = 145,
      theCol = 26,
      theOffset = 3587),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 145,
      theCol = 3,
      theOffset = 3565),
      theEndCaret = 
      @Caret(
      theLine = 145,
      theCol = 46,
      theOffset = 3607),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Integer Value @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 147,
      theCol = 5,
      theOffset = 3618),
      theEndCaret = 
      @Caret(
      theLine = 147,
      theCol = 10,
      theOffset = 3622),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Natural J @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 148,
      theCol = 5,
      theOffset = 3639),
      theEndCaret = 
      @Caret(
      theLine = 148,
      theCol = 6,
      theOffset = 3639),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Integer I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$32 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l265.  temp$1 := $Last(`Simple_Sort::Index_Type);
    #l266.  temp$2 := $First(`Simple_Sort::Index_Type);
    #l267.  temp$3 := 1;
    #l268.  temp$4 := (temp$2 + temp$3);
    #l269.  if (temp$4 > temp$1) then goto l264;
    #l270.  I := temp$4;
    #l263. 
    #l271.  temp$5 := I;
    #l272.  temp$6 := A [temp$5];
    #l273. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l271,
        endLabel = l273,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 151,
        theCol = 7,
        theOffset = 3720),
        theEndCaret = 
        @Caret(
        theLine = 151,
        theCol = 21,
        theOffset = 3733),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Value := temp$6;
    #l274.  temp$7 := I;
    #l275.  temp$8 := 1;
    #l276.  temp$9 := (temp$7 - temp$8);
    #l277. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l274,
        endLabel = l277,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 152,
        theCol = 7,
        theOffset = 3741),
        theEndCaret = 
        @Caret(
        theLine = 152,
        theCol = 18,
        theOffset = 3751),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  J := temp$9;
    #l278. 
    #l279. temp$17 := false;
      #l280.  temp$10 := J;
      #l281.  temp$11 := $First(`Simple_Sort::Index_Type);
      #l282.  temp$12 := (temp$10 >= temp$11);
    #l287.  if (!temp$12) then goto l290;
      #l283.  temp$13 := J;
      #l284.  temp$14 := A [temp$13];
      #l285.  temp$15 := Value;
      #l286.  temp$16 := (temp$14 > temp$15);
    #l288.  if (!temp$16) then goto l290;
    #l289. temp$17 := true;
    #l290.
    #l291.  temp$18 := temp$17;
    #l293.  if !temp$18 then goto l292;
    #l294.  temp$19 := J;
    #l295.  temp$20 := 1;
    #l296.  temp$21 := (temp$19 + temp$20);
    #l297.  temp$22 := J;
    #l298.  temp$23 := A [temp$22];
    #l299. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l294,
        endLabel = l299,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 154,
        theCol = 9,
        theOffset = 3813),
        theEndCaret = 
        @Caret(
        theLine = 154,
        theCol = 26,
        theOffset = 3829),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  A [temp$21] := temp$23;
    #l300.  temp$24 := J;
    #l301.  temp$25 := 1;
    #l302.  temp$26 := (temp$24 - temp$25);
    #l303. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l300,
        endLabel = l303,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 155,
        theCol = 9,
        theOffset = 3839),
        theEndCaret = 
        @Caret(
        theLine = 155,
        theCol = 20,
        theOffset = 3849),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  J := temp$26;
    #l304.  goto l278;
    #l292. <@WhileLoopStatementAnnotation(
      condPart = @Mark(
      startLabel = l279,
      endLabel = l293,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 153,
      theCol = 7,
      theOffset = 3759),
      theEndCaret = 
      @Caret(
      theLine = 153,
      theCol = 52,
      theOffset = 3803),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l278,
          endLabel = l292,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 153,
          theCol = 7,
          theOffset = 3759),
          theEndCaret = 
          @Caret(
          theLine = 156,
          theCol = 16,
          theOffset = 3865),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
    #l305.  temp$27 := J;
    #l306.  temp$28 := 1;
    #l307.  temp$29 := (temp$27 + temp$28);
    #l308.  temp$30 := Value;
    #l309. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l305,
        endLabel = l309,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 157,
        theCol = 7,
        theOffset = 3873),
        theEndCaret = 
        @Caret(
        theLine = 157,
        theCol = 25,
        theOffset = 3890),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  A [temp$29] := temp$30;
    #l310.  temp$31 := (I == temp$1);
    #l311.  if temp$31 then goto l264;
    #l312.  temp$32 := I + 1;
    #l313.  I := temp$32;
    #l314.  goto l263;
    #l264. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l265,
      endLabel = l270,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 150,
      theCol = 5,
      theOffset = 3664),
      theEndCaret = 
      @Caret(
      theLine = 150,
      theCol = 54,
      theOffset = 3712),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l265,
          endLabel = l264,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 150,
          theCol = 5,
          theOffset = 3664),
          theEndCaret = 
          @Caret(
          theLine = 158,
          theCol = 14,
          theOffset = 3904),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l315.  return;
}
procedure SelectionSort 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 161,
  theCol = 28,
  theOffset = 3957),
  theEndCaret = 
  @Caret(
  theLine = 161,
  theCol = 29,
  theOffset = 3957),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 161,
      theCol = 3,
      theOffset = 3932),
      theEndCaret = 
      @Caret(
      theLine = 180,
      theCol = 21,
      theOffset = 4376),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 161,
      theCol = 13,
      theOffset = 3942),
      theEndCaret = 
      @Caret(
      theLine = 161,
      theCol = 26,
      theOffset = 3954),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 161,
      theCol = 3,
      theOffset = 3932),
      theEndCaret = 
      @Caret(
      theLine = 161,
      theCol = 46,
      theOffset = 3974),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Integer Min @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 163,
      theCol = 5,
      theOffset = 3985),
      theEndCaret = 
      @Caret(
      theLine = 163,
      theCol = 8,
      theOffset = 3987),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Integer Temp @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 164,
      theCol = 5,
      theOffset = 4004),
      theEndCaret = 
      @Caret(
      theLine = 164,
      theCol = 9,
      theOffset = 4007),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Simple_Sort::Index_Type Pos @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l318.  temp$1 := $First(`Simple_Sort::Index_Type);
    #l319.  temp$2 := $Last(`Simple_Sort::Index_Type);
    #l320.  if (temp$1 > temp$2) then goto l317;
    #l321.  Pos := temp$1;
    #l316. 
    #l322.  temp$3 := Pos;
    #l323. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l322,
        endLabel = l323,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 167,
        theCol = 7,
        theOffset = 4065),
        theEndCaret = 
        @Caret(
        theLine = 167,
        theCol = 18,
        theOffset = 4075),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Min := temp$3;
      #l326.  temp$4 := $Last(`Simple_Sort::Index_Type);
      #l327.  temp$5 := Pos;
      #l328.  temp$6 := 1;
      #l329.  temp$7 := (temp$5 + temp$6);
      #l330.  if (temp$7 > temp$4) then goto l325;
      #l331.  I := temp$7;
      #l324. 
      #l332.  temp$8 := I;
      #l333.  temp$9 := A [temp$8];
      #l334.  temp$10 := Min;
      #l335.  temp$11 := A [temp$10];
      #l336.  temp$12 := (temp$9 < temp$11);
      #l337.  if !(temp$12) then goto l338; 
      #l339.  temp$13 := I;
      #l340. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l339,
          endLabel = l340,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 170,
          theCol = 11,
          theOffset = 4181),
          theEndCaret = 
          @Caret(
          theLine = 170,
          theCol = 20,
          theOffset = 4189),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Min := temp$13;
      #l341.  goto l342;
      #l338. 
      #l342. <@IfStatementAnnotation(
        ifPart = @Mark(
        startLabel = l332,
        endLabel = l337,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 169,
        theCol = 9,
        theOffset = 4149),
        theEndCaret = 
        @Caret(
        theLine = 169,
        theCol = 25,
        theOffset = 4164),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        thenPart= @MARK_PLACEHOLDER,
        optElsIfParts = @NONE,
        optElsePart = @NONE,
          mark = @Mark(
          startLabel = l332,
          endLabel = l342,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 169,
          theCol = 9,
          theOffset = 4149),
          theEndCaret = 
          @Caret(
          theLine = 171,
          theCol = 16,
          theOffset = 4205),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
      )> 
      #l343.  temp$14 := (I == temp$4);
      #l344.  if temp$14 then goto l325;
      #l345.  temp$15 := I + 1;
      #l346.  I := temp$15;
      #l347.  goto l324;
      #l325. <@ForLoopStatementAnnotation(
        sparkIterVarID = I,
        pilarIterVarID = I,
        initPart = @Mark(
        startLabel = l326,
        endLabel = l331,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 168,
        theCol = 7,
        theOffset = 4083),
        theEndCaret = 
        @Caret(
        theLine = 168,
        theCol = 64,
        theOffset = 4139),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        isRev = false,
          optLoopId = @NONE,
          body = @MARK_PLACEHOLDER,
            mark = @Mark(
            startLabel = l326,
            endLabel = l325,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 168,
            theCol = 7,
            theOffset = 4083),
            theEndCaret = 
            @Caret(
            theLine = 172,
            theCol = 16,
            theOffset = 4221),
            theOptionalSource = "sort_simple_contract.ada"
          )
          ),
            optSparkLabelList = @NONE  
      )> 
    #l348.  temp$16 := Pos;
    #l349.  temp$17 := Min;
    #l350.  temp$18 := (temp$16 != temp$17);
    #l351.  if !(temp$18) then goto l352; 
    #l353.  temp$19 := Pos;
    #l354.  temp$20 := A [temp$19];
    #l355. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l353,
        endLabel = l355,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 175,
        theCol = 9,
        theOffset = 4263),
        theEndCaret = 
        @Caret(
        theLine = 175,
        theCol = 24,
        theOffset = 4277),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Temp := temp$20;
    #l356.  temp$21 := Pos;
    #l357.  temp$22 := Min;
    #l358.  temp$23 := A [temp$22];
    #l359. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l356,
        endLabel = l359,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 176,
        theCol = 9,
        theOffset = 4287),
        theEndCaret = 
        @Caret(
        theLine = 176,
        theCol = 26,
        theOffset = 4303),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  A [temp$21] := temp$23;
    #l360.  temp$24 := Min;
    #l361.  temp$25 := Temp;
    #l362. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l360,
        endLabel = l362,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 177,
        theCol = 9,
        theOffset = 4313),
        theEndCaret = 
        @Caret(
        theLine = 177,
        theCol = 24,
        theOffset = 4327),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  A [temp$24] := temp$25;
    #l363.  goto l364;
    #l352. 
    #l364. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l348,
      endLabel = l351,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 174,
      theCol = 7,
      theOffset = 4236),
      theEndCaret = 
      @Caret(
      theLine = 174,
      theCol = 20,
      theOffset = 4248),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l348,
        endLabel = l364,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 174,
        theCol = 7,
        theOffset = 4236),
        theEndCaret = 
        @Caret(
        theLine = 178,
        theCol = 14,
        theOffset = 4341),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l365.  temp$26 := (Pos == temp$2);
    #l366.  if temp$26 then goto l317;
    #l367.  temp$27 := Pos + 1;
    #l368.  Pos := temp$27;
    #l369.  goto l316;
    #l317. <@ForLoopStatementAnnotation(
      sparkIterVarID = Pos,
      pilarIterVarID = Pos,
      initPart = @Mark(
      startLabel = l318,
      endLabel = l321,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 166,
      theCol = 5,
      theOffset = 4032),
      theEndCaret = 
      @Caret(
      theLine = 166,
      theCol = 31,
      theOffset = 4057),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l318,
          endLabel = l317,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 166,
          theCol = 5,
          theOffset = 4032),
          theEndCaret = 
          @Caret(
          theLine = 179,
          theCol = 14,
          theOffset = 4355),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l370.  return;
}
procedure ShellSort 
      (Simple_Sort::Vector A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 182,
  theCol = 24,
  theOffset = 4404),
  theEndCaret = 
  @Caret(
  theLine = 182,
  theCol = 25,
  theOffset = 4404),
  theOptionalSource = "sort_simple_contract.ada"
))
@MethodAnnotation(
  theSourceFileName = "sort_simple_contract.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 182,
      theCol = 3,
      theOffset = 4383),
      theEndCaret = 
      @Caret(
      theLine = 200,
      theCol = 17,
      theOffset = 4907),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 182,
      theCol = 13,
      theOffset = 4393),
      theEndCaret = 
      @Caret(
      theLine = 182,
      theCol = 22,
      theOffset = 4401),
      theOptionalSource = "sort_simple_contract.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 182,
      theCol = 3,
      theOffset = 4383),
      theEndCaret = 
      @Caret(
      theLine = 182,
      theCol = 42,
      theOffset = 4421),
      theOptionalSource = "sort_simple_contract.ada"
    )
) 
{

  local
    Standard::Natural Increment @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 183,
      theCol = 5,
      theOffset = 4430),
      theEndCaret = 
      @Caret(
      theLine = 183,
      theCol = 14,
      theOffset = 4438),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Simple_Sort::Index_Type J @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 184,
      theCol = 5,
      theOffset = 4478),
      theEndCaret = 
      @Caret(
      theLine = 184,
      theCol = 6,
      theOffset = 4478),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Standard::Integer Temp @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 185,
      theCol = 5,
      theOffset = 4498),
      theEndCaret = 
      @Caret(
      theLine = 185,
      theCol = 9,
      theOffset = 4501),
      theOptionalSource = "sort_simple_contract.ada"
    )
    );
    Simple_Sort::Index_Type temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$32 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$33 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Simple_Sort::Index_Type temp$34 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$35 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$36 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$37 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l371.  temp$1 := $Last(`Simple_Sort::Index_Type);
  #l372.  temp$2 := 2;
  #l373.  temp$3 := (temp$1 / temp$2);
  #l374. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l371,
      endLabel = l374,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 183,
      theCol = 5,
      theOffset = 4430),
      theEndCaret = 
      @Caret(
      theLine = 183,
      theCol = 14,
      theOffset = 4438),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  Increment := temp$3;
  #l375. 
  #l376.  temp$4 := Increment;
  #l377.  temp$5 := 0;
  #l378.  temp$6 := (temp$4 > temp$5);
  #l380.  if !temp$6 then goto l379;
    #l383.  temp$7 := $Last(`Simple_Sort::Index_Type);
    #l384.  temp$8 := Increment;
    #l385.  if (temp$8 > temp$7) then goto l382;
    #l386.  I := temp$8;
    #l381. 
    #l387.  temp$9 := I;
    #l388. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l387,
        endLabel = l388,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 189,
        theCol = 9,
        theOffset = 4625),
        theEndCaret = 
        @Caret(
        theLine = 189,
        theCol = 16,
        theOffset = 4631),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  J := temp$9;
    #l389.  temp$10 := I;
    #l390.  temp$11 := A [temp$10];
    #l391. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l389,
        endLabel = l391,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 190,
        theCol = 9,
        theOffset = 4641),
        theEndCaret = 
        @Caret(
        theLine = 190,
        theCol = 22,
        theOffset = 4653),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Temp := temp$11;
    #l392. 
    #l393. temp$21 := false;
      #l394.  temp$12 := J;
      #l395.  temp$13 := Increment;
      #l396.  temp$14 := (temp$12 > temp$13);
    #l403.  if (!temp$14) then goto l406;
      #l397.  temp$15 := J;
      #l398.  temp$16 := Increment;
      #l399.  temp$17 := (temp$15 - temp$16);
      #l400.  temp$18 := A [temp$17];
      #l401.  temp$19 := Temp;
      #l402.  temp$20 := (temp$18 > temp$19);
    #l404.  if (!temp$20) then goto l406;
    #l405. temp$21 := true;
    #l406.
    #l407.  temp$22 := temp$21;
    #l409.  if !temp$22 then goto l408;
    #l410.  temp$23 := J;
    #l411.  temp$24 := J;
    #l412.  temp$25 := Increment;
    #l413.  temp$26 := (temp$24 - temp$25);
    #l414.  temp$27 := A [temp$26];
    #l415. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l410,
        endLabel = l415,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 192,
        theCol = 11,
        theOffset = 4731),
        theEndCaret = 
        @Caret(
        theLine = 192,
        theCol = 36,
        theOffset = 4755),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  A [temp$23] := temp$27;
    #l416.  temp$28 := J;
    #l417.  temp$29 := Increment;
    #l418.  temp$30 := (temp$28 - temp$29);
    #l419. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l416,
        endLabel = l419,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 193,
        theCol = 11,
        theOffset = 4767),
        theEndCaret = 
        @Caret(
        theLine = 193,
        theCol = 30,
        theOffset = 4785),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  J := temp$30;
    #l420.  goto l392;
    #l408. <@WhileLoopStatementAnnotation(
      condPart = @Mark(
      startLabel = l393,
      endLabel = l409,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 191,
      theCol = 9,
      theOffset = 4663),
      theEndCaret = 
      @Caret(
      theLine = 191,
      theCol = 66,
      theOffset = 4719),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l392,
          endLabel = l408,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 191,
          theCol = 9,
          theOffset = 4663),
          theEndCaret = 
          @Caret(
          theLine = 194,
          theCol = 18,
          theOffset = 4803),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
    #l421.  temp$31 := J;
    #l422.  temp$32 := Temp;
    #l423. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l421,
        endLabel = l423,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 195,
        theCol = 9,
        theOffset = 4813),
        theEndCaret = 
        @Caret(
        theLine = 195,
        theCol = 22,
        theOffset = 4825),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  A [temp$31] := temp$32;
    #l424.  temp$33 := (I == temp$7);
    #l425.  if temp$33 then goto l382;
    #l426.  temp$34 := I + 1;
    #l427.  I := temp$34;
    #l428.  goto l381;
    #l382. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l383,
      endLabel = l386,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 188,
      theCol = 7,
      theOffset = 4557),
      theEndCaret = 
      @Caret(
      theLine = 188,
      theCol = 66,
      theOffset = 4615),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l383,
          endLabel = l382,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 188,
          theCol = 7,
          theOffset = 4557),
          theEndCaret = 
          @Caret(
          theLine = 196,
          theCol = 16,
          theOffset = 4841),
          theOptionalSource = "sort_simple_contract.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l429.  temp$35 := Increment;
  #l430.  temp$36 := 2;
  #l431.  temp$37 := (temp$35 / temp$36);
  #l432. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l429,
      endLabel = l432,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 198,
      theCol = 7,
      theOffset = 4850),
      theEndCaret = 
      @Caret(
      theLine = 198,
      theCol = 34,
      theOffset = 4876),
      theOptionalSource = "sort_simple_contract.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Increment := temp$37;
  #l433.  goto l375;
  #l379. <@WhileLoopStatementAnnotation(
    condPart = @Mark(
    startLabel = l376,
    endLabel = l380,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 187,
    theCol = 5,
    theOffset = 4526),
    theEndCaret = 
    @Caret(
    theLine = 187,
    theCol = 29,
    theOffset = 4549),
    theOptionalSource = "sort_simple_contract.ada"
  )
  ),
      optLoopId = @NONE,
      body = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l375,
        endLabel = l379,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 187,
        theCol = 5,
        theOffset = 4526),
        theEndCaret = 
        @Caret(
        theLine = 199,
        theCol = 14,
        theOffset = 4890),
        theOptionalSource = "sort_simple_contract.ada"
      )
      ),
        optSparkLabelList = @NONE  
  )> 
  #l434.  return;
}