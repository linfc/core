@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package QuantifierTest
@PackageAnnotation(
  theSourceFileName = "quantifier_test.ada",
  theSparkName = QuantifierTest,
  thePilarSparkName = QuantifierTest,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @List(@SymbolEntry(sparkID = "V",pilarSparkID = QuantifierTest::@@V,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE)),
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 15,
  theCol = 20,
  theOffset = 252),
  theOptionalSource = "quantifier_test.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 23,
  theOffset = 21),
  theOptionalSource = "quantifier_test.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @PackageSpecificationAnnotation(
      theOptionalOwnStatement = @OwnStatement(
      theOwnClauses = 
        @List(@OwnClause(
          theOptionalDeclaredType = @NONE,
          theOwnVariables = 
            @List(@OwnVariable(
              varName = QuantifierTest::@@V,
              mode = @NONE,
              ownCategory = @CONCRETE,
              theOwnVariableSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 2,
                  theCol = 9,
                  theOffset = 32),
                  theEndCaret = 
                  @Caret(
                  theLine = 2,
                  theCol = 10,
                  theOffset = 32),
                  theOptionalSource = "quantifier_test.ada"
                )
            )),
          theOwnClauseSelection =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 2,
              theCol = 9,
              theOffset = 32),
              theEndCaret = 
              @Caret(
              theLine = 2,
              theCol = 10,
              theOffset = 33),
              theOptionalSource = "quantifier_test.ada"
            )
        )),
      theOwnStatementSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 2,
          theCol = 5,
          theOffset = 28),
          theEndCaret = 
          @Caret(
          theLine = 2,
          theCol = 10,
          theOffset = 33),
          theOptionalSource = "quantifier_test.ada"
        )
    ),
      theOptionalVarInitClause = @List(QuantifierTest::@@V)
    ),
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Index
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 60),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 29,
      theOffset = 85),
      theOptionalSource = "quantifier_test.ada"
    ),
    fullyQualifiedName = QuantifierTest::Index,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = 1,
        theHighRangeExp = 10))
{}
record Vector
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 89),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 43,
      theOffset = 128),
      theOptionalSource = "quantifier_test.ada"
    ),
    fullyQualifiedName = QuantifierTest::Vector,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Integer,
        theDiscreteSubTypes = 
          @List(`QuantifierTest::Index)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
    global QuantifierTest::Vector @@V @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "V",pilarSparkID = QuantifierTest::@@V,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 9,
    theCol = 3,
    theOffset = 135),
    theEndCaret = 
    @Caret(
    theLine = 9,
    theCol = 4,
    theOffset = 135),
    theOptionalSource = "quantifier_test.ada"
  )
  );
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure dummy 
      (QuantifierTest::Index I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 19,
  theOffset = 166),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 20,
  theOffset = 166),
  theOptionalSource = "quantifier_test.ada"
))
@MethodAnnotation(
  theSourceFileName = "quantifier_test.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(I),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = QuantifierTest::@@V,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 12,
              theCol = 21,
              theOffset = 201),
              theEndCaret = 
              @Caret(
              theLine = 12,
              theCol = 22,
              theOffset = 201),
              theOptionalSource = "quantifier_test.ada"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 12,
          theCol = 7,
          theOffset = 187),
          theEndCaret = 
          @Caret(
          theLine = 12,
          theCol = 23,
          theOffset = 202),
          theOptionalSource = "quantifier_test.ada"
        ),
      theOptionalInGlobals = @List(QuantifierTest::@@V),
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @List(QuantifierTest::@@V),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = QuantifierTest::@@V,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 15,
                          theOffset = 218),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 16,
                          theOffset = 218),
                          theOptionalSource = "quantifier_test.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = QuantifierTest::@@V,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 22,
                          theOffset = 225),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 23,
                          theOffset = 225),
                          theOptionalSource = "quantifier_test.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = I,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 25,
                          theOffset = 228),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 26,
                          theOffset = 228),
                          theOptionalSource = "quantifier_test.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 13,
                  theCol = 15,
                  theOffset = 218),
                  theEndCaret = 
                  @Caret(
                  theLine = 13,
                  theCol = 26,
                  theOffset = 228),
                  theOptionalSource = "quantifier_test.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 13,
              theCol = 7,
              theOffset = 210),
              theEndCaret = 
              @Caret(
              theLine = 13,
              theCol = 27,
              theOffset = 229),
              theOptionalSource = "quantifier_test.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 150),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 33,
      theOffset = 179),
      theOptionalSource = "quantifier_test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 13,
      theOffset = 160),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 18,
      theOffset = 164),
      theOptionalSource = "quantifier_test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 150),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 32,
      theOffset = 178),
      theOptionalSource = "quantifier_test.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package QuantifierTest
@PackageAnnotation(
  theSourceFileName = "quantifier_test.ada",
  theSparkName = QuantifierTest,
  thePilarSparkName = QuantifierTest,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 17,
  theCol = 1,
  theOffset = 255),
  theEndCaret = 
  @Caret(
  theLine = 29,
  theCol = 20,
  theOffset = 569),
  theOptionalSource = "quantifier_test.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 17,
  theCol = 1,
  theOffset = 255),
  theEndCaret = 
  @Caret(
  theLine = 17,
  theCol = 28,
  theOffset = 281),
  theOptionalSource = "quantifier_test.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure $$binit
 
{
  #l1. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 28,
      theCol = 3,
      theOffset = 526),
      theEndCaret = 
      @Caret(
      theLine = 28,
      theCol = 27,
      theOffset = 549),
      theOptionalSource = "quantifier_test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  QuantifierTest::@@V := `QuantifierTest::Vector (
     
    {
      QuantifierTest::Index iter0 => 
        switch iter0 
    | => (0)
    }
  );
  #locret. return;
}
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure dummy 
      (QuantifierTest::Index I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 20,
  theCol = 19,
  theOffset = 305),
  theEndCaret = 
  @Caret(
  theLine = 20,
  theCol = 20,
  theOffset = 305),
  theOptionalSource = "quantifier_test.ada"
))
@MethodAnnotation(
  theSourceFileName = "quantifier_test.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(I),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 3,
      theOffset = 289),
      theEndCaret = 
      @Caret(
      theLine = 25,
      theCol = 13,
      theOffset = 513),
      theOptionalSource = "quantifier_test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 13,
      theOffset = 299),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 18,
      theOffset = 303),
      theOptionalSource = "quantifier_test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 3,
      theOffset = 289),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 31,
      theOffset = 316),
      theOptionalSource = "quantifier_test.ada"
    )
) 
{

  local
    QuantifierTest::Index temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    QuantifierTest::Index temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l2. <@AssertStatementAnnotation(
      mark = @Mark(
      startLabel = l2,
      endLabel = l2,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 9,
      theOffset = 337),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 74,
      theOffset = 401),
      theOptionalSource = "quantifier_test.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  assert $EXISTS {QuantifierTest::Index J => 
    switch J
      | (1, 2) => $AND((QuantifierTest::@@V [J] > 0),(QuantifierTest::@@V [J] < 7))
      | => true} ;
  #l3.  temp$1 := I;
  #l4.  temp$2 := I;
  #l5.  temp$3 := QuantifierTest::@@V [temp$2];
  #l6.  temp$4 := 3;
  #l7.  temp$5 := (temp$3 + temp$4);
  #l8. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l3,
      endLabel = l8,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 5,
      theOffset = 407),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 22,
      theOffset = 423),
      theOptionalSource = "quantifier_test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  QuantifierTest::@@V [temp$1] := temp$5;
  #l9. <@AssertStatementAnnotation(
      mark = @Mark(
      startLabel = l9,
      endLabel = l9,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 24,
      theCol = 9,
      theOffset = 433),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 76,
      theOffset = 499),
      theOptionalSource = "quantifier_test.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  assert ((3 == 3) && $FOR_ALL {QuantifierTest::Index J => 
    switch J
      | ($First(`QuantifierTest::Index), $Last(`QuantifierTest::Index)) => $OR((QuantifierTest::@@V [J] > 0),(QuantifierTest::@@V [J] < 7))
      | => true}) ;
  #l10.  return;
}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/