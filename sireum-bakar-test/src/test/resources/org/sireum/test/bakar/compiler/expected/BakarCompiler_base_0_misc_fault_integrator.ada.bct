@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package FaultIntegrator
@PackageAnnotation(
  theSourceFileName = "fault_integrator.ada",
  theSparkName = FaultIntegrator,
  thePilarSparkName = FaultIntegrator,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 21,
  theOffset = 580),
  theOptionalSource = "fault_integrator.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 24,
  theOffset = 22),
  theOptionalSource = "fault_integrator.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record T
  @PrivateTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 16,
      theCol = 3,
      theOffset = 420),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 24,
      theOffset = 559),
      theOptionalSource = "fault_integrator.ada"
    ),
    fullyQualifiedName = FaultIntegrator::T,
    tagged = false,
    limited = true,
    theDeclarationLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 3,
        theCol = 3,
        theOffset = 29),
        theEndCaret = 
        @Caret(
        theLine = 3,
        theCol = 29,
        theOffset = 54),
        theOptionalSource = "fault_integrator.ada"
      ),
    typeDefinition = 
      @RecordTypeDefinition(
        tagged = false,
        parentType=@NONE))
{
  Standard::Positive limit @RecordComponentAnnotation(
    sparkID = Limit
  );
  Standard::Natural counter @RecordComponentAnnotation(
    sparkID = Counter
  );
  Standard::Boolean tripped @RecordComponentAnnotation(
    sparkID = Tripped
  );
}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Init 
      (FaultIntegrator::T FI @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 18,
  theOffset = 74),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 20,
  theOffset = 75),
  theOptionalSource = "fault_integrator.ada"
),
       Standard::Positive Threshold @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 18,
  theOffset = 113),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 27,
  theOffset = 121),
  theOptionalSource = "fault_integrator.ada"
))
@MethodAnnotation(
  theSourceFileName = "fault_integrator.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Threshold),
      theOptionalOutParameters = @List(FI)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = FI,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 7,
                          theCol = 15,
                          theOffset = 157),
                          theEndCaret = 
                          @Caret(
                          theLine = 7,
                          theCol = 17,
                          theOffset = 158),
                          theOptionalSource = "fault_integrator.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Threshold,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 7,
                          theCol = 23,
                          theOffset = 165),
                          theEndCaret = 
                          @Caret(
                          theLine = 7,
                          theCol = 32,
                          theOffset = 173),
                          theOptionalSource = "fault_integrator.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 7,
                  theCol = 15,
                  theOffset = 157),
                  theEndCaret = 
                  @Caret(
                  theLine = 7,
                  theCol = 32,
                  theOffset = 173),
                  theOptionalSource = "fault_integrator.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 7,
              theCol = 7,
              theOffset = 149),
              theEndCaret = 
              @Caret(
              theLine = 7,
              theCol = 33,
              theOffset = 174),
              theOptionalSource = "fault_integrator.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 59),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 47,
      theOffset = 141),
      theOptionalSource = "fault_integrator.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 13,
      theOffset = 69),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 17,
      theOffset = 72),
      theOptionalSource = "fault_integrator.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 59),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 46,
      theOffset = 140),
      theOptionalSource = "fault_integrator.ada"
    )
) 
{ #locret. return;}
procedure Test 
      (FaultIntegrator::T FI @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 18,
  theOffset = 194),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 20,
  theOffset = 195),
  theOptionalSource = "fault_integrator.ada"
),
       Standard::Boolean CurrentEvent @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 18,
  theOffset = 239),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 30,
  theOffset = 250),
  theOptionalSource = "fault_integrator.ada"
),
       Standard::Boolean IntegratedEvent @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 18,
  theOffset = 290),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 33,
  theOffset = 304),
  theOptionalSource = "fault_integrator.ada"
))
@MethodAnnotation(
  theSourceFileName = "fault_integrator.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(FI,
            CurrentEvent),
      theOptionalOutParameters = @List(FI,
          IntegratedEvent)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = IntegratedEvent,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 15,
                          theOffset = 339),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 30,
                          theOffset = 353),
                          theOptionalSource = "fault_integrator.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = FI,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 36,
                          theOffset = 391),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 38,
                          theOffset = 392),
                          theOptionalSource = "fault_integrator.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = CurrentEvent,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 40,
                          theOffset = 395),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 52,
                          theOffset = 406),
                          theOptionalSource = "fault_integrator.ada"
                        )
                    ))
                ),
                      @DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = FI,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 15,
                          theOffset = 370),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 17,
                          theOffset = 371),
                          theOptionalSource = "fault_integrator.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = FI,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 36,
                          theOffset = 391),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 38,
                          theOffset = 392),
                          theOptionalSource = "fault_integrator.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = CurrentEvent,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 40,
                          theOffset = 395),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 52,
                          theOffset = 406),
                          theOptionalSource = "fault_integrator.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 12,
                  theCol = 15,
                  theOffset = 339),
                  theEndCaret = 
                  @Caret(
                  theLine = 13,
                  theCol = 52,
                  theOffset = 406),
                  theOptionalSource = "fault_integrator.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 12,
              theCol = 7,
              theOffset = 331),
              theEndCaret = 
              @Caret(
              theLine = 13,
              theCol = 53,
              theOffset = 407),
              theOptionalSource = "fault_integrator.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 179),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 52,
      theOffset = 323),
      theOptionalSource = "fault_integrator.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 13,
      theOffset = 189),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 17,
      theOffset = 192),
      theOptionalSource = "fault_integrator.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 179),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 51,
      theOffset = 322),
      theOptionalSource = "fault_integrator.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package FaultIntegrator
@PackageAnnotation(
  theSourceFileName = "fault_integrator.ada",
  theSparkName = FaultIntegrator,
  thePilarSparkName = FaultIntegrator,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 23,
  theCol = 1,
  theOffset = 583),
  theEndCaret = 
  @Caret(
  theLine = 55,
  theCol = 21,
  theOffset = 1360),
  theOptionalSource = "fault_integrator.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 23,
  theCol = 1,
  theOffset = 583),
  theEndCaret = 
  @Caret(
  theLine = 23,
  theCol = 29,
  theOffset = 610),
  theOptionalSource = "fault_integrator.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Init 
      (FaultIntegrator::T FI @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 26,
  theCol = 18,
  theOffset = 633),
  theEndCaret = 
  @Caret(
  theLine = 26,
  theCol = 20,
  theOffset = 634),
  theOptionalSource = "fault_integrator.ada"
),
       Standard::Positive Threshold @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 27,
  theCol = 18,
  theOffset = 672),
  theEndCaret = 
  @Caret(
  theLine = 27,
  theCol = 27,
  theOffset = 680),
  theOptionalSource = "fault_integrator.ada"
))
@MethodAnnotation(
  theSourceFileName = "fault_integrator.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Threshold),
      theOptionalOutParameters = @List(FI)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 26,
      theCol = 3,
      theOffset = 618),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 12,
      theOffset = 818),
      theOptionalSource = "fault_integrator.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 26,
      theCol = 13,
      theOffset = 628),
      theEndCaret = 
      @Caret(
      theLine = 26,
      theCol = 17,
      theOffset = 631),
      theOptionalSource = "fault_integrator.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 26,
      theCol = 3,
      theOffset = 618),
      theEndCaret = 
      @Caret(
      theLine = 27,
      theCol = 46,
      theOffset = 699),
      theOptionalSource = "fault_integrator.ada"
    )
) 
{
  #l1. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 5,
      theOffset = 718),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 32,
      theOffset = 806),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  FI := `FaultIntegrator::T {
    Limit = Threshold,
    Counter = 0,
    Tripped = false
  };
  #l2.  return;
}
procedure Test 
      (FaultIntegrator::T FI @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 18,
  theOffset = 838),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 20,
  theOffset = 839),
  theOptionalSource = "fault_integrator.ada"
),
       Standard::Boolean CurrentEvent @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 36,
  theCol = 18,
  theOffset = 883),
  theEndCaret = 
  @Caret(
  theLine = 36,
  theCol = 30,
  theOffset = 894),
  theOptionalSource = "fault_integrator.ada"
),
       Standard::Boolean IntegratedEvent @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 37,
  theCol = 18,
  theOffset = 934),
  theEndCaret = 
  @Caret(
  theLine = 37,
  theCol = 33,
  theOffset = 948),
  theOptionalSource = "fault_integrator.ada"
))
@MethodAnnotation(
  theSourceFileName = "fault_integrator.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(FI,
            CurrentEvent),
      theOptionalOutParameters = @List(FI,
          IntegratedEvent)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 3,
      theOffset = 823),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 12,
      theOffset = 1339),
      theOptionalSource = "fault_integrator.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 13,
      theOffset = 833),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 17,
      theOffset = 836),
      theOptionalSource = "fault_integrator.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 3,
      theOffset = 823),
      theEndCaret = 
      @Caret(
      theLine = 37,
      theCol = 51,
      theOffset = 966),
      theOptionalSource = "fault_integrator.ada"
    )
) 
{

  local
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Positive temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Natural temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l3.  temp$1 := CurrentEvent;
  #l4.  if !(temp$1) then goto l5; 
  #l6.  temp$2 := FI.counter;
  #l7.  temp$3 := FI.limit;
  #l8.  temp$4 := (temp$2 == temp$3);
  #l9.  if !(temp$4) then goto l10; 
  #l11.  temp$5 := true;
  #l12. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l11,
      endLabel = l12,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 42,
      theCol = 9,
      theOffset = 1050),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 28,
      theOffset = 1068),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  FI.tripped := temp$5;
  #l13.  goto l18;
  #l10. 
  #l14.  temp$6 := FI.counter;
  #l15.  temp$7 := 1;
  #l16.  temp$8 := (temp$6 + temp$7);
  #l17. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l14,
      endLabel = l17,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 9,
      theOffset = 1089),
      theEndCaret = 
      @Caret(
      theLine = 44,
      theCol = 38,
      theOffset = 1117),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  FI.counter := temp$8;
  #l18. <@IfStatementAnnotation(
    ifPart = @Mark(
    startLabel = l6,
    endLabel = l9,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 41,
    theCol = 7,
    theOffset = 1012),
    theEndCaret = 
    @Caret(
    theLine = 41,
    theCol = 31,
    theOffset = 1035),
    theOptionalSource = "fault_integrator.ada"
  )
  ),
    thenPart= @MARK_PLACEHOLDER,
    optElsIfParts = @NONE,
    optElsePart = @MARK_PLACEHOLDER,
      mark = @Mark(
      startLabel = l6,
      endLabel = l18,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 7,
      theOffset = 1012),
      theEndCaret = 
      @Caret(
      theLine = 45,
      theCol = 14,
      theOffset = 1131),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE  
  )> 
  #l19.  goto l33;
  #l5. 
  #l20.  temp$9 := FI.counter;
  #l21.  temp$10 := 0;
  #l22.  temp$11 := (temp$9 == temp$10);
  #l23.  if !(temp$11) then goto l24; 
  #l25.  temp$12 := false;
  #l26. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l25,
      endLabel = l26,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 9,
      theOffset = 1198),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 29,
      theOffset = 1217),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  FI.tripped := temp$12;
  #l27.  goto l32;
  #l24. 
  #l28.  temp$13 := FI.counter;
  #l29.  temp$14 := 1;
  #l30.  temp$15 := (temp$13 - temp$14);
  #l31. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l28,
      endLabel = l31,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 9,
      theOffset = 1238),
      theEndCaret = 
      @Caret(
      theLine = 50,
      theCol = 38,
      theOffset = 1266),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  FI.counter := temp$15;
  #l32. <@IfStatementAnnotation(
    ifPart = @Mark(
    startLabel = l20,
    endLabel = l23,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 47,
    theCol = 7,
    theOffset = 1167),
    theEndCaret = 
    @Caret(
    theLine = 47,
    theCol = 24,
    theOffset = 1183),
    theOptionalSource = "fault_integrator.ada"
  )
  ),
    thenPart= @MARK_PLACEHOLDER,
    optElsIfParts = @NONE,
    optElsePart = @MARK_PLACEHOLDER,
      mark = @Mark(
      startLabel = l20,
      endLabel = l32,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 47,
      theCol = 7,
      theOffset = 1167),
      theEndCaret = 
      @Caret(
      theLine = 51,
      theCol = 14,
      theOffset = 1280),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE  
  )> 
  #l33. <@IfStatementAnnotation(
    ifPart = @Mark(
    startLabel = l3,
    endLabel = l4,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 40,
    theCol = 5,
    theOffset = 985),
    theEndCaret = 
    @Caret(
    theLine = 40,
    theCol = 20,
    theOffset = 999),
    theOptionalSource = "fault_integrator.ada"
  )
  ),
    thenPart= @MARK_PLACEHOLDER,
    optElsIfParts = @NONE,
    optElsePart = @MARK_PLACEHOLDER,
      mark = @Mark(
      startLabel = l3,
      endLabel = l33,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 40,
      theCol = 5,
      theOffset = 985),
      theEndCaret = 
      @Caret(
      theLine = 52,
      theCol = 12,
      theOffset = 1292),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE  
  )> 
  #l34.  temp$16 := FI.tripped;
  #l35. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l34,
      endLabel = l35,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 53,
      theCol = 5,
      theOffset = 1298),
      theEndCaret = 
      @Caret(
      theLine = 53,
      theCol = 35,
      theOffset = 1327),
      theOptionalSource = "fault_integrator.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  IntegratedEvent := temp$16;
  #l36.  return;
}