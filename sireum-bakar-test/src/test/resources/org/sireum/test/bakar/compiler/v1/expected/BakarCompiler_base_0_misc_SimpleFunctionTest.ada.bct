@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package FunctionTest
@PackageAnnotation(
  theSourceFileName = "SimpleFunctionTest.ada",
  theSparkName = FunctionTest,
  thePilarSparkName = FunctionTest,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 4,
  theCol = 1,
  theOffset = 84),
  theEndCaret = 
  @Caret(
  theLine = 15,
  theCol = 18,
  theOffset = 424),
  theOptionalSource = "SimpleFunctionTest.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 4,
  theCol = 1,
  theOffset = 84),
  theEndCaret = 
  @Caret(
  theLine = 4,
  theCol = 21,
  theOffset = 103),
  theOptionalSource = "SimpleFunctionTest.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Scaledata
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 111),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 49,
      theOffset = 155),
      theOptionalSource = "SimpleFunctionTest.ada"
    ),
    fullyQualifiedName = FunctionTest::Scaledata,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = 100,
        lowerBound = -(100))))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Integer Scale_Movement 
      (Standard::Integer Mach @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 10,
  theOffset = 198),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 14,
  theOffset = 201),
  theOptionalSource = "SimpleFunctionTest.ada"
),
       FunctionTest::Scaledata Present @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 10,
  theOffset = 223),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 17,
  theOffset = 229),
  theOptionalSource = "SimpleFunctionTest.ada"
),
       FunctionTest::Scaledata Target @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 10,
  theOffset = 256),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 16,
  theOffset = 261),
  theOptionalSource = "SimpleFunctionTest.ada"
),
       Standard::Integer Max @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 10,
  theOffset = 289),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 13,
  theOffset = 291),
  theOptionalSource = "SimpleFunctionTest.ada"
))
@MethodAnnotation(
  theSourceFileName = "SimpleFunctionTest.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Mach,
            Present,
            Target,
            Max)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = (Max > 0),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 13,
          theCol = 8,
          theOffset = 342),
          theEndCaret = 
          @Caret(
          theLine = 13,
          theCol = 22,
          theOffset = 355),
          theOptionalSource = "SimpleFunctionTest.ada"
        )
        ),
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalReturnAnnotation = 
        @ContractPredicate(
          theType = @RETURN,
          theExp = {Standard::Integer M => $AND((-(Max) <= M),(M <= Max))},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 14,
          theCol = 8,
          theOffset = 364),
          theEndCaret = 
          @Caret(
          theLine = 14,
          theCol = 51,
          theOffset = 406),
          theOptionalSource = "SimpleFunctionTest.ada"
        )
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 164),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 24,
      theOffset = 333),
      theOptionalSource = "SimpleFunctionTest.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 13,
      theOffset = 173),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 27,
      theOffset = 186),
      theOptionalSource = "SimpleFunctionTest.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 164),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 23,
      theOffset = 332),
      theOptionalSource = "SimpleFunctionTest.ada"
    )
) 
{ #locret. return;}
procedure Standard::Integer Scale_Movement 
      (Standard::Integer Mach @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 10,
  theOffset = 198),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 14,
  theOffset = 201),
  theOptionalSource = "SimpleFunctionTest.ada"
),
       FunctionTest::Scaledata Present @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 10,
  theOffset = 223),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 17,
  theOffset = 229),
  theOptionalSource = "SimpleFunctionTest.ada"
),
       FunctionTest::Scaledata Target @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 10,
  theOffset = 256),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 16,
  theOffset = 261),
  theOptionalSource = "SimpleFunctionTest.ada"
),
       Standard::Integer Max @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 10,
  theOffset = 289),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 13,
  theOffset = 291),
  theOptionalSource = "SimpleFunctionTest.ada"
))
@MethodAnnotation(
  theSourceFileName = "SimpleFunctionTest.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Mach,
            Present,
            Target,
            Max)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 164),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 24,
      theOffset = 333),
      theOptionalSource = "SimpleFunctionTest.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 164),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 24,
      theOffset = 333),
      theOptionalSource = "SimpleFunctionTest.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 164),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 24,
      theOffset = 333),
      theOptionalSource = "SimpleFunctionTest.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/