@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Lbl_t
@PackageAnnotation(
  theSourceFileName = "lbl_t__x0.ads",
  theSparkName = Lbl_t,
  thePilarSparkName = Lbl_t,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 15,
  theCol = 11,
  theOffset = 522),
  theOptionalSource = "lbl_t__x0.ads"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 14,
  theOffset = 12),
  theOptionalSource = "lbl_t__x0.ads"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

const $Const {
  Max_Proc_Id = (Standard::Integer) (3) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PUBLIC,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 10,
        theCol = 3,
        theOffset = 297),
        theEndCaret = 
        @Caret(
        theLine = 10,
        theCol = 14,
        theOffset = 307),
        theOptionalSource = "lbl_t__x0.ads"
      ));
  Mem_Size = (Standard::Integer) (($Last(`Lbl_t::Proc_Id) * $Last(`Lbl_t::Proc_Id))) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PUBLIC,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 13,
        theCol = 3,
        theOffset = 392),
        theEndCaret = 
        @Caret(
        theLine = 13,
        theCol = 11,
        theOffset = 399),
        theOptionalSource = "lbl_t__x0.ads"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Proc_Id
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 336),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 53,
      theOffset = 385),
      theOptionalSource = "lbl_t__x0.ads"
    ),
    fullyQualifiedName = Lbl_t::Proc_Id,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = Lbl_t::$Const.Max_Proc_Id,
        lowerBound = 1)))
{}
record Pointer
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 3,
      theOffset = 453),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 62,
      theOffset = 511),
      theOptionalSource = "lbl_t__x0.ads"
    ),
    fullyQualifiedName = Lbl_t::Pointer,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = Lbl_t::$Const.Mem_Size,
        lowerBound = $First(`Lbl_t::Proc_Id))))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Mem_t
@PackageAnnotation(
  theSourceFileName = "mem_t__x0.ads",
  theSparkName = Mem_t,
  thePilarSparkName = Mem_t,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 13,
  theOffset = 31),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 11,
  theOffset = 198),
  theOptionalSource = "mem_t__x0.ads"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 4,
  theCol = 1,
  theOffset = 46),
  theEndCaret = 
  @Caret(
  theLine = 4,
  theCol = 14,
  theOffset = 58),
  theOptionalSource = "mem_t__x0.ads"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @ContextClause(
    theOptionalWithClauses = @List(Lbl_t,
        Msg_t),
    theOptionalUseTypeClauses = @NONE
  )  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @List(Lbl_t,
          Msg_t)
));

const $Const {
  Def_Mem_Row = (Mem_t::Mem_Row) (`Mem_t::Mem_Row (
     
    {
      Lbl_t::Proc_Id iter0 => 
        switch iter0 
    | => (Msg_t::$Const.Def_Msg)
    }
  )) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PUBLIC,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 8,
        theCol = 3,
        theOffset = 120),
        theEndCaret = 
        @Caret(
        theLine = 8,
        theCol = 14,
        theOffset = 130),
        theOptionalSource = "mem_t__x0.ads"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Mem_Row
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 66),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 54,
      theOffset = 116),
      theOptionalSource = "mem_t__x0.ads"
    ),
    fullyQualifiedName = Mem_t::Mem_Row,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Msg_t::Msg,
        theDiscreteSubTypes = 
          @List(`Lbl_t::Proc_Id)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Memory
@PackageAnnotation(
  theSourceFileName = "memory__x0.adb",
  theSparkName = Memory,
  thePilarSparkName = Memory,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 15,
  theCol = 12,
  theOffset = 300),
  theOptionalSource = "memory__x0.adb"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 20,
  theOffset = 18),
  theOptionalSource = "memory__x0.adb"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure $$binit
 
{
  #l1. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 3,
      theOffset = 238),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 54,
      theOffset = 288),
      theOptionalSource = "memory__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Memory::@@Mem_Space := `Memory::Mem_Space_T (
     
    {
      Lbl_t::Pointer iter0 => 
        switch iter0 
    | => (Msg_t::$Const.Def_Msg)
    }
  );
  #locret. return;
}
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Write 
      (Msg_t::Msg M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 19,
  theOffset = 41),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 20,
  theOffset = 41),
  theOptionalSource = "memory__x0.adb"
),
       Lbl_t::Pointer S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 36,
  theOffset = 58),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 37,
  theOffset = 58),
  theOptionalSource = "memory__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "memory__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(M,
            S),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 13,
      theOffset = 124),
      theOptionalSource = "memory__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 13,
      theOffset = 35),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 18,
      theOffset = 39),
      theOptionalSource = "memory__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 56,
      theOffset = 77),
      theOptionalSource = "memory__x0.adb"
    )
) 
{

  local
    Lbl_t::Pointer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l2.  temp$1 := S;
  #l3.  temp$2 := M;
  #l4. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l2,
      endLabel = l4,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 5,
      theOffset = 94),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 23,
      theOffset = 111),
      theOptionalSource = "memory__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Memory::@@Mem_Space [temp$1] := temp$2;
  #l5.  return;
}
procedure Msg_t::Msg Read 
      (Lbl_t::Pointer S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 17,
  theOffset = 143),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 18,
  theOffset = 143),
  theOptionalSource = "memory__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "memory__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 129),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 12,
      theOffset = 227),
      theOptionalSource = "memory__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 12,
      theOffset = 138),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 16,
      theOffset = 141),
      theOptionalSource = "memory__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 129),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 54,
      theOffset = 179),
      theOptionalSource = "memory__x0.adb"
    )
) 
{

  local
    Lbl_t::Pointer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l6.  temp$1 := S;
  #l7.  temp$2 := Memory::@@Mem_Space [temp$1];
  #l8. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l6,
      endLabel = l8,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 5,
      theOffset = 196),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 25,
      theOffset = 215),
      theOptionalSource = "memory__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$2;
}
procedure Msg_t::Msg Read 
      (Lbl_t::Pointer S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 17,
  theOffset = 143),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 18,
  theOffset = 143),
  theOptionalSource = "memory__x0.adb"
),
       Memory::Mem_Space_T implicit__mem_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 19,
  theCol = 19,
  theOffset = 557),
  theEndCaret = 
  @Caret(
  theLine = 19,
  theCol = 28,
  theOffset = 565),
  theOptionalSource = "memory__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "memory__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(S,
            implicit__mem_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 129),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 12,
      theOffset = 227),
      theOptionalSource = "memory__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 129),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 12,
      theOffset = 227),
      theOptionalSource = "memory__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 129),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 12,
      theOffset = 227),
      theOptionalSource = "memory__x0.adb"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Memory
@PackageAnnotation(
  theSourceFileName = "memory__x0.ads",
  theSparkName = Memory,
  thePilarSparkName = Memory,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @List(@SymbolEntry(sparkID = "Mem_Space",pilarSparkID = Memory::@@Mem_Space,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE)),
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 13,
  theOffset = 31),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 12,
  theOffset = 607),
  theOptionalSource = "memory__x0.ads"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 1,
  theOffset = 45),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 15,
  theOffset = 58),
  theOptionalSource = "memory__x0.ads"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @ContextClause(
    theOptionalWithClauses = @List(Lbl_t,
        Msg_t),
    theOptionalUseTypeClauses = @NONE
  )  ,  
  theOptionalPackageSpecificationAnnotation = 
    @PackageSpecificationAnnotation(
      theOptionalOwnStatement = @OwnStatement(
      theOwnClauses = 
        @List(@OwnClause(
          theOptionalDeclaredType = @NONE,
          theOwnVariables = 
            @List(@OwnVariable(
              varName = Memory::@@Mem_Space,
              mode = @NONE,
              ownCategory = @CONCRETE,
              theOwnVariableSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 4,
                  theCol = 11,
                  theOffset = 70),
                  theEndCaret = 
                  @Caret(
                  theLine = 4,
                  theCol = 20,
                  theOffset = 78),
                  theOptionalSource = "memory__x0.ads"
                )
            )),
          theOwnClauseSelection =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 4,
              theCol = 11,
              theOffset = 70),
              theEndCaret = 
              @Caret(
              theLine = 4,
              theCol = 20,
              theOffset = 79),
              theOptionalSource = "memory__x0.ads"
            )
        )),
      theOwnStatementSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 4,
          theCol = 7,
          theOffset = 66),
          theEndCaret = 
          @Caret(
          theLine = 4,
          theCol = 20,
          theOffset = 79),
          theOptionalSource = "memory__x0.ads"
        )
    ),
      theOptionalVarInitClause = @List(Memory::@@Mem_Space)
    ),
  theOptionalInheritClause = 
    @List(Lbl_t,
          Msg_t)
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Mem_Space_T
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 115),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 58,
      theOffset = 169),
      theOptionalSource = "memory__x0.ads"
    ),
    fullyQualifiedName = Memory::Mem_Space_T,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Msg_t::Msg,
        theDiscreteSubTypes = 
          @List(`Lbl_t::Pointer)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
    global Memory::Mem_Space_T @@Mem_Space @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "Mem_Space",pilarSparkID = Memory::@@Mem_Space,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 8,
    theCol = 3,
    theOffset = 173),
    theEndCaret = 
    @Caret(
    theLine = 8,
    theCol = 12,
    theOffset = 181),
    theOptionalSource = "memory__x0.ads"
  )
  );
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Write 
      (Msg_t::Msg M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 20,
  theOffset = 219),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 21,
  theOffset = 219),
  theOptionalSource = "memory__x0.ads"
),
       Lbl_t::Pointer S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 37,
  theOffset = 236),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 38,
  theOffset = 236),
  theOptionalSource = "memory__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "memory__x0.ads",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(M,
            S),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 11,
              theCol = 23,
              theOffset = 280),
              theEndCaret = 
              @Caret(
              theLine = 11,
              theCol = 32,
              theOffset = 288),
              theOptionalSource = "memory__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 11,
          theCol = 9,
          theOffset = 266),
          theEndCaret = 
          @Caret(
          theLine = 11,
          theCol = 33,
          theOffset = 289),
          theOptionalSource = "memory__x0.ads"
        ),
      theOptionalInGlobals = @List(Memory::@@Mem_Space),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Memory::@@Mem_Space == $ARRAY_UPDATE (($OLD(Memory::@@Mem_Space)), `{S -> M}) ),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 16,
          theCol = 9,
          theOffset = 446),
          theEndCaret = 
          @Caret(
          theLine = 16,
          theCol = 45,
          theOffset = 481),
          theOptionalSource = "memory__x0.ads"
        )
        ),
      theOptionalOutGlobals = @List(Memory::@@Mem_Space),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 17,
                          theOffset = 307),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 26,
                          theOffset = 315),
                          theOptionalSource = "memory__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 32,
                          theOffset = 356),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 33,
                          theOffset = 356),
                          theOptionalSource = "memory__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = M,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 14,
                          theCol = 32,
                          theOffset = 390),
                          theEndCaret = 
                          @Caret(
                          theLine = 14,
                          theCol = 33,
                          theOffset = 390),
                          theOptionalSource = "memory__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 17,
                          theOffset = 307),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 26,
                          theOffset = 315),
                          theOptionalSource = "memory__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 12,
                  theCol = 17,
                  theOffset = 307),
                  theEndCaret = 
                  @Caret(
                  theLine = 14,
                  theCol = 33,
                  theOffset = 390),
                  theOptionalSource = "memory__x0.ads"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 12,
              theCol = 9,
              theOffset = 299),
              theEndCaret = 
              @Caret(
              theLine = 14,
              theCol = 34,
              theOffset = 391),
              theOptionalSource = "memory__x0.ads"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 202),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 58,
      theOffset = 256),
      theOptionalSource = "memory__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 13,
      theOffset = 212),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 18,
      theOffset = 216),
      theOptionalSource = "memory__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 202),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 57,
      theOffset = 255),
      theOptionalSource = "memory__x0.ads"
    )
) 
{ #locret. return;}
procedure Msg_t::Msg Read 
      (Lbl_t::Pointer S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 18,
  theCol = 17,
  theOffset = 500),
  theEndCaret = 
  @Caret(
  theLine = 18,
  theCol = 18,
  theOffset = 500),
  theOptionalSource = "memory__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "memory__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 19,
              theCol = 19,
              theOffset = 557),
              theEndCaret = 
              @Caret(
              theLine = 19,
              theCol = 28,
              theOffset = 565),
              theOptionalSource = "memory__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 19,
          theCol = 9,
          theOffset = 547),
          theEndCaret = 
          @Caret(
          theLine = 19,
          theCol = 29,
          theOffset = 566),
          theOptionalSource = "memory__x0.ads"
        ),
      theOptionalInGlobals = @List(Memory::@@Mem_Space),
      theOptionalReturnAnnotation = 
        @ContractPredicate(
          theType = @RETURN,
          theExp = {Msg_t::Msg __implicit_result_id => (__implicit_result_id == Memory::@@Mem_Space [S])},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 20,
          theCol = 9,
          theOffset = 576),
          theEndCaret = 
          @Caret(
          theLine = 20,
          theCol = 29,
          theOffset = 595),
          theOptionalSource = "memory__x0.ads"
        )
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 3,
      theOffset = 486),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 55,
      theOffset = 537),
      theOptionalSource = "memory__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 12,
      theOffset = 495),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 16,
      theOffset = 498),
      theOptionalSource = "memory__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 3,
      theOffset = 486),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 54,
      theOffset = 536),
      theOptionalSource = "memory__x0.ads"
    )
) 
{ #locret. return;}
procedure Msg_t::Msg Read 
      (Lbl_t::Pointer S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 18,
  theCol = 17,
  theOffset = 500),
  theEndCaret = 
  @Caret(
  theLine = 18,
  theCol = 18,
  theOffset = 500),
  theOptionalSource = "memory__x0.ads"
),
       Memory::Mem_Space_T implicit__mem_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 19,
  theCol = 19,
  theOffset = 557),
  theEndCaret = 
  @Caret(
  theLine = 19,
  theCol = 28,
  theOffset = 565),
  theOptionalSource = "memory__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "memory__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S,
            implicit__mem_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 3,
      theOffset = 486),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 55,
      theOffset = 537),
      theOptionalSource = "memory__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 3,
      theOffset = 486),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 55,
      theOffset = 537),
      theOptionalSource = "memory__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 3,
      theOffset = 486),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 55,
      theOffset = 537),
      theOptionalSource = "memory__x0.ads"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Mmr
@PackageAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theSparkName = Mmr,
  thePilarSparkName = Mmr,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 358,
  theCol = 9,
  theOffset = 13872),
  theOptionalSource = "mmr__x0.adb"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 17,
  theOffset = 15),
  theOptionalSource = "mmr__x0.adb"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure $$binit
 
{

  local
    Lbl_t::Proc_Id I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id J @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 348,
      theCol = 3,
      theOffset = 13441),
      theEndCaret = 
      @Caret(
      theLine = 349,
      theCol = 60,
      theOffset = 13537),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Mmr::@@Pointers := `Mmr::Pointer_Matrix (
     
    {
      Lbl_t::Proc_Id iter0 => 
        switch iter0 
    | => (`Mmr::Pointer_Row (
       
      {
        Lbl_t::Proc_Id iter1 => 
          switch iter1 
      | => (1)
      }
    ))
    }
  );
    #l4.  temp$3 := $Last(`Lbl_t::Proc_Id);
    #l5.  temp$4 := $First(`Lbl_t::Proc_Id);
    #l6.  if (temp$4 > temp$3) then goto l3;
    #l7.  I := temp$4;
    #l2. 
      #l10.  temp$5 := $Last(`Lbl_t::Proc_Id);
      #l11.  temp$6 := $First(`Lbl_t::Proc_Id);
      #l12.  if (temp$6 > temp$5) then goto l9;
      #l13.  J := temp$6;
      #l8. 
      #l14.  temp$7 := I;
      #l15.  temp$8 := J;
      #l16.  temp$9 := J;
      #l17.  temp$10 := $Last(`Lbl_t::Proc_Id);
      #l18.  temp$11 := I;
      #l19.  temp$12 := 1;
      #l20.  temp$13 := (temp$11 - temp$12);
      #l21.  temp$14 := (temp$10 * temp$13);
      #l22.  temp$15 := (temp$9 + temp$14);
      #l23. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l14,
          endLabel = l23,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 354,
          theCol = 9,
          theOffset = 13783),
          theEndCaret = 
          @Caret(
          theLine = 354,
          theCol = 62,
          theOffset = 13835),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Mmr::@@Pointers [temp$7] [temp$8] := temp$15;
      #l24.  temp$16 := (J == temp$5);
      #l25.  if temp$16 then goto l9;
      #l26.  temp$17 := J + 1;
      #l27.  J := temp$17;
      #l28.  goto l8;
      #l9. <@ForLoopStatementAnnotation(
        sparkIterVarID = J,
        pilarIterVarID = J,
        initPart = @Mark(
        startLabel = l10,
        endLabel = l13,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 353,
        theCol = 6,
        theOffset = 13699),
        theEndCaret = 
        @Caret(
        theLine = 353,
        theCol = 81,
        theOffset = 13773),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        isRev = false,
          optLoopId = @NONE,
          body = @MARK_PLACEHOLDER,
            mark = @Mark(
            startLabel = l10,
            endLabel = l9,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 353,
            theCol = 6,
            theOffset = 13699),
            theEndCaret = 
            @Caret(
            theLine = 355,
            theCol = 15,
            theOffset = 13850),
            theOptionalSource = "mmr__x0.adb"
          )
          ),
            optSparkLabelList = @NONE  
      )> 
    #l29.  temp$18 := (I == temp$3);
    #l30.  if temp$18 then goto l3;
    #l31.  temp$19 := I + 1;
    #l32.  I := temp$19;
    #l33.  goto l2;
    #l3. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l4,
      endLabel = l7,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 352,
      theCol = 3,
      theOffset = 13618),
      theEndCaret = 
      @Caret(
      theLine = 352,
      theCol = 78,
      theOffset = 13692),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l4,
          endLabel = l3,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 352,
          theCol = 3,
          theOffset = 13618),
          theEndCaret = 
          @Caret(
          theLine = 356,
          theCol = 12,
          theOffset = 13862),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #locret. return;
}
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Boolean Invariant
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 342),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 17,
      theOffset = 1601),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 12,
      theOffset = 351),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 21,
      theOffset = 359),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 342),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 36,
      theOffset = 374),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 5,
      theOffset = 385),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 11,
      theOffset = 390),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id J @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id K @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id L @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$32 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$33 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$34 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$35 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$36 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$37 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$38 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$39 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$40 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$41 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$42 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$43 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$44 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$45 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$46 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$47 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$48 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$49 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l34.  temp$1 := true;
  #l35. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l34,
      endLabel = l35,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 5,
      theOffset = 414),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 20,
      theOffset = 428),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Result := temp$1;
    #l38.  temp$2 := $Last(`Lbl_t::Proc_Id);
    #l39.  temp$3 := $First(`Lbl_t::Proc_Id);
    #l40.  if (temp$3 > temp$2) then goto l37;
    #l41.  I := temp$3;
    #l36. 
      #l44.  temp$4 := $Last(`Lbl_t::Proc_Id);
      #l45.  temp$5 := $First(`Lbl_t::Proc_Id);
      #l46.  if (temp$5 > temp$4) then goto l43;
      #l47.  J := temp$5;
      #l42. 
        #l50.  temp$6 := $Last(`Lbl_t::Proc_Id);
        #l51.  temp$7 := $First(`Lbl_t::Proc_Id);
        #l52.  if (temp$7 > temp$6) then goto l49;
        #l53.  K := temp$7;
        #l48. 
          #l56.  temp$8 := $Last(`Lbl_t::Proc_Id);
          #l57.  temp$9 := $First(`Lbl_t::Proc_Id);
          #l58.  if (temp$9 > temp$8) then goto l55;
          #l59.  L := temp$9;
          #l54. 
          #l60. temp$26 := false;
              #l61.  temp$10 := I;
              #l62.  temp$11 := K;
              #l63.  temp$12 := (temp$10 == temp$11);
              #l64.  temp$13 := J;
              #l65.  temp$14 := L;
              #l66.  temp$15 := (temp$13 == temp$14);
            #l67.  temp$16 := temp$12 && temp$15 ;
            #l68.  temp$17 := temp$16;
            #l69.  temp$18 := !(temp$17);
          #l77.  if (!temp$18) then goto l80;
            #l70.  temp$19 := I;
            #l71.  temp$20 := J;
            #l72.  temp$21 := Mmr::@@Pointers [temp$19] [temp$20];
            #l73.  temp$22 := K;
            #l74.  temp$23 := L;
            #l75.  temp$24 := Mmr::@@Pointers [temp$22] [temp$23];
            #l76.  temp$25 := (temp$21 == temp$24);
          #l78.  if (!temp$25) then goto l80;
          #l79. temp$26 := true;
          #l80.
          #l81.  temp$27 := temp$26;
          #l82.  if !(temp$27) then goto l83; 
          #l84.  temp$28 := false;
          #l85. <@AssignmentStatementAnnotation(
              mark = @Mark(
              startLabel = l84,
              endLabel = l85,
              optRS = @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 27,
              theCol = 15,
              theOffset = 1231),
              theEndCaret = 
              @Caret(
              theLine = 27,
              theCol = 31,
              theOffset = 1246),
              theOptionalSource = "mmr__x0.adb"
            )
            ),
              optSparkLabelList = @NONE 
          )>  Result := temp$28;
          #l86.  goto l87;
          #l83. 
          #l87. <@IfStatementAnnotation(
            ifPart = @Mark(
            startLabel = l60,
            endLabel = l82,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 25,
            theCol = 13,
            theOffset = 1125),
            theEndCaret = 
            @Caret(
            theLine = 26,
            theCol = 58,
            theOffset = 1210),
            theOptionalSource = "mmr__x0.adb"
          )
          ),
            thenPart= @MARK_PLACEHOLDER,
            optElsIfParts = @NONE,
            optElsePart = @NONE,
              mark = @Mark(
              startLabel = l60,
              endLabel = l87,
              optRS = @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 25,
              theCol = 13,
              theOffset = 1125),
              theEndCaret = 
              @Caret(
              theLine = 30,
              theCol = 20,
              theOffset = 1378),
              theOptionalSource = "mmr__x0.adb"
            )
            ),
              optSparkLabelList = @NONE  
          )> 
          #l88.  temp$29 := Result;
          #l89.  temp$30 := false;
          #l90.  temp$31 := (temp$29 == temp$30);
          #l91. <@ExitStatementAnnotation(
            hasWhen = true,
              mark = @Mark(
              startLabel = l88,
              endLabel = l91,
              optRS = @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 31,
              theCol = 6,
              theOffset = 1385),
              theEndCaret = 
              @Caret(
              theLine = 31,
              theCol = 31,
              theOffset = 1409),
              theOptionalSource = "mmr__x0.adb"
            )
            ),
              optSparkLabelList = @NONE
          )>  if temp$31 then goto l55;
          #l92.  temp$32 := (L == temp$8);
          #l93.  if temp$32 then goto l55;
          #l94.  temp$33 := L + 1;
          #l95.  L := temp$33;
          #l96.  goto l54;
          #l55. <@ForLoopStatementAnnotation(
            sparkIterVarID = L,
            pilarIterVarID = L,
            initPart = @Mark(
            startLabel = l56,
            endLabel = l59,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 24,
            theCol = 11,
            theOffset = 1037),
            theEndCaret = 
            @Caret(
            theLine = 24,
            theCol = 86,
            theOffset = 1111),
            theOptionalSource = "mmr__x0.adb"
          )
          ),
            isRev = false,
              optLoopId = @NONE,
              body = @MARK_PLACEHOLDER,
                mark = @Mark(
                startLabel = l56,
                endLabel = l55,
                optRS = @RegionSelection(
                theStartCaret = 
                @Caret(
                theLine = 24,
                theCol = 11,
                theOffset = 1037),
                theEndCaret = 
                @Caret(
                theLine = 32,
                theCol = 20,
                theOffset = 1429),
                theOptionalSource = "mmr__x0.adb"
              )
              ),
                optSparkLabelList = @NONE  
          )> 
        #l97.  temp$34 := Result;
        #l98.  temp$35 := false;
        #l99.  temp$36 := (temp$34 == temp$35);
        #l100. <@ExitStatementAnnotation(
          hasWhen = true,
            mark = @Mark(
            startLabel = l97,
            endLabel = l100,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 33,
            theCol = 4,
            theOffset = 1434),
            theEndCaret = 
            @Caret(
            theLine = 33,
            theCol = 29,
            theOffset = 1458),
            theOptionalSource = "mmr__x0.adb"
          )
          ),
            optSparkLabelList = @NONE
        )>  if temp$36 then goto l49;
        #l101.  temp$37 := (K == temp$6);
        #l102.  if temp$37 then goto l49;
        #l103.  temp$38 := K + 1;
        #l104.  K := temp$38;
        #l105.  goto l48;
        #l49. <@ForLoopStatementAnnotation(
          sparkIterVarID = K,
          pilarIterVarID = K,
          initPart = @Mark(
          startLabel = l50,
          endLabel = l53,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 23,
          theCol = 9,
          theOffset = 951),
          theEndCaret = 
          @Caret(
          theLine = 23,
          theCol = 84,
          theOffset = 1025),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          isRev = false,
            optLoopId = @NONE,
            body = @MARK_PLACEHOLDER,
              mark = @Mark(
              startLabel = l50,
              endLabel = l49,
              optRS = @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 23,
              theCol = 9,
              theOffset = 951),
              theEndCaret = 
              @Caret(
              theLine = 34,
              theCol = 18,
              theOffset = 1476),
              theOptionalSource = "mmr__x0.adb"
            )
            ),
              optSparkLabelList = @NONE  
        )> 
      #l106.  temp$39 := Result;
      #l107.  temp$40 := false;
      #l108.  temp$41 := (temp$39 == temp$40);
      #l109. <@ExitStatementAnnotation(
        hasWhen = true,
          mark = @Mark(
          startLabel = l106,
          endLabel = l109,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 35,
          theCol = 2,
          theOffset = 1479),
          theEndCaret = 
          @Caret(
          theLine = 35,
          theCol = 27,
          theOffset = 1503),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE
      )>  if temp$41 then goto l43;
      #l110.  temp$42 := (J == temp$4);
      #l111.  if temp$42 then goto l43;
      #l112.  temp$43 := J + 1;
      #l113.  J := temp$43;
      #l114.  goto l42;
      #l43. <@ForLoopStatementAnnotation(
        sparkIterVarID = J,
        pilarIterVarID = J,
        initPart = @Mark(
        startLabel = l44,
        endLabel = l47,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 21,
        theCol = 7,
        theOffset = 794),
        theEndCaret = 
        @Caret(
        theLine = 21,
        theCol = 82,
        theOffset = 868),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        isRev = false,
          optLoopId = @NONE,
          body = @MARK_PLACEHOLDER,
            mark = @Mark(
            startLabel = l44,
            endLabel = l43,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 21,
            theCol = 7,
            theOffset = 794),
            theEndCaret = 
            @Caret(
            theLine = 36,
            theCol = 16,
            theOffset = 1519),
            theOptionalSource = "mmr__x0.adb"
          )
          ),
            optSparkLabelList = @NONE  
      )> 
    #l115.  temp$44 := Result;
    #l116.  temp$45 := false;
    #l117.  temp$46 := (temp$44 == temp$45);
    #l118. <@ExitStatementAnnotation(
      hasWhen = true,
        mark = @Mark(
        startLabel = l115,
        endLabel = l118,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 37,
        theCol = 7,
        theOffset = 1527),
        theEndCaret = 
        @Caret(
        theLine = 37,
        theCol = 32,
        theOffset = 1551),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE
    )>  if temp$46 then goto l37;
    #l119.  temp$47 := (I == temp$2);
    #l120.  if temp$47 then goto l37;
    #l121.  temp$48 := I + 1;
    #l122.  I := temp$48;
    #l123.  goto l36;
    #l37. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l38,
      endLabel = l41,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 5,
      theOffset = 712),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 80,
      theOffset = 786),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l38,
          endLabel = l37,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 20,
          theCol = 5,
          theOffset = 712),
          theEndCaret = 
          @Caret(
          theLine = 38,
          theCol = 14,
          theOffset = 1565),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l124.  temp$49 := Result;
  #l125. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l124,
      endLabel = l125,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 5,
      theOffset = 1571),
      theEndCaret = 
      @Caret(
      theLine = 39,
      theCol = 19,
      theOffset = 1584),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$49;
}
procedure Standard::Boolean Invariant 
      (Mmr::Pointer_Matrix implicit__pointers @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 18,
  theCol = 19,
  theOffset = 628),
  theEndCaret = 
  @Caret(
  theLine = 18,
  theCol = 27,
  theOffset = 635),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(implicit__pointers)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 342),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 17,
      theOffset = 1601),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 342),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 17,
      theOffset = 1601),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 3,
      theOffset = 342),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 17,
      theOffset = 1601),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{ #locret. return;}
procedure Standard::Boolean OutBoxWellFormed 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 29,
  theOffset = 2068),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 30,
  theOffset = 2068),
  theOptionalSource = "mmr__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(P)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 2042),
      theEndCaret = 
      @Caret(
      theLine = 74,
      theCol = 24,
      theOffset = 2716),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 12,
      theOffset = 2051),
      theEndCaret = 
      @Caret(
      theLine = 50,
      theCol = 28,
      theOffset = 2066),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 2042),
      theEndCaret = 
      @Caret(
      theLine = 50,
      theCol = 64,
      theOffset = 2102),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 52,
      theCol = 5,
      theOffset = 2113),
      theEndCaret = 
      @Caret(
      theLine = 52,
      theCol = 11,
      theOffset = 2118),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Msg_t::Msg M @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 53,
      theCol = 5,
      theOffset = 2134),
      theEndCaret = 
      @Caret(
      theLine = 53,
      theCol = 6,
      theOffset = 2134),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Lbl_t::Proc_Id Dest @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 5,
      theOffset = 2153),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 9,
      theOffset = 2156),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Lbl_t::Proc_Id Origin @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 55,
      theCol = 5,
      theOffset = 2178),
      theEndCaret = 
      @Caret(
      theLine = 55,
      theCol = 11,
      theOffset = 2183),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l126.  temp$1 := true;
  #l127. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l126,
      endLabel = l127,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 57,
      theCol = 5,
      theOffset = 2213),
      theEndCaret = 
      @Caret(
      theLine = 57,
      theCol = 20,
      theOffset = 2227),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Result := temp$1;
    #l130.  temp$2 := $Last(`Lbl_t::Proc_Id);
    #l131.  temp$3 := $First(`Lbl_t::Proc_Id);
    #l132.  if (temp$3 > temp$2) then goto l129;
    #l133.  I := temp$3;
    #l128. 
    #l134.  temp$4 := P;
    #l135.  temp$5 := I;
    #l136.  temp$6 := Mmr::@@Pointers [temp$4] [temp$5];
    #l137.  call temp$7 := Memory::Read (temp$6);
    #l138. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l134,
        endLabel = l138,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 60,
        theCol = 7,
        theOffset = 2316),
        theEndCaret = 
        @Caret(
        theLine = 60,
        theCol = 40,
        theOffset = 2348),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  M := temp$7;
    #l139.  temp$8 := P;
    #l140.  temp$9 := I;
    #l141.  temp$10 := Mmr::@@Flags [temp$8] [temp$9];
    #l142.  if !(temp$10) then goto l143; 
    #l144.  temp$11 := M;
    #l145.  call temp$12 := Msg_t::Get_Dest (temp$11);
    #l146. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l144,
        endLabel = l146,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 62,
        theCol = 3,
        theOffset = 2378),
        theEndCaret = 
        @Caret(
        theLine = 62,
        theCol = 31,
        theOffset = 2405),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Dest := temp$12;
    #l147.  temp$13 := M;
    #l148.  call temp$14 := Msg_t::Get_Origin (temp$13);
    #l149. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l147,
        endLabel = l149,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 63,
        theCol = 10,
        theOffset = 2416),
        theEndCaret = 
        @Caret(
        theLine = 63,
        theCol = 40,
        theOffset = 2445),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Origin := temp$14;
    #l150. temp$21 := false;
      #l151.  temp$15 := Origin;
      #l152.  temp$16 := P;
      #l153.  temp$17 := (temp$15 == temp$16);
    #l157.  if (!temp$17) then goto l160;
      #l154.  temp$18 := Dest;
      #l155.  temp$19 := I;
      #l156.  temp$20 := (temp$18 == temp$19);
    #l158.  if (!temp$20) then goto l160;
    #l159. temp$21 := true;
    #l160.
    #l161.  temp$22 := temp$21;
    #l162.  temp$23 := !(temp$22);
    #l163.  if !(temp$23) then goto l164; 
    #l165.  temp$24 := false;
    #l166. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l165,
        endLabel = l166,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 65,
        theCol = 11,
        theOffset = 2512),
        theEndCaret = 
        @Caret(
        theLine = 65,
        theCol = 27,
        theOffset = 2527),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$24;
    #l167.  goto l168;
    #l164. 
    #l168. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l150,
      endLabel = l163,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 64,
      theCol = 9,
      theOffset = 2455),
      theEndCaret = 
      @Caret(
      theLine = 64,
      theCol = 50,
      theOffset = 2495),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l150,
        endLabel = l168,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 64,
        theCol = 9,
        theOffset = 2455),
        theEndCaret = 
        @Caret(
        theLine = 66,
        theCol = 16,
        theOffset = 2543),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l169.  goto l179;
    #l143. 
    #l170.  temp$25 := M;
    #l171.  call temp$26 := Msg_t::Is_Default_Message (temp$25);
    #l172.  temp$27 := !(temp$26);
    #l173.  if !(temp$27) then goto l174; 
    #l175.  temp$28 := false;
    #l176. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l175,
        endLabel = l176,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 69,
        theCol = 11,
        theOffset = 2614),
        theEndCaret = 
        @Caret(
        theLine = 69,
        theCol = 27,
        theOffset = 2629),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$28;
    #l177.  goto l178;
    #l174. 
    #l178. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l170,
      endLabel = l173,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 68,
      theCol = 9,
      theOffset = 2564),
      theEndCaret = 
      @Caret(
      theLine = 68,
      theCol = 43,
      theOffset = 2597),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l170,
        endLabel = l178,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 68,
        theCol = 9,
        theOffset = 2564),
        theEndCaret = 
        @Caret(
        theLine = 70,
        theCol = 16,
        theOffset = 2645),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l179. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l139,
      endLabel = l142,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 61,
      theCol = 7,
      theOffset = 2356),
      theEndCaret = 
      @Caret(
      theLine = 61,
      theCol = 21,
      theOffset = 2369),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l139,
        endLabel = l179,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 61,
        theCol = 7,
        theOffset = 2356),
        theEndCaret = 
        @Caret(
        theLine = 71,
        theCol = 14,
        theOffset = 2659),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l180.  temp$29 := (I == temp$2);
    #l181.  if temp$29 then goto l129;
    #l182.  temp$30 := I + 1;
    #l183.  I := temp$30;
    #l184.  goto l128;
    #l129. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l130,
      endLabel = l133,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 59,
      theCol = 5,
      theOffset = 2234),
      theEndCaret = 
      @Caret(
      theLine = 59,
      theCol = 80,
      theOffset = 2308),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l130,
          endLabel = l129,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 59,
          theCol = 5,
          theOffset = 2234),
          theEndCaret = 
          @Caret(
          theLine = 72,
          theCol = 14,
          theOffset = 2673),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l185.  temp$31 := Result;
  #l186. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l185,
      endLabel = l186,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 73,
      theCol = 5,
      theOffset = 2679),
      theEndCaret = 
      @Caret(
      theLine = 73,
      theCol = 19,
      theOffset = 2692),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$31;
}
procedure Standard::Boolean OutBoxWellFormed 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 50,
  theCol = 29,
  theOffset = 2068),
  theEndCaret = 
  @Caret(
  theLine = 50,
  theCol = 30,
  theOffset = 2068),
  theOptionalSource = "mmr__x0.adb"
),
       Mmr::Pointer_Matrix implicit__pointers @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 19,
  theOffset = 721),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 27,
  theOffset = 728),
  theOptionalSource = "mmr__x0.ads"
),
       Mmr::Flags_Matrix implicit__flags @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 29,
  theOffset = 731),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 34,
  theOffset = 735),
  theOptionalSource = "mmr__x0.ads"
),
       Memory::Mem_Space_T implicit__mem_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 36,
  theOffset = 738),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 52,
  theOffset = 753),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(P,
            implicit__pointers,
            implicit__flags,
            implicit__mem_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 2042),
      theEndCaret = 
      @Caret(
      theLine = 74,
      theCol = 24,
      theOffset = 2716),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 2042),
      theEndCaret = 
      @Caret(
      theLine = 74,
      theCol = 24,
      theOffset = 2716),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 50,
      theCol = 3,
      theOffset = 2042),
      theEndCaret = 
      @Caret(
      theLine = 74,
      theCol = 24,
      theOffset = 2716),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{ #locret. return;}
procedure Standard::Boolean InBoxWellFormed 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 84,
  theCol = 28,
  theOffset = 3180),
  theEndCaret = 
  @Caret(
  theLine = 84,
  theCol = 29,
  theOffset = 3180),
  theOptionalSource = "mmr__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(P)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 84,
      theCol = 3,
      theOffset = 3155),
      theEndCaret = 
      @Caret(
      theLine = 108,
      theCol = 23,
      theOffset = 3779),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 84,
      theCol = 12,
      theOffset = 3164),
      theEndCaret = 
      @Caret(
      theLine = 84,
      theCol = 27,
      theOffset = 3178),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 84,
      theCol = 3,
      theOffset = 3155),
      theEndCaret = 
      @Caret(
      theLine = 84,
      theCol = 63,
      theOffset = 3214),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 86,
      theCol = 5,
      theOffset = 3225),
      theEndCaret = 
      @Caret(
      theLine = 86,
      theCol = 11,
      theOffset = 3230),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Msg_t::Msg M @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 87,
      theCol = 5,
      theOffset = 3246),
      theEndCaret = 
      @Caret(
      theLine = 87,
      theCol = 6,
      theOffset = 3246),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Lbl_t::Proc_Id Dest @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 88,
      theCol = 5,
      theOffset = 3265),
      theEndCaret = 
      @Caret(
      theLine = 88,
      theCol = 9,
      theOffset = 3268),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Lbl_t::Proc_Id Origin @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 89,
      theCol = 5,
      theOffset = 3290),
      theEndCaret = 
      @Caret(
      theLine = 89,
      theCol = 11,
      theOffset = 3295),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l187.  temp$1 := true;
  #l188. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l187,
      endLabel = l188,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 91,
      theCol = 5,
      theOffset = 3325),
      theEndCaret = 
      @Caret(
      theLine = 91,
      theCol = 20,
      theOffset = 3339),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Result := temp$1;
    #l191.  temp$2 := $First(`Lbl_t::Proc_Id);
    #l192.  temp$3 := $Last(`Lbl_t::Proc_Id);
    #l193.  if (temp$2 > temp$3) then goto l190;
    #l194.  I := temp$2;
    #l189. 
    #l195.  temp$4 := P;
    #l196.  temp$5 := I;
    #l197.  temp$6 := Mmr::@@Pointers [temp$4] [temp$5];
    #l198.  call temp$7 := Memory::Read (temp$6);
    #l199. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l195,
        endLabel = l199,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 94,
        theCol = 7,
        theOffset = 3380),
        theEndCaret = 
        @Caret(
        theLine = 94,
        theCol = 40,
        theOffset = 3412),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  M := temp$7;
    #l200.  temp$8 := P;
    #l201.  temp$9 := I;
    #l202.  temp$10 := Mmr::@@Flags [temp$8] [temp$9];
    #l203.  if !(temp$10) then goto l204; 
    #l205.  temp$11 := M;
    #l206.  call temp$12 := Msg_t::Get_Dest (temp$11);
    #l207. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l205,
        endLabel = l207,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 96,
        theCol = 3,
        theOffset = 3442),
        theEndCaret = 
        @Caret(
        theLine = 96,
        theCol = 31,
        theOffset = 3469),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Dest := temp$12;
    #l208.  temp$13 := M;
    #l209.  call temp$14 := Msg_t::Get_Origin (temp$13);
    #l210. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l208,
        endLabel = l210,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 97,
        theCol = 10,
        theOffset = 3480),
        theEndCaret = 
        @Caret(
        theLine = 97,
        theCol = 40,
        theOffset = 3509),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Origin := temp$14;
    #l211. temp$21 := false;
      #l212.  temp$15 := Origin;
      #l213.  temp$16 := I;
      #l214.  temp$17 := (temp$15 == temp$16);
    #l218.  if (!temp$17) then goto l221;
      #l215.  temp$18 := Dest;
      #l216.  temp$19 := P;
      #l217.  temp$20 := (temp$18 == temp$19);
    #l219.  if (!temp$20) then goto l221;
    #l220. temp$21 := true;
    #l221.
    #l222.  temp$22 := temp$21;
    #l223.  temp$23 := !(temp$22);
    #l224.  if !(temp$23) then goto l225; 
    #l226.  temp$24 := false;
    #l227. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l226,
        endLabel = l227,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 99,
        theCol = 11,
        theOffset = 3576),
        theEndCaret = 
        @Caret(
        theLine = 99,
        theCol = 27,
        theOffset = 3591),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$24;
    #l228.  goto l229;
    #l225. 
    #l229. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l211,
      endLabel = l224,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 98,
      theCol = 9,
      theOffset = 3519),
      theEndCaret = 
      @Caret(
      theLine = 98,
      theCol = 50,
      theOffset = 3559),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l211,
        endLabel = l229,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 98,
        theCol = 9,
        theOffset = 3519),
        theEndCaret = 
        @Caret(
        theLine = 100,
        theCol = 16,
        theOffset = 3607),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l230.  goto l240;
    #l204. 
    #l231.  temp$25 := M;
    #l232.  call temp$26 := Msg_t::Is_Default_Message (temp$25);
    #l233.  temp$27 := !(temp$26);
    #l234.  if !(temp$27) then goto l235; 
    #l236.  temp$28 := false;
    #l237. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l236,
        endLabel = l237,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 103,
        theCol = 11,
        theOffset = 3678),
        theEndCaret = 
        @Caret(
        theLine = 103,
        theCol = 27,
        theOffset = 3693),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$28;
    #l238.  goto l239;
    #l235. 
    #l239. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l231,
      endLabel = l234,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 102,
      theCol = 9,
      theOffset = 3628),
      theEndCaret = 
      @Caret(
      theLine = 102,
      theCol = 43,
      theOffset = 3661),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l231,
        endLabel = l239,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 102,
        theCol = 9,
        theOffset = 3628),
        theEndCaret = 
        @Caret(
        theLine = 104,
        theCol = 16,
        theOffset = 3709),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l240. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l200,
      endLabel = l203,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 95,
      theCol = 7,
      theOffset = 3420),
      theEndCaret = 
      @Caret(
      theLine = 95,
      theCol = 21,
      theOffset = 3433),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l200,
        endLabel = l240,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 95,
        theCol = 7,
        theOffset = 3420),
        theEndCaret = 
        @Caret(
        theLine = 105,
        theCol = 14,
        theOffset = 3723),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l241.  temp$29 := (I == temp$3);
    #l242.  if temp$29 then goto l190;
    #l243.  temp$30 := I + 1;
    #l244.  I := temp$30;
    #l245.  goto l189;
    #l190. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l191,
      endLabel = l194,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 93,
      theCol = 5,
      theOffset = 3346),
      theEndCaret = 
      @Caret(
      theLine = 93,
      theCol = 32,
      theOffset = 3372),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l191,
          endLabel = l190,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 93,
          theCol = 5,
          theOffset = 3346),
          theEndCaret = 
          @Caret(
          theLine = 106,
          theCol = 14,
          theOffset = 3737),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l246.  temp$31 := Result;
  #l247. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l246,
      endLabel = l247,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 107,
      theCol = 5,
      theOffset = 3743),
      theEndCaret = 
      @Caret(
      theLine = 107,
      theCol = 19,
      theOffset = 3756),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$31;
}
procedure Standard::Boolean InBoxWellFormed 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 84,
  theCol = 28,
  theOffset = 3180),
  theEndCaret = 
  @Caret(
  theLine = 84,
  theCol = 29,
  theOffset = 3180),
  theOptionalSource = "mmr__x0.adb"
),
       Mmr::Pointer_Matrix implicit__pointers @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 24,
  theCol = 19,
  theOffset = 839),
  theEndCaret = 
  @Caret(
  theLine = 24,
  theCol = 27,
  theOffset = 846),
  theOptionalSource = "mmr__x0.ads"
),
       Mmr::Flags_Matrix implicit__flags @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 24,
  theCol = 29,
  theOffset = 849),
  theEndCaret = 
  @Caret(
  theLine = 24,
  theCol = 34,
  theOffset = 853),
  theOptionalSource = "mmr__x0.ads"
),
       Memory::Mem_Space_T implicit__mem_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 24,
  theCol = 36,
  theOffset = 856),
  theEndCaret = 
  @Caret(
  theLine = 24,
  theCol = 52,
  theOffset = 871),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(P,
            implicit__pointers,
            implicit__flags,
            implicit__mem_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 84,
      theCol = 3,
      theOffset = 3155),
      theEndCaret = 
      @Caret(
      theLine = 108,
      theCol = 23,
      theOffset = 3779),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 84,
      theCol = 3,
      theOffset = 3155),
      theEndCaret = 
      @Caret(
      theLine = 108,
      theCol = 23,
      theOffset = 3779),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 84,
      theCol = 3,
      theOffset = 3155),
      theEndCaret = 
      @Caret(
      theLine = 108,
      theCol = 23,
      theOffset = 3779),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{ #locret. return;}
procedure Fill_Mem_Row 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 119,
  theCol = 26,
  theOffset = 4305),
  theEndCaret = 
  @Caret(
  theLine = 119,
  theCol = 27,
  theOffset = 4305),
  theOptionalSource = "mmr__x0.adb"
),
       Mem_t::Mem_Row M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 119,
  theCol = 47,
  theOffset = 4326),
  theEndCaret = 
  @Caret(
  theLine = 119,
  theCol = 48,
  theOffset = 4326),
  theOptionalSource = "mmr__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(P),
      theOptionalOutParameters = @List(M)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Flags,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 120,
              theCol = 19,
              theOffset = 4366),
              theEndCaret = 
              @Caret(
              theLine = 120,
              theCol = 24,
              theOffset = 4370),
              theOptionalSource = "mmr__x0.adb"
            )
        ),
              @AnnotationVariable(
          id = Mmr::@@Pointers,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 121,
              theCol = 19,
              theOffset = 4391),
              theEndCaret = 
              @Caret(
              theLine = 121,
              theCol = 27,
              theOffset = 4398),
              theOptionalSource = "mmr__x0.adb"
            )
        ),
              @AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 122,
              theCol = 19,
              theOffset = 4419),
              theEndCaret = 
              @Caret(
              theLine = 122,
              theCol = 35,
              theOffset = 4434),
              theOptionalSource = "mmr__x0.adb"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 120,
          theCol = 9,
          theOffset = 4356),
          theEndCaret = 
          @Caret(
          theLine = 122,
          theCol = 36,
          theOffset = 4435),
          theOptionalSource = "mmr__x0.adb"
        ),
      theOptionalInGlobals = @List(Mmr::@@Flags,
            Mmr::@@Pointers,
            Memory::@@Mem_Space),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $FOR_ALL {Lbl_t::Proc_Id I$2 => 
          switch I$2
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => $AND((Mmr::@@Flags [P] [I$2] ==> (M [I$2] == Memory::@@Mem_Space [Mmr::@@Pointers [P] [I$2]])),(!(Mmr::@@Flags [P] [I$2]) ==> (M [I$2] == Msg_t::$Const.Def_Msg)))
            | => true},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 128,
          theCol = 9,
          theOffset = 4618),
          theEndCaret = 
          @Caret(
          theLine = 130,
          theCol = 63,
          theOffset = 4789),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = M,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 123,
                          theCol = 17,
                          theOffset = 4453),
                          theEndCaret = 
                          @Caret(
                          theLine = 123,
                          theCol = 18,
                          theOffset = 4453),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = P,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 123,
                          theCol = 24,
                          theOffset = 4460),
                          theEndCaret = 
                          @Caret(
                          theLine = 123,
                          theCol = 25,
                          theOffset = 4460),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                          @AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 124,
                          theCol = 24,
                          theOffset = 4486),
                          theEndCaret = 
                          @Caret(
                          theLine = 124,
                          theCol = 29,
                          theOffset = 4490),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                          @AnnotationVariable(
                      id = Mmr::@@Pointers,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 125,
                          theCol = 24,
                          theOffset = 4516),
                          theEndCaret = 
                          @Caret(
                          theLine = 125,
                          theCol = 32,
                          theOffset = 4523),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                          @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 126,
                          theCol = 24,
                          theOffset = 4549),
                          theEndCaret = 
                          @Caret(
                          theLine = 126,
                          theCol = 40,
                          theOffset = 4564),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 123,
                  theCol = 17,
                  theOffset = 4453),
                  theEndCaret = 
                  @Caret(
                  theLine = 126,
                  theCol = 40,
                  theOffset = 4564),
                  theOptionalSource = "mmr__x0.adb"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 123,
              theCol = 9,
              theOffset = 4445),
              theEndCaret = 
              @Caret(
              theLine = 126,
              theCol = 41,
              theOffset = 4565),
              theOptionalSource = "mmr__x0.adb"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 119,
      theCol = 3,
      theOffset = 4282),
      theEndCaret = 
      @Caret(
      theLine = 144,
      theCol = 20,
      theOffset = 5364),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 119,
      theCol = 13,
      theOffset = 4292),
      theEndCaret = 
      @Caret(
      theLine = 119,
      theCol = 25,
      theOffset = 4303),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 119,
      theCol = 3,
      theOffset = 4282),
      theEndCaret = 
      @Caret(
      theLine = 119,
      theCol = 68,
      theOffset = 4346),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l248. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l248,
      endLabel = l248,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 135,
      theCol = 5,
      theOffset = 4936),
      theEndCaret = 
      @Caret(
      theLine = 135,
      theCol = 50,
      theOffset = 4980),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  M := `Mem_t::Mem_Row (
     
    {
      Lbl_t::Proc_Id iter0 => 
        switch iter0 
    | => (Msg_t::$Const.Def_Msg)
    }
  );
    #l251.  temp$2 := $Last(`Lbl_t::Proc_Id);
    #l252.  temp$3 := $First(`Lbl_t::Proc_Id);
    #l253.  if (temp$3 > temp$2) then goto l250;
    #l254.  I := temp$3;
    #l249. 
    #l255.  temp$4 := P;
    #l256.  temp$5 := I;
    #l257.  temp$6 := Mmr::@@Flags [temp$4] [temp$5];
    #l258.  temp$7 := true;
    #l259.  temp$8 := (temp$6 == temp$7);
    #l260.  if !(temp$8) then goto l261; 
    #l262.  temp$9 := I;
    #l263.  temp$10 := P;
    #l264.  temp$11 := I;
    #l265.  temp$12 := Mmr::@@Pointers [temp$10] [temp$11];
    #l266.  call temp$13 := Memory::Read (temp$12);
    #l267. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l262,
        endLabel = l267,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 141,
        theCol = 9,
        theOffset = 5281),
        theEndCaret = 
        @Caret(
        theLine = 141,
        theCol = 45,
        theOffset = 5316),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  M [temp$9] := temp$13;
    #l268.  goto l269;
    #l261. 
    #l269. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l255,
      endLabel = l260,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 138,
      theCol = 7,
      theOffset = 5113),
      theEndCaret = 
      @Caret(
      theLine = 138,
      theCol = 28,
      theOffset = 5133),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l255,
        endLabel = l269,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 138,
        theCol = 7,
        theOffset = 5113),
        theEndCaret = 
        @Caret(
        theLine = 142,
        theCol = 14,
        theOffset = 5330),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l270.  temp$14 := (I == temp$2);
    #l271.  if temp$14 then goto l250;
    #l272.  temp$15 := I + 1;
    #l273.  I := temp$15;
    #l274.  goto l249;
    #l250. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l251,
      endLabel = l254,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 137,
      theCol = 5,
      theOffset = 5031),
      theEndCaret = 
      @Caret(
      theLine = 137,
      theCol = 80,
      theOffset = 5105),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l251,
          endLabel = l250,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 137,
          theCol = 5,
          theOffset = 5031),
          theEndCaret = 
          @Caret(
          theLine = 143,
          theCol = 14,
          theOffset = 5344),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l275.  return;
}
procedure Zero_Flags 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 152,
  theCol = 24,
  theOffset = 5617),
  theEndCaret = 
  @Caret(
  theLine = 152,
  theCol = 25,
  theOffset = 5617),
  theOptionalSource = "mmr__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(P),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Flags,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 153,
              theCol = 23,
              theOffset = 5660),
              theEndCaret = 
              @Caret(
              theLine = 153,
              theCol = 28,
              theOffset = 5664),
              theOptionalSource = "mmr__x0.adb"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 153,
          theCol = 9,
          theOffset = 5646),
          theEndCaret = 
          @Caret(
          theLine = 153,
          theCol = 29,
          theOffset = 5665),
          theOptionalSource = "mmr__x0.adb"
        ),
      theOptionalInGlobals = @List(Mmr::@@Flags),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $FOR_ALL {Lbl_t::Proc_Id Q => 
          switch Q
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => $FOR_ALL {Lbl_t::Proc_Id I$2 => 
          switch I$2
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => (((Q == P) ==> !(Mmr::@@Flags [Q] [I$2])) && ((Q != P) ==> (Mmr::@@Flags [Q] [I$2] == ($OLD(Mmr::@@Flags)) [Q] [I$2])))
            | => true}
            | => true},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 157,
          theCol = 9,
          theOffset = 5782),
          theEndCaret = 
          @Caret(
          theLine = 160,
          theCol = 66,
          theOffset = 5968),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
      theOptionalOutGlobals = @List(Mmr::@@Flags),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 154,
                          theCol = 17,
                          theOffset = 5683),
                          theEndCaret = 
                          @Caret(
                          theLine = 154,
                          theCol = 22,
                          theOffset = 5687),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 154,
                          theCol = 28,
                          theOffset = 5694),
                          theEndCaret = 
                          @Caret(
                          theLine = 154,
                          theCol = 33,
                          theOffset = 5698),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                          @AnnotationVariable(
                      id = P,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 155,
                          theCol = 28,
                          theOffset = 5728),
                          theEndCaret = 
                          @Caret(
                          theLine = 155,
                          theCol = 29,
                          theOffset = 5728),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 154,
                  theCol = 17,
                  theOffset = 5683),
                  theEndCaret = 
                  @Caret(
                  theLine = 155,
                  theCol = 29,
                  theOffset = 5728),
                  theOptionalSource = "mmr__x0.adb"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 154,
              theCol = 9,
              theOffset = 5675),
              theEndCaret = 
              @Caret(
              theLine = 155,
              theCol = 30,
              theOffset = 5729),
              theOptionalSource = "mmr__x0.adb"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 152,
      theCol = 3,
      theOffset = 5596),
      theEndCaret = 
      @Caret(
      theLine = 166,
      theCol = 18,
      theOffset = 6073),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 152,
      theCol = 13,
      theOffset = 5606),
      theEndCaret = 
      @Caret(
      theLine = 152,
      theCol = 23,
      theOffset = 5615),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 152,
      theCol = 3,
      theOffset = 5596),
      theEndCaret = 
      @Caret(
      theLine = 152,
      theCol = 44,
      theOffset = 5636),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l278.  temp$1 := $First(`Lbl_t::Proc_Id);
    #l279.  temp$2 := $Last(`Lbl_t::Proc_Id);
    #l280.  if (temp$1 > temp$2) then goto l277;
    #l281.  I := temp$1;
    #l276. 
    #l282.  temp$3 := P;
    #l283.  temp$4 := I;
    #l284.  temp$5 := false;
    #l285. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l282,
        endLabel = l285,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 164,
        theCol = 7,
        theOffset = 6021),
        theEndCaret = 
        @Caret(
        theLine = 164,
        theCol = 28,
        theOffset = 6041),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Mmr::@@Flags [temp$3] [temp$4] := temp$5;
    #l286.  temp$6 := (I == temp$2);
    #l287.  if temp$6 then goto l277;
    #l288.  temp$7 := I + 1;
    #l289.  I := temp$7;
    #l290.  goto l276;
    #l277. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l278,
      endLabel = l281,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 163,
      theCol = 5,
      theOffset = 5987),
      theEndCaret = 
      @Caret(
      theLine = 163,
      theCol = 32,
      theOffset = 6013),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l278,
          endLabel = l277,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 163,
          theCol = 5,
          theOffset = 5987),
          theEndCaret = 
          @Caret(
          theLine = 165,
          theCol = 14,
          theOffset = 6055),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l291.  return;
}
procedure Zero_Mem_Row 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 175,
  theCol = 26,
  theOffset = 6435),
  theEndCaret = 
  @Caret(
  theLine = 175,
  theCol = 27,
  theOffset = 6435),
  theOptionalSource = "mmr__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(P),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = Mmr::Invariant (Mmr::@@Pointers),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 182,
          theCol = 9,
          theOffset = 6738),
          theEndCaret = 
          @Caret(
          theLine = 182,
          theCol = 33,
          theOffset = 6761),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Pointers,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 176,
              theCol = 23,
              theOffset = 6478),
              theEndCaret = 
              @Caret(
              theLine = 176,
              theCol = 31,
              theOffset = 6485),
              theOptionalSource = "mmr__x0.adb"
            )
        ),
              @AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 177,
              theCol = 23,
              theOffset = 6510),
              theEndCaret = 
              @Caret(
              theLine = 177,
              theCol = 39,
              theOffset = 6525),
              theOptionalSource = "mmr__x0.adb"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 176,
          theCol = 9,
          theOffset = 6464),
          theEndCaret = 
          @Caret(
          theLine = 177,
          theCol = 40,
          theOffset = 6526),
          theOptionalSource = "mmr__x0.adb"
        ),
      theOptionalInGlobals = @List(Mmr::@@Pointers,
            Memory::@@Mem_Space),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $FOR_ALL {Lbl_t::Proc_Id Q => 
          switch Q
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => $FOR_ALL {Lbl_t::Proc_Id I$2 => 
          switch I$2
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => $AND(((Q == P) ==> (Memory::@@Mem_Space [Mmr::@@Pointers [Q] [I$2]] == Msg_t::$Const.Def_Msg)),((Q != P) ==> (Memory::@@Mem_Space [Mmr::@@Pointers [Q] [I$2]] == ($OLD(Memory::@@Mem_Space)) [Mmr::@@Pointers [Q] [I$2]])))
            | => true}
            | => true},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 184,
          theCol = 9,
          theOffset = 6820),
          theEndCaret = 
          @Caret(
          theLine = 187,
          theCol = 101,
          theOffset = 7076),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
      theOptionalOutGlobals = @List(Memory::@@Mem_Space),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 178,
                          theCol = 17,
                          theOffset = 6544),
                          theEndCaret = 
                          @Caret(
                          theLine = 178,
                          theCol = 33,
                          theOffset = 6559),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 178,
                          theCol = 39,
                          theOffset = 6566),
                          theEndCaret = 
                          @Caret(
                          theLine = 178,
                          theCol = 55,
                          theOffset = 6581),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                          @AnnotationVariable(
                      id = Mmr::@@Pointers,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 179,
                          theCol = 39,
                          theOffset = 6622),
                          theEndCaret = 
                          @Caret(
                          theLine = 179,
                          theCol = 47,
                          theOffset = 6629),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ),
                          @AnnotationVariable(
                      id = P,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 180,
                          theCol = 39,
                          theOffset = 6670),
                          theEndCaret = 
                          @Caret(
                          theLine = 180,
                          theCol = 40,
                          theOffset = 6670),
                          theOptionalSource = "mmr__x0.adb"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 178,
                  theCol = 17,
                  theOffset = 6544),
                  theEndCaret = 
                  @Caret(
                  theLine = 180,
                  theCol = 40,
                  theOffset = 6670),
                  theOptionalSource = "mmr__x0.adb"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 178,
              theCol = 9,
              theOffset = 6536),
              theEndCaret = 
              @Caret(
              theLine = 180,
              theCol = 41,
              theOffset = 6671),
              theOptionalSource = "mmr__x0.adb"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 175,
      theCol = 3,
      theOffset = 6412),
      theEndCaret = 
      @Caret(
      theLine = 193,
      theCol = 20,
      theOffset = 7254),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 175,
      theCol = 13,
      theOffset = 6422),
      theEndCaret = 
      @Caret(
      theLine = 175,
      theCol = 25,
      theOffset = 6433),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 175,
      theCol = 3,
      theOffset = 6412),
      theEndCaret = 
      @Caret(
      theLine = 175,
      theCol = 46,
      theOffset = 6454),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l294.  temp$1 := $Last(`Lbl_t::Proc_Id);
    #l295.  temp$2 := $First(`Lbl_t::Proc_Id);
    #l296.  if (temp$2 > temp$1) then goto l293;
    #l297.  I := temp$2;
    #l292. 
    #l298.  temp$3 := Msg_t::$Const.Def_Msg;
    #l299.  temp$4 := P;
    #l300.  temp$5 := I;
    #l301.  temp$6 := Mmr::@@Pointers [temp$4] [temp$5];
    #l302. <@ProcedureCallStatementAnnotation(
      optCopyBackPart = @NONE,
        mark = @Mark(
        startLabel = l298,
        endLabel = l302,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 191,
        theCol = 7,
        theOffset = 7177),
        theEndCaret = 
        @Caret(
        theLine = 191,
        theCol = 51,
        theOffset = 7220),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        optSparkLabelList = @NONE
    )>  call  Memory::Write (temp$3, temp$6);
    #l303.  temp$7 := (I == temp$1);
    #l304.  if temp$7 then goto l293;
    #l305.  temp$8 := I + 1;
    #l306.  I := temp$8;
    #l307.  goto l292;
    #l293. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l294,
      endLabel = l297,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 190,
      theCol = 5,
      theOffset = 7095),
      theEndCaret = 
      @Caret(
      theLine = 190,
      theCol = 80,
      theOffset = 7169),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l294,
          endLabel = l293,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 190,
          theCol = 5,
          theOffset = 7095),
          theEndCaret = 
          @Caret(
          theLine = 192,
          theCol = 14,
          theOffset = 7234),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l308.  return;
}
procedure Route
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @NONE,
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 196,
      theCol = 3,
      theOffset = 7282),
      theEndCaret = 
      @Caret(
      theLine = 306,
      theCol = 13,
      theOffset = 11973),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 196,
      theCol = 13,
      theOffset = 7292),
      theEndCaret = 
      @Caret(
      theLine = 196,
      theCol = 18,
      theOffset = 7296),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 196,
      theCol = 3,
      theOffset = 7282),
      theEndCaret = 
      @Caret(
      theLine = 196,
      theCol = 18,
      theOffset = 7296),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Lbl_t::Pointer T @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 198,
      theCol = 6,
      theOffset = 7308),
      theEndCaret = 
      @Caret(
      theLine = 198,
      theCol = 7,
      theOffset = 7308),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Standard::Boolean B @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 199,
      theCol = 6,
      theOffset = 7331),
      theEndCaret = 
      @Caret(
      theLine = 199,
      theCol = 7,
      theOffset = 7331),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Lbl_t::Proc_Id I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id J @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$32 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$33 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$34 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$35 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$36 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$37 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$38 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$39 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$40 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$41 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$42 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$43 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$44 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$45 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$46 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$47 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$48 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$49 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$50 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$51 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$52 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$53 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$54 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$55 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$56 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$57 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$58 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$59 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$60 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l311.  temp$1 := $First(`Lbl_t::Proc_Id);
    #l312.  temp$2 := $Last(`Lbl_t::Proc_Id);
    #l313.  if (temp$1 > temp$2) then goto l310;
    #l314.  I := temp$1;
    #l309. 
      #l317.  temp$3 := $Last(`Lbl_t::Proc_Id);
      #l318.  temp$4 := I;
      #l319.  if (temp$4 > temp$3) then goto l316;
      #l320.  J := temp$4;
      #l315. 
      #l321.  temp$5 := I;
      #l322.  temp$6 := J;
      #l323.  call temp$7 := Policy::Is_Allowed (temp$5, temp$6);
      #l324.  temp$8 := !(temp$7);
      #l325.  if !(temp$8) then goto l326; 
      #l327.  temp$9 := Msg_t::$Const.Def_Msg;
      #l328.  temp$10 := I;
      #l329.  temp$11 := J;
      #l330.  temp$12 := Mmr::@@Pointers [temp$10] [temp$11];
      #l331. <@ProcedureCallStatementAnnotation(
        optCopyBackPart = @NONE,
          mark = @Mark(
          startLabel = l327,
          endLabel = l331,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 204,
          theCol = 19,
          theOffset = 7520),
          theEndCaret = 
          @Caret(
          theLine = 204,
          theCol = 63,
          theOffset = 7563),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE
      )>  call  Memory::Write (temp$9, temp$12);
      #l332.  temp$13 := I;
      #l333.  temp$14 := J;
      #l334.  temp$15 := false;
      #l335. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l332,
          endLabel = l335,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 205,
          theCol = 19,
          theOffset = 7583),
          theEndCaret = 
          @Caret(
          theLine = 205,
          theCol = 40,
          theOffset = 7603),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Mmr::@@Flags [temp$13] [temp$14] := temp$15;
      #l336.  goto l337;
      #l326. 
      #l337. <@IfStatementAnnotation(
        ifPart = @Mark(
        startLabel = l321,
        endLabel = l325,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 203,
        theCol = 16,
        theOffset = 7467),
        theEndCaret = 
        @Caret(
        theLine = 203,
        theCol = 45,
        theOffset = 7495),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        thenPart= @MARK_PLACEHOLDER,
        optElsIfParts = @NONE,
        optElsePart = @NONE,
          mark = @Mark(
          startLabel = l321,
          endLabel = l337,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 203,
          theCol = 16,
          theOffset = 7467),
          theEndCaret = 
          @Caret(
          theLine = 206,
          theCol = 23,
          theOffset = 7626),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
      )> 
      #l338.  temp$16 := J;
      #l339.  temp$17 := I;
      #l340.  call temp$18 := Policy::Is_Allowed (temp$16, temp$17);
      #l341.  temp$19 := !(temp$18);
      #l342.  if !(temp$19) then goto l343; 
      #l344.  temp$20 := Msg_t::$Const.Def_Msg;
      #l345.  temp$21 := J;
      #l346.  temp$22 := I;
      #l347.  temp$23 := Mmr::@@Pointers [temp$21] [temp$22];
      #l348. <@ProcedureCallStatementAnnotation(
        optCopyBackPart = @NONE,
          mark = @Mark(
          startLabel = l344,
          endLabel = l348,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 209,
          theCol = 19,
          theOffset = 7697),
          theEndCaret = 
          @Caret(
          theLine = 209,
          theCol = 63,
          theOffset = 7740),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE
      )>  call  Memory::Write (temp$20, temp$23);
      #l349.  temp$24 := J;
      #l350.  temp$25 := I;
      #l351.  temp$26 := false;
      #l352. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l349,
          endLabel = l352,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 210,
          theCol = 19,
          theOffset = 7760),
          theEndCaret = 
          @Caret(
          theLine = 210,
          theCol = 40,
          theOffset = 7780),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Mmr::@@Flags [temp$24] [temp$25] := temp$26;
      #l353.  goto l354;
      #l343. 
      #l354. <@IfStatementAnnotation(
        ifPart = @Mark(
        startLabel = l338,
        endLabel = l342,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 208,
        theCol = 16,
        theOffset = 7644),
        theEndCaret = 
        @Caret(
        theLine = 208,
        theCol = 45,
        theOffset = 7672),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        thenPart= @MARK_PLACEHOLDER,
        optElsIfParts = @NONE,
        optElsePart = @NONE,
          mark = @Mark(
          startLabel = l338,
          endLabel = l354,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 208,
          theCol = 16,
          theOffset = 7644),
          theEndCaret = 
          @Caret(
          theLine = 211,
          theCol = 23,
          theOffset = 7803),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
      )> 
        #l355.  temp$27 := I;
        #l356.  temp$28 := J;
        #l357.  temp$29 := Mmr::@@Flags [temp$27] [temp$28];
        #l358.  temp$30 := J;
        #l359.  temp$31 := I;
        #l360.  temp$32 := Mmr::@@Flags [temp$30] [temp$31];
      #l361.  temp$33 := temp$29 || temp$32 ;
      #l362.  temp$34 := temp$33;
      #l363.  if !(temp$34) then goto l364; 
      #l365.  temp$35 := I;
      #l366.  temp$36 := J;
      #l367.  temp$37 := Mmr::@@Pointers [temp$35] [temp$36];
      #l368. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l365,
          endLabel = l368,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 216,
          theCol = 19,
          theOffset = 8042),
          theEndCaret = 
          @Caret(
          theLine = 216,
          theCol = 39,
          theOffset = 8061),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  T := temp$37;
      #l369.  temp$38 := I;
      #l370.  temp$39 := J;
      #l371.  temp$40 := Mmr::@@Flags [temp$38] [temp$39];
      #l372. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l369,
          endLabel = l372,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 217,
          theCol = 5,
          theOffset = 8067),
          theEndCaret = 
          @Caret(
          theLine = 217,
          theCol = 22,
          theOffset = 8083),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  B := temp$40;
      #l373.  temp$41 := I;
      #l374.  temp$42 := J;
      #l375.  temp$43 := J;
      #l376.  temp$44 := I;
      #l377.  temp$45 := Mmr::@@Pointers [temp$43] [temp$44];
      #l378. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l373,
          endLabel = l378,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 218,
          theCol = 19,
          theOffset = 8103),
          theEndCaret = 
          @Caret(
          theLine = 218,
          theCol = 52,
          theOffset = 8135),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Mmr::@@Pointers [temp$41] [temp$42] := temp$45;
      #l379.  temp$46 := I;
      #l380.  temp$47 := J;
      #l381.  temp$48 := J;
      #l382.  temp$49 := I;
      #l383.  temp$50 := Mmr::@@Flags [temp$48] [temp$49];
      #l384. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l379,
          endLabel = l384,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 219,
          theCol = 5,
          theOffset = 8141),
          theEndCaret = 
          @Caret(
          theLine = 219,
          theCol = 32,
          theOffset = 8167),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Mmr::@@Flags [temp$46] [temp$47] := temp$50;
      #l385.  temp$51 := J;
      #l386.  temp$52 := I;
      #l387.  temp$53 := T;
      #l388. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l385,
          endLabel = l388,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 220,
          theCol = 19,
          theOffset = 8187),
          theEndCaret = 
          @Caret(
          theLine = 220,
          theCol = 39,
          theOffset = 8206),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Mmr::@@Pointers [temp$51] [temp$52] := temp$53;
      #l389.  temp$54 := J;
      #l390.  temp$55 := I;
      #l391.  temp$56 := B;
      #l392. <@AssignmentStatementAnnotation(
          mark = @Mark(
          startLabel = l389,
          endLabel = l392,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 221,
          theCol = 5,
          theOffset = 8212),
          theEndCaret = 
          @Caret(
          theLine = 221,
          theCol = 22,
          theOffset = 8228),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE 
      )>  Mmr::@@Flags [temp$54] [temp$55] := temp$56;
      #l393.  goto l394;
      #l364. 
      #l394. <@IfStatementAnnotation(
        ifPart = @Mark(
        startLabel = l355,
        endLabel = l363,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 215,
        theCol = 16,
        theOffset = 7989),
        theEndCaret = 
        @Caret(
        theLine = 215,
        theCol = 45,
        theOffset = 8017),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        thenPart= @MARK_PLACEHOLDER,
        optElsIfParts = @NONE,
        optElsePart = @NONE,
          mark = @Mark(
          startLabel = l355,
          endLabel = l394,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 215,
          theCol = 16,
          theOffset = 7989),
          theEndCaret = 
          @Caret(
          theLine = 222,
          theCol = 23,
          theOffset = 8251),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
      )> 
      #l395.  temp$57 := (J == temp$3);
      #l396.  if temp$57 then goto l316;
      #l397.  temp$58 := J + 1;
      #l398.  J := temp$58;
      #l399.  goto l315;
      #l316. <@ForLoopStatementAnnotation(
        sparkIterVarID = J,
        pilarIterVarID = J,
        initPart = @Mark(
        startLabel = l317,
        endLabel = l320,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 202,
        theCol = 10,
        theOffset = 7394),
        theEndCaret = 
        @Caret(
        theLine = 202,
        theCol = 67,
        theOffset = 7450),
        theOptionalSource = "mmr__x0.adb"
      )
      ),
        isRev = false,
          optLoopId = @NONE,
          body = @MARK_PLACEHOLDER,
            mark = @Mark(
            startLabel = l317,
            endLabel = l316,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 202,
            theCol = 10,
            theOffset = 7394),
            theEndCaret = 
            @Caret(
            theLine = 223,
            theCol = 19,
            theOffset = 8270),
            theOptionalSource = "mmr__x0.adb"
          )
          ),
            optSparkLabelList = @NONE  
      )> 
    #l400.  temp$59 := (I == temp$2);
    #l401.  if temp$59 then goto l310;
    #l402.  temp$60 := I + 1;
    #l403.  I := temp$60;
    #l404.  goto l309;
    #l310. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l311,
      endLabel = l314,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 201,
      theCol = 7,
      theOffset = 7357),
      theEndCaret = 
      @Caret(
      theLine = 201,
      theCol = 34,
      theOffset = 7383),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l311,
          endLabel = l310,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 201,
          theCol = 7,
          theOffset = 7357),
          theEndCaret = 
          @Caret(
          theLine = 224,
          theCol = 16,
          theOffset = 8286),
          theOptionalSource = "mmr__x0.adb"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l405.  return;
}
procedure Send_Msg 
      (Msg_t::Msg M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 315,
  theCol = 22,
  theOffset = 12329),
  theEndCaret = 
  @Caret(
  theLine = 315,
  theCol = 23,
  theOffset = 12329),
  theOptionalSource = "mmr__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(M),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 315,
      theCol = 3,
      theOffset = 12310),
      theEndCaret = 
      @Caret(
      theLine = 324,
      theCol = 16,
      theOffset = 12575),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 315,
      theCol = 13,
      theOffset = 12320),
      theEndCaret = 
      @Caret(
      theLine = 315,
      theCol = 21,
      theOffset = 12327),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 315,
      theCol = 3,
      theOffset = 12310),
      theEndCaret = 
      @Caret(
      theLine = 315,
      theCol = 38,
      theOffset = 12344),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id Origin @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 317,
      theCol = 6,
      theOffset = 12356),
      theEndCaret = 
      @Caret(
      theLine = 317,
      theCol = 12,
      theOffset = 12361),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Lbl_t::Proc_Id Dest @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 318,
      theCol = 6,
      theOffset = 12384),
      theEndCaret = 
      @Caret(
      theLine = 318,
      theCol = 10,
      theOffset = 12387),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Msg_t::Msg temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Msg temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Pointer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l406.  temp$1 := M;
  #l407.  call temp$2 := Msg_t::Get_Origin (temp$1);
  #l408. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l406,
      endLabel = l408,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 320,
      theCol = 6,
      theOffset = 12418),
      theEndCaret = 
      @Caret(
      theLine = 320,
      theCol = 36,
      theOffset = 12447),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Origin := temp$2;
  #l409.  temp$3 := M;
  #l410.  call temp$4 := Msg_t::Get_Dest (temp$3);
  #l411. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l409,
      endLabel = l411,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 321,
      theCol = 6,
      theOffset = 12454),
      theEndCaret = 
      @Caret(
      theLine = 321,
      theCol = 32,
      theOffset = 12479),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Dest := temp$4;
  #l412.  temp$5 := M;
  #l413.  temp$6 := Origin;
  #l414.  temp$7 := Dest;
  #l415.  temp$8 := Mmr::@@Pointers [temp$6] [temp$7];
  #l416. <@ProcedureCallStatementAnnotation(
    optCopyBackPart = @NONE,
      mark = @Mark(
      startLabel = l412,
      endLabel = l416,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 322,
      theCol = 6,
      theOffset = 12486),
      theEndCaret = 
      @Caret(
      theLine = 322,
      theCol = 46,
      theOffset = 12525),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  call  Memory::Write (temp$5, temp$8);
  #l417.  temp$9 := Origin;
  #l418.  temp$10 := Dest;
  #l419.  temp$11 := true;
  #l420. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l417,
      endLabel = l420,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 323,
      theCol = 6,
      theOffset = 12532),
      theEndCaret = 
      @Caret(
      theLine = 323,
      theCol = 34,
      theOffset = 12559),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Mmr::@@Flags [temp$9] [temp$10] := temp$11;
  #l421.  return;
}
procedure Read_Msgs 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 334,
  theCol = 23,
  theOffset = 13010),
  theEndCaret = 
  @Caret(
  theLine = 334,
  theCol = 24,
  theOffset = 13010),
  theOptionalSource = "mmr__x0.adb"
),
       Mem_t::Mem_Row A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 334,
  theCol = 44,
  theOffset = 13031),
  theEndCaret = 
  @Caret(
  theLine = 334,
  theCol = 45,
  theOffset = 13031),
  theOptionalSource = "mmr__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(P),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 334,
      theCol = 3,
      theOffset = 12990),
      theEndCaret = 
      @Caret(
      theLine = 346,
      theCol = 17,
      theOffset = 13431),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 334,
      theCol = 13,
      theOffset = 13000),
      theEndCaret = 
      @Caret(
      theLine = 334,
      theCol = 22,
      theOffset = 13008),
      theOptionalSource = "mmr__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 334,
      theCol = 3,
      theOffset = 12990),
      theEndCaret = 
      @Caret(
      theLine = 334,
      theCol = 65,
      theOffset = 13051),
      theOptionalSource = "mmr__x0.adb"
    )
) 
{

  local
    Mem_t::Mem_Row Temp_Mem_Row @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 336,
      theCol = 6,
      theOffset = 13063),
      theEndCaret = 
      @Caret(
      theLine = 336,
      theCol = 18,
      theOffset = 13074),
      theOptionalSource = "mmr__x0.adb"
    )
    );
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Mem_t::Mem_Row temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Mem_t::Mem_Row temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l422.  temp$1 := P;
  #l423.  temp$2 := Temp_Mem_Row;
  #l425. <@ProcedureCallStatementAnnotation(
    optCopyBackPart = @Mark(
    startLabel = l424,
    endLabel = l424,
    optRS = @NONE
  ),
      mark = @Mark(
      startLabel = l422,
      endLabel = l425,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 339,
      theCol = 6,
      theOffset = 13164),
      theEndCaret = 
      @Caret(
      theLine = 339,
      theCol = 36,
      theOffset = 13193),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  call  Mmr::Fill_Mem_Row (temp$1, temp$2);
  #l424. <@CopyBackStatementAnnotation(
      mark = @Mark(
      startLabel = l424,
      endLabel = l424,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 339,
      theCol = 22,
      theOffset = 13180),
      theEndCaret = 
      @Caret(
      theLine = 339,
      theCol = 34,
      theOffset = 13191),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  Temp_Mem_Row := temp$2;
  #l426.  temp$3 := P;
  #l427. <@ProcedureCallStatementAnnotation(
    optCopyBackPart = @NONE,
      mark = @Mark(
      startLabel = l426,
      endLabel = l427,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 341,
      theCol = 6,
      theOffset = 13263),
      theEndCaret = 
      @Caret(
      theLine = 341,
      theCol = 20,
      theOffset = 13276),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  call  Mmr::Zero_Flags (temp$3);
  #l428.  temp$4 := P;
  #l429. <@ProcedureCallStatementAnnotation(
    optCopyBackPart = @NONE,
      mark = @Mark(
      startLabel = l428,
      endLabel = l429,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 343,
      theCol = 6,
      theOffset = 13327),
      theEndCaret = 
      @Caret(
      theLine = 343,
      theCol = 22,
      theOffset = 13342),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  call  Mmr::Zero_Mem_Row (temp$4);
  #l430.  temp$5 := Temp_Mem_Row;
  #l431. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l430,
      endLabel = l431,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 345,
      theCol = 6,
      theOffset = 13397),
      theEndCaret = 
      @Caret(
      theLine = 345,
      theCol = 24,
      theOffset = 13414),
      theOptionalSource = "mmr__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  A := temp$5;
  #l432.  return;
}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Mmr
@PackageAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theSparkName = Mmr,
  thePilarSparkName = Mmr,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @List(@SymbolEntry(sparkID = "Pointers",pilarSparkID = Mmr::@@Pointers,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE),
      @SymbolEntry(sparkID = "Flags",pilarSparkID = Mmr::@@Flags,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE)),
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 13,
  theOffset = 54),
  theEndCaret = 
  @Caret(
  theLine = 126,
  theCol = 9,
  theOffset = 6122),
  theOptionalSource = "mmr__x0.ads"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 4,
  theCol = 1,
  theOffset = 92),
  theEndCaret = 
  @Caret(
  theLine = 4,
  theCol = 12,
  theOffset = 102),
  theOptionalSource = "mmr__x0.ads"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @ContextClause(
    theOptionalWithClauses = @List(Msg_t,
        Lbl_t,
        Mem_t,
        Memory,
        Policy),
    theOptionalUseTypeClauses = @NONE
  )  ,  
  theOptionalPackageSpecificationAnnotation = 
    @PackageSpecificationAnnotation(
      theOptionalOwnStatement = @OwnStatement(
      theOwnClauses = 
        @List(@OwnClause(
          theOptionalDeclaredType = @NONE,
          theOwnVariables = 
            @List(@OwnVariable(
              varName = Mmr::@@Pointers,
              mode = @NONE,
              ownCategory = @CONCRETE,
              theOwnVariableSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 5,
                  theCol = 11,
                  theOffset = 114),
                  theEndCaret = 
                  @Caret(
                  theLine = 5,
                  theCol = 19,
                  theOffset = 121),
                  theOptionalSource = "mmr__x0.ads"
                )
            ),
                  @OwnVariable(
              varName = Mmr::@@Flags,
              mode = @NONE,
              ownCategory = @CONCRETE,
              theOwnVariableSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 5,
                  theCol = 21,
                  theOffset = 124),
                  theEndCaret = 
                  @Caret(
                  theLine = 5,
                  theCol = 26,
                  theOffset = 128),
                  theOptionalSource = "mmr__x0.ads"
                )
            )),
          theOwnClauseSelection =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 5,
              theCol = 11,
              theOffset = 114),
              theEndCaret = 
              @Caret(
              theLine = 5,
              theCol = 26,
              theOffset = 129),
              theOptionalSource = "mmr__x0.ads"
            )
        )),
      theOwnStatementSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 5,
          theCol = 7,
          theOffset = 110),
          theEndCaret = 
          @Caret(
          theLine = 5,
          theCol = 26,
          theOffset = 129),
          theOptionalSource = "mmr__x0.ads"
        )
    ),
      theOptionalVarInitClause = @List(Mmr::@@Pointers,
          Mmr::@@Flags)
    ),
  theOptionalInheritClause = 
    @List(Msg_t,
          Lbl_t,
          Mem_t,
          Memory,
          Policy)
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Pointer_Row
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 171),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 62,
      theOffset = 229),
      theOptionalSource = "mmr__x0.ads"
    ),
    fullyQualifiedName = Mmr::Pointer_Row,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Lbl_t::Pointer,
        theDiscreteSubTypes = 
          @List(`Lbl_t::Proc_Id)
      ))
{}
record Pointer_Matrix
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 233),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 63,
      theOffset = 292),
      theOptionalSource = "mmr__x0.ads"
    ),
    fullyQualifiedName = Mmr::Pointer_Matrix,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Mmr::Pointer_Row,
        theDiscreteSubTypes = 
          @List(`Lbl_t::Proc_Id)
      ))
{}
record Flags_Row
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 328),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 54,
      theOffset = 378),
      theOptionalSource = "mmr__x0.ads"
    ),
    fullyQualifiedName = Mmr::Flags_Row,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Boolean,
        theDiscreteSubTypes = 
          @List(`Lbl_t::Proc_Id)
      ))
{}
record Flags_Matrix
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 13,
      theCol = 3,
      theOffset = 382),
      theEndCaret = 
      @Caret(
      theLine = 13,
      theCol = 59,
      theOffset = 437),
      theOptionalSource = "mmr__x0.ads"
    ),
    fullyQualifiedName = Mmr::Flags_Matrix,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Mmr::Flags_Row,
        theDiscreteSubTypes = 
          @List(`Lbl_t::Proc_Id)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
    global Mmr::Pointer_Matrix @@Pointers @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "Pointers",pilarSparkID = Mmr::@@Pointers,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 10,
    theCol = 3,
    theOffset = 296),
    theEndCaret = 
    @Caret(
    theLine = 10,
    theCol = 11,
    theOffset = 303),
    theOptionalSource = "mmr__x0.ads"
  )
  );
    global Mmr::Flags_Matrix @@Flags @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "Flags",pilarSparkID = Mmr::@@Flags,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 14,
    theCol = 3,
    theOffset = 441),
    theEndCaret = 
    @Caret(
    theLine = 14,
    theCol = 8,
    theOffset = 445),
    theOptionalSource = "mmr__x0.ads"
  )
  );
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure $$sinit
 
{
  #l1. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 26,
      theOffset = 464),
      theEndCaret = 
      @Caret(
      theLine = 15,
      theCol = 70,
      theOffset = 556),
      theOptionalSource = "mmr__x0.ads"
    )
    ),
      optSparkLabelList = @NONE
  )>  Mmr::@@Flags := `Mmr::Flags_Matrix (
     
    {
      Lbl_t::Proc_Id iter0 => 
        switch iter0 
    | => (`Mmr::Flags_Row (
       
      {
        Lbl_t::Proc_Id iter1 => 
          switch iter1 
      | => (false)
      }
    ))
    }
  );
  #locret. return;
}
procedure Standard::Boolean Invariant
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Pointers,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 18,
              theCol = 19,
              theOffset = 628),
              theEndCaret = 
              @Caret(
              theLine = 18,
              theCol = 27,
              theOffset = 635),
              theOptionalSource = "mmr__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 18,
          theCol = 9,
          theOffset = 618),
          theEndCaret = 
          @Caret(
          theLine = 18,
          theCol = 28,
          theOffset = 636),
          theOptionalSource = "mmr__x0.ads"
        ),
      theOptionalInGlobals = @List(Mmr::@@Pointers),
      theOptionalReturnAnnotation = 
        @NONE
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 575),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 37,
      theOffset = 608),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 12,
      theOffset = 584),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 21,
      theOffset = 592),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 575),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 36,
      theOffset = 607),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Invariant 
      (Mmr::Pointer_Matrix implicit__pointers @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 18,
  theCol = 19,
  theOffset = 628),
  theEndCaret = 
  @Caret(
  theLine = 18,
  theCol = 27,
  theOffset = 635),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(implicit__pointers)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 575),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 37,
      theOffset = 608),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 575),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 37,
      theOffset = 608),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 575),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 37,
      theOffset = 608),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean OutBoxWellFormed 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 20,
  theCol = 28,
  theOffset = 666),
  theEndCaret = 
  @Caret(
  theLine = 20,
  theCol = 29,
  theOffset = 666),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(P)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Pointers,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 21,
              theCol = 19,
              theOffset = 721),
              theEndCaret = 
              @Caret(
              theLine = 21,
              theCol = 27,
              theOffset = 728),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Mmr::@@Flags,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 21,
              theCol = 29,
              theOffset = 731),
              theEndCaret = 
              @Caret(
              theLine = 21,
              theCol = 34,
              theOffset = 735),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 21,
              theCol = 36,
              theOffset = 738),
              theEndCaret = 
              @Caret(
              theLine = 21,
              theCol = 52,
              theOffset = 753),
              theOptionalSource = "mmr__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 21,
          theCol = 9,
          theOffset = 711),
          theEndCaret = 
          @Caret(
          theLine = 21,
          theCol = 53,
          theOffset = 754),
          theOptionalSource = "mmr__x0.ads"
        ),
      theOptionalInGlobals = @List(Mmr::@@Pointers,
            Mmr::@@Flags,
            Memory::@@Mem_Space),
      theOptionalReturnAnnotation = 
        @NONE
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 2,
      theOffset = 640),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 64,
      theOffset = 701),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 11,
      theOffset = 649),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 27,
      theOffset = 664),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 2,
      theOffset = 640),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 63,
      theOffset = 700),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean OutBoxWellFormed 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 20,
  theCol = 28,
  theOffset = 666),
  theEndCaret = 
  @Caret(
  theLine = 20,
  theCol = 29,
  theOffset = 666),
  theOptionalSource = "mmr__x0.ads"
),
       Mmr::Pointer_Matrix implicit__pointers @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 19,
  theOffset = 721),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 27,
  theOffset = 728),
  theOptionalSource = "mmr__x0.ads"
),
       Mmr::Flags_Matrix implicit__flags @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 29,
  theOffset = 731),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 34,
  theOffset = 735),
  theOptionalSource = "mmr__x0.ads"
),
       Memory::Mem_Space_T implicit__mem_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 36,
  theOffset = 738),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 52,
  theOffset = 753),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(P,
            implicit__pointers,
            implicit__flags,
            implicit__mem_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 2,
      theOffset = 640),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 64,
      theOffset = 701),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 2,
      theOffset = 640),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 64,
      theOffset = 701),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 2,
      theOffset = 640),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 64,
      theOffset = 701),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean InBoxWellFormed 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 23,
  theCol = 27,
  theOffset = 784),
  theEndCaret = 
  @Caret(
  theLine = 23,
  theCol = 28,
  theOffset = 784),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(P)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Pointers,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 24,
              theCol = 19,
              theOffset = 839),
              theEndCaret = 
              @Caret(
              theLine = 24,
              theCol = 27,
              theOffset = 846),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Mmr::@@Flags,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 24,
              theCol = 29,
              theOffset = 849),
              theEndCaret = 
              @Caret(
              theLine = 24,
              theCol = 34,
              theOffset = 853),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 24,
              theCol = 36,
              theOffset = 856),
              theEndCaret = 
              @Caret(
              theLine = 24,
              theCol = 52,
              theOffset = 871),
              theOptionalSource = "mmr__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 24,
          theCol = 9,
          theOffset = 829),
          theEndCaret = 
          @Caret(
          theLine = 24,
          theCol = 53,
          theOffset = 872),
          theOptionalSource = "mmr__x0.ads"
        ),
      theOptionalInGlobals = @List(Mmr::@@Pointers,
            Mmr::@@Flags,
            Memory::@@Mem_Space),
      theOptionalReturnAnnotation = 
        @NONE
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 2,
      theOffset = 759),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 63,
      theOffset = 819),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 11,
      theOffset = 768),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 26,
      theOffset = 782),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 2,
      theOffset = 759),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 62,
      theOffset = 818),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean InBoxWellFormed 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 23,
  theCol = 27,
  theOffset = 784),
  theEndCaret = 
  @Caret(
  theLine = 23,
  theCol = 28,
  theOffset = 784),
  theOptionalSource = "mmr__x0.ads"
),
       Mmr::Pointer_Matrix implicit__pointers @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 24,
  theCol = 19,
  theOffset = 839),
  theEndCaret = 
  @Caret(
  theLine = 24,
  theCol = 27,
  theOffset = 846),
  theOptionalSource = "mmr__x0.ads"
),
       Mmr::Flags_Matrix implicit__flags @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 24,
  theCol = 29,
  theOffset = 849),
  theEndCaret = 
  @Caret(
  theLine = 24,
  theCol = 34,
  theOffset = 853),
  theOptionalSource = "mmr__x0.ads"
),
       Memory::Mem_Space_T implicit__mem_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 24,
  theCol = 36,
  theOffset = 856),
  theEndCaret = 
  @Caret(
  theLine = 24,
  theCol = 52,
  theOffset = 871),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(P,
            implicit__pointers,
            implicit__flags,
            implicit__mem_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 2,
      theOffset = 759),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 63,
      theOffset = 819),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 2,
      theOffset = 759),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 63,
      theOffset = 819),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 2,
      theOffset = 759),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 63,
      theOffset = 819),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}
procedure Route
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @NONE,
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = ((Policy::Is_Satisfied (Policy::@@Policy_Space) && Mmr::Invariant (Mmr::@@Pointers)) && $FOR_ALL {Lbl_t::Proc_Id P => 
          switch P
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => Mmr::OutBoxWellFormed (P, Mmr::@@Pointers, Mmr::@@Flags, Memory::@@Mem_Space)
            | => true}),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 41,
          theCol = 9,
          theOffset = 1593),
          theEndCaret = 
          @Caret(
          theLine = 43,
          theCol = 99,
          theOffset = 1785),
          theOptionalSource = "mmr__x0.ads"
        )
        ),
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Pointers,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 27,
              theCol = 23,
              theOffset = 944),
              theEndCaret = 
              @Caret(
              theLine = 27,
              theCol = 31,
              theOffset = 951),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 28,
              theCol = 23,
              theOffset = 976),
              theEndCaret = 
              @Caret(
              theLine = 28,
              theCol = 39,
              theOffset = 991),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Mmr::@@Flags,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 29,
              theCol = 23,
              theOffset = 1016),
              theEndCaret = 
              @Caret(
              theLine = 29,
              theCol = 28,
              theOffset = 1020),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Policy::@@Policy_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 30,
              theCol = 19,
              theOffset = 1041),
              theEndCaret = 
              @Caret(
              theLine = 30,
              theCol = 38,
              theOffset = 1059),
              theOptionalSource = "mmr__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 27,
          theCol = 9,
          theOffset = 930),
          theEndCaret = 
          @Caret(
          theLine = 30,
          theCol = 39,
          theOffset = 1060),
          theOptionalSource = "mmr__x0.ads"
        ),
      theOptionalInGlobals = @List(Mmr::@@Pointers,
            Memory::@@Mem_Space,
            Mmr::@@Flags,
            Policy::@@Policy_Space),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Mmr::Invariant (Mmr::@@Pointers) && $FOR_ALL {Lbl_t::Proc_Id P => 
          switch P
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => (Mmr::InBoxWellFormed (P, Mmr::@@Pointers, Mmr::@@Flags, Memory::@@Mem_Space) && $FOR_ALL {Lbl_t::Proc_Id Q => 
          switch Q
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => ((($AND(($OLD(Mmr::@@Flags)) [P] [Q],Policy::Is_Allowed (P, Q, Policy::@@Policy_Space)) ==> $AND((Memory::@@Mem_Space [Mmr::@@Pointers [Q] [P]] == ($OLD(Memory::@@Mem_Space)) [($OLD(Mmr::@@Pointers)) [P] [Q]]),(Mmr::@@Flags [Q] [P] == true))) && ($AND(($OLD(Mmr::@@Flags)) [P] [Q],!(Policy::Is_Allowed (P, Q, Policy::@@Policy_Space))) ==> $AND((Memory::@@Mem_Space [Mmr::@@Pointers [Q] [P]] == Msg_t::$Const.Def_Msg),(Mmr::@@Flags [Q] [P] == false)))) && (!(($OLD(Mmr::@@Flags)) [P] [Q]) ==> $AND((Memory::@@Mem_Space [Mmr::@@Pointers [Q] [P]] == Msg_t::$Const.Def_Msg),(Mmr::@@Flags [Q] [P] == false))))
            | => true})
            | => true}),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 45,
          theCol = 9,
          theOffset = 1853),
          theEndCaret = 
          @Caret(
          theLine = 66,
          theCol = 53,
          theOffset = 3017),
          theOptionalSource = "mmr__x0.ads"
        )
        ),
      theOptionalOutGlobals = @List(Mmr::@@Pointers,
          Memory::@@Mem_Space,
          Mmr::@@Flags),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Mmr::@@Pointers,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 31,
                          theCol = 17,
                          theOffset = 1078),
                          theEndCaret = 
                          @Caret(
                          theLine = 31,
                          theCol = 25,
                          theOffset = 1085),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Mmr::@@Pointers,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 31,
                          theCol = 39,
                          theOffset = 1100),
                          theEndCaret = 
                          @Caret(
                          theLine = 31,
                          theCol = 47,
                          theOffset = 1107),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 32,
                          theCol = 39,
                          theOffset = 1148),
                          theEndCaret = 
                          @Caret(
                          theLine = 32,
                          theCol = 44,
                          theOffset = 1152),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Policy::@@Policy_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 33,
                          theCol = 39,
                          theOffset = 1193),
                          theEndCaret = 
                          @Caret(
                          theLine = 33,
                          theCol = 58,
                          theOffset = 1211),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 31,
                  theCol = 17,
                  theOffset = 1078),
                  theEndCaret = 
                  @Caret(
                  theLine = 33,
                  theCol = 58,
                  theOffset = 1211),
                  theOptionalSource = "mmr__x0.ads"
                )
            )  ,
                  @DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 34,
                          theCol = 17,
                          theOffset = 1231),
                          theEndCaret = 
                          @Caret(
                          theLine = 34,
                          theCol = 33,
                          theOffset = 1246),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Mmr::@@Pointers,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 34,
                          theCol = 39,
                          theOffset = 1253),
                          theEndCaret = 
                          @Caret(
                          theLine = 34,
                          theCol = 47,
                          theOffset = 1260),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 35,
                          theCol = 39,
                          theOffset = 1301),
                          theEndCaret = 
                          @Caret(
                          theLine = 35,
                          theCol = 55,
                          theOffset = 1316),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 36,
                          theCol = 39,
                          theOffset = 1357),
                          theEndCaret = 
                          @Caret(
                          theLine = 36,
                          theCol = 44,
                          theOffset = 1361),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Policy::@@Policy_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 39,
                          theOffset = 1402),
                          theEndCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 58,
                          theOffset = 1420),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 34,
                  theCol = 17,
                  theOffset = 1231),
                  theEndCaret = 
                  @Caret(
                  theLine = 37,
                  theCol = 58,
                  theOffset = 1420),
                  theOptionalSource = "mmr__x0.ads"
                )
            )  ,
                  @DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 38,
                          theCol = 17,
                          theOffset = 1440),
                          theEndCaret = 
                          @Caret(
                          theLine = 38,
                          theCol = 22,
                          theOffset = 1444),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 38,
                          theCol = 39,
                          theOffset = 1462),
                          theEndCaret = 
                          @Caret(
                          theLine = 38,
                          theCol = 44,
                          theOffset = 1466),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Policy::@@Policy_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 39,
                          theCol = 39,
                          theOffset = 1507),
                          theEndCaret = 
                          @Caret(
                          theLine = 39,
                          theCol = 58,
                          theOffset = 1525),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 38,
                  theCol = 17,
                  theOffset = 1440),
                  theEndCaret = 
                  @Caret(
                  theLine = 39,
                  theCol = 58,
                  theOffset = 1525),
                  theOptionalSource = "mmr__x0.ads"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 31,
              theCol = 9,
              theOffset = 1070),
              theEndCaret = 
              @Caret(
              theLine = 39,
              theCol = 59,
              theOffset = 1526),
              theOptionalSource = "mmr__x0.ads"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 26,
      theCol = 3,
      theOffset = 905),
      theEndCaret = 
      @Caret(
      theLine = 26,
      theCol = 19,
      theOffset = 920),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 26,
      theCol = 13,
      theOffset = 915),
      theEndCaret = 
      @Caret(
      theLine = 26,
      theCol = 18,
      theOffset = 919),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 26,
      theCol = 3,
      theOffset = 905),
      theEndCaret = 
      @Caret(
      theLine = 26,
      theCol = 18,
      theOffset = 919),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}
procedure Send_Msg 
      (Msg_t::Msg M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 69,
  theCol = 22,
  theOffset = 3123),
  theEndCaret = 
  @Caret(
  theLine = 69,
  theCol = 23,
  theOffset = 3123),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(M),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = Mmr::Invariant (Mmr::@@Pointers),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 79,
          theCol = 9,
          theOffset = 3539),
          theEndCaret = 
          @Caret(
          theLine = 79,
          theCol = 33,
          theOffset = 3562),
          theOptionalSource = "mmr__x0.ads"
        )
        ),
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Pointers,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 70,
              theCol = 23,
              theOffset = 3163),
              theEndCaret = 
              @Caret(
              theLine = 70,
              theCol = 31,
              theOffset = 3170),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Mmr::@@Flags,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 71,
              theCol = 23,
              theOffset = 3195),
              theEndCaret = 
              @Caret(
              theLine = 71,
              theCol = 28,
              theOffset = 3199),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 72,
              theCol = 23,
              theOffset = 3224),
              theEndCaret = 
              @Caret(
              theLine = 72,
              theCol = 39,
              theOffset = 3239),
              theOptionalSource = "mmr__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 70,
          theCol = 9,
          theOffset = 3149),
          theEndCaret = 
          @Caret(
          theLine = 72,
          theCol = 40,
          theOffset = 3240),
          theOptionalSource = "mmr__x0.ads"
        ),
      theOptionalInGlobals = @List(Mmr::@@Pointers,
            Mmr::@@Flags,
            Memory::@@Mem_Space),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Mmr::Invariant (Mmr::@@Pointers) && $FOR_ALL {Lbl_t::Proc_Id P => 
          switch P
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => $FOR_ALL {Lbl_t::Proc_Id Q => 
          switch Q
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => (($AND((P == Msg_t::Get_Origin (M)),(Q == Msg_t::Get_Dest (M))) ==> $AND((Memory::@@Mem_Space [Mmr::@@Pointers [P] [Q]] == M),(Mmr::@@Flags [P] [Q] == true))) && ($OR((P != Msg_t::Get_Origin (M)),(Q != Msg_t::Get_Dest (M))) ==> $AND((Memory::@@Mem_Space [Mmr::@@Pointers [P] [Q]] == ($OLD(Memory::@@Mem_Space)) [Mmr::@@Pointers [P] [Q]]),(Mmr::@@Flags [P] [Q] == ($OLD(Mmr::@@Flags)) [P] [Q]))))
            | => true}
            | => true}),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 81,
          theCol = 9,
          theOffset = 3629),
          theEndCaret = 
          @Caret(
          theLine = 89,
          theCol = 58,
          theOffset = 4145),
          theOptionalSource = "mmr__x0.ads"
        )
        ),
      theOptionalOutGlobals = @List(Mmr::@@Flags,
          Memory::@@Mem_Space),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 73,
                          theCol = 17,
                          theOffset = 3258),
                          theEndCaret = 
                          @Caret(
                          theLine = 73,
                          theCol = 22,
                          theOffset = 3262),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 73,
                          theCol = 39,
                          theOffset = 3280),
                          theEndCaret = 
                          @Caret(
                          theLine = 73,
                          theCol = 44,
                          theOffset = 3284),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = M,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 74,
                          theCol = 39,
                          theOffset = 3325),
                          theEndCaret = 
                          @Caret(
                          theLine = 74,
                          theCol = 40,
                          theOffset = 3325),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 73,
                  theCol = 17,
                  theOffset = 3258),
                  theEndCaret = 
                  @Caret(
                  theLine = 74,
                  theCol = 40,
                  theOffset = 3325),
                  theOptionalSource = "mmr__x0.ads"
                )
            )  ,
                  @DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 75,
                          theCol = 17,
                          theOffset = 3345),
                          theEndCaret = 
                          @Caret(
                          theLine = 75,
                          theCol = 33,
                          theOffset = 3360),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = M,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 75,
                          theCol = 39,
                          theOffset = 3367),
                          theEndCaret = 
                          @Caret(
                          theLine = 75,
                          theCol = 40,
                          theOffset = 3367),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 76,
                          theCol = 39,
                          theOffset = 3408),
                          theEndCaret = 
                          @Caret(
                          theLine = 76,
                          theCol = 55,
                          theOffset = 3423),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Mmr::@@Pointers,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 77,
                          theCol = 39,
                          theOffset = 3464),
                          theEndCaret = 
                          @Caret(
                          theLine = 77,
                          theCol = 47,
                          theOffset = 3471),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 75,
                  theCol = 17,
                  theOffset = 3345),
                  theEndCaret = 
                  @Caret(
                  theLine = 77,
                  theCol = 47,
                  theOffset = 3471),
                  theOptionalSource = "mmr__x0.ads"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 73,
              theCol = 9,
              theOffset = 3250),
              theEndCaret = 
              @Caret(
              theLine = 77,
              theCol = 48,
              theOffset = 3472),
              theOptionalSource = "mmr__x0.ads"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 69,
      theCol = 3,
      theOffset = 3104),
      theEndCaret = 
      @Caret(
      theLine = 69,
      theCol = 39,
      theOffset = 3139),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 69,
      theCol = 13,
      theOffset = 3114),
      theEndCaret = 
      @Caret(
      theLine = 69,
      theCol = 21,
      theOffset = 3121),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 69,
      theCol = 3,
      theOffset = 3104),
      theEndCaret = 
      @Caret(
      theLine = 69,
      theCol = 38,
      theOffset = 3138),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}
procedure Read_Msgs 
      (Lbl_t::Proc_Id P @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 91,
  theCol = 23,
  theOffset = 4170),
  theEndCaret = 
  @Caret(
  theLine = 91,
  theCol = 24,
  theOffset = 4170),
  theOptionalSource = "mmr__x0.ads"
),
       Mem_t::Mem_Row A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 91,
  theCol = 44,
  theOffset = 4191),
  theEndCaret = 
  @Caret(
  theLine = 91,
  theCol = 45,
  theOffset = 4191),
  theOptionalSource = "mmr__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "mmr__x0.ads",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(P),
      theOptionalOutParameters = @List(A)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = (Mmr::Invariant (Mmr::@@Pointers) && Mmr::InBoxWellFormed (P, Mmr::@@Pointers, Mmr::@@Flags, Memory::@@Mem_Space)),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 105,
          theCol = 9,
          theOffset = 4803),
          theEndCaret = 
          @Caret(
          theLine = 106,
          theCol = 70,
          theOffset = 4895),
          theOptionalSource = "mmr__x0.ads"
        )
        ),
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Mmr::@@Pointers,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 92,
              theCol = 23,
              theOffset = 4236),
              theEndCaret = 
              @Caret(
              theLine = 92,
              theCol = 31,
              theOffset = 4243),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Mmr::@@Flags,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 93,
              theCol = 23,
              theOffset = 4268),
              theEndCaret = 
              @Caret(
              theLine = 93,
              theCol = 28,
              theOffset = 4272),
              theOptionalSource = "mmr__x0.ads"
            )
        ),
              @AnnotationVariable(
          id = Memory::@@Mem_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 94,
              theCol = 23,
              theOffset = 4297),
              theEndCaret = 
              @Caret(
              theLine = 94,
              theCol = 39,
              theOffset = 4312),
              theOptionalSource = "mmr__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 92,
          theCol = 9,
          theOffset = 4222),
          theEndCaret = 
          @Caret(
          theLine = 94,
          theCol = 40,
          theOffset = 4313),
          theOptionalSource = "mmr__x0.ads"
        ),
      theOptionalInGlobals = @List(Mmr::@@Pointers,
            Mmr::@@Flags,
            Memory::@@Mem_Space),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (Mmr::Invariant (Mmr::@@Pointers) && ($FOR_ALL {Lbl_t::Proc_Id Q => 
          switch Q
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => $AND((($OLD(Mmr::@@Flags)) [P] [Q] ==> (A [Q] == ($OLD(Memory::@@Mem_Space)) [Mmr::@@Pointers [P] [Q]])),(!(($OLD(Mmr::@@Flags)) [P] [Q]) ==> (A [Q] == Msg_t::$Const.Def_Msg)))
            | => true} && $FOR_ALL {Lbl_t::Proc_Id Q => 
          switch Q
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => $FOR_ALL {Lbl_t::Proc_Id R => 
          switch R
            | ($First(`Lbl_t::Proc_Id), $Last(`Lbl_t::Proc_Id)) => $AND(((Q == P) ==> ((Mmr::@@Flags [Q] [R] == false) && (Memory::@@Mem_Space [Mmr::@@Pointers [Q] [R]] == Msg_t::$Const.Def_Msg))),((Q != P) ==> ((Mmr::@@Flags [Q] [R] == ($OLD(Mmr::@@Flags)) [Q] [R]) && (Memory::@@Mem_Space [Mmr::@@Pointers [Q] [R]] == ($OLD(Memory::@@Mem_Space)) [Mmr::@@Pointers [Q] [R]]))))
            | => true}
            | => true})),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 108,
          theCol = 9,
          theOffset = 4963),
          theEndCaret = 
          @Caret(
          theLine = 125,
          theCol = 90,
          theOffset = 6113),
          theOptionalSource = "mmr__x0.ads"
        )
        ),
      theOptionalOutGlobals = @List(Mmr::@@Flags,
          Memory::@@Mem_Space),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 95,
                          theCol = 17,
                          theOffset = 4331),
                          theEndCaret = 
                          @Caret(
                          theLine = 95,
                          theCol = 22,
                          theOffset = 4335),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 95,
                          theCol = 39,
                          theOffset = 4353),
                          theEndCaret = 
                          @Caret(
                          theLine = 95,
                          theCol = 44,
                          theOffset = 4357),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = P,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 96,
                          theCol = 39,
                          theOffset = 4398),
                          theEndCaret = 
                          @Caret(
                          theLine = 96,
                          theCol = 40,
                          theOffset = 4398),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 95,
                  theCol = 17,
                  theOffset = 4331),
                  theEndCaret = 
                  @Caret(
                  theLine = 96,
                  theCol = 40,
                  theOffset = 4398),
                  theOptionalSource = "mmr__x0.ads"
                )
            )  ,
                  @DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = A,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 97,
                          theCol = 17,
                          theOffset = 4418),
                          theEndCaret = 
                          @Caret(
                          theLine = 97,
                          theCol = 18,
                          theOffset = 4418),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Mmr::@@Flags,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 97,
                          theCol = 39,
                          theOffset = 4440),
                          theEndCaret = 
                          @Caret(
                          theLine = 97,
                          theCol = 44,
                          theOffset = 4444),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = P,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 98,
                          theCol = 39,
                          theOffset = 4485),
                          theEndCaret = 
                          @Caret(
                          theLine = 98,
                          theCol = 40,
                          theOffset = 4485),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Mmr::@@Pointers,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 99,
                          theCol = 39,
                          theOffset = 4526),
                          theEndCaret = 
                          @Caret(
                          theLine = 99,
                          theCol = 47,
                          theOffset = 4533),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 100,
                          theCol = 39,
                          theOffset = 4574),
                          theEndCaret = 
                          @Caret(
                          theLine = 100,
                          theCol = 55,
                          theOffset = 4589),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 97,
                  theCol = 17,
                  theOffset = 4418),
                  theEndCaret = 
                  @Caret(
                  theLine = 100,
                  theCol = 55,
                  theOffset = 4589),
                  theOptionalSource = "mmr__x0.ads"
                )
            )  ,
                  @DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 101,
                          theCol = 17,
                          theOffset = 4609),
                          theEndCaret = 
                          @Caret(
                          theLine = 101,
                          theCol = 33,
                          theOffset = 4624),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = P,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 101,
                          theCol = 39,
                          theOffset = 4631),
                          theEndCaret = 
                          @Caret(
                          theLine = 101,
                          theCol = 40,
                          theOffset = 4631),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Mmr::@@Pointers,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 102,
                          theCol = 39,
                          theOffset = 4672),
                          theEndCaret = 
                          @Caret(
                          theLine = 102,
                          theCol = 47,
                          theOffset = 4679),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = Memory::@@Mem_Space,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 103,
                          theCol = 39,
                          theOffset = 4720),
                          theEndCaret = 
                          @Caret(
                          theLine = 103,
                          theCol = 55,
                          theOffset = 4735),
                          theOptionalSource = "mmr__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 101,
                  theCol = 17,
                  theOffset = 4609),
                  theEndCaret = 
                  @Caret(
                  theLine = 103,
                  theCol = 55,
                  theOffset = 4735),
                  theOptionalSource = "mmr__x0.ads"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 95,
              theCol = 9,
              theOffset = 4323),
              theEndCaret = 
              @Caret(
              theLine = 103,
              theCol = 56,
              theOffset = 4736),
              theOptionalSource = "mmr__x0.ads"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 91,
      theCol = 3,
      theOffset = 4150),
      theEndCaret = 
      @Caret(
      theLine = 91,
      theCol = 66,
      theOffset = 4212),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 91,
      theCol = 13,
      theOffset = 4160),
      theEndCaret = 
      @Caret(
      theLine = 91,
      theCol = 22,
      theOffset = 4168),
      theOptionalSource = "mmr__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 91,
      theCol = 3,
      theOffset = 4150),
      theEndCaret = 
      @Caret(
      theLine = 91,
      theCol = 65,
      theOffset = 4211),
      theOptionalSource = "mmr__x0.ads"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "mmr_config__x0.cfg",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 76),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 43,
      theOffset = 115),
      theOptionalSource = "mmr_config__x0.cfg"
    ),
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = -($POW(2,15)),
        theHighRangeExp = ($POW(2,15) - 1)))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Msg_t
@PackageAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theSparkName = Msg_t,
  thePilarSparkName = Msg_t,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 44,
  theCol = 11,
  theOffset = 988),
  theOptionalSource = "msg_t__x0.adb"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 19,
  theOffset = 17),
  theOptionalSource = "msg_t__x0.adb"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Set_Origin 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 25,
  theOffset = 46),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 29,
  theOffset = 49),
  theOptionalSource = "msg_t__x0.adb"
),
       Lbl_t::Proc_Id O @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 43,
  theOffset = 64),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 44,
  theOffset = 64),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg,
            O),
      theOptionalOutParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 4,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 19,
      theOffset = 138),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 14,
      theOffset = 35),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 24,
      theOffset = 44),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 4,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 63,
      theOffset = 83),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := O;
  #l2. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l2,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 7,
      theOffset = 103),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 24,
      theOffset = 119),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  aMsg.origin := temp$1;
  #l3.  return;
}
procedure Lbl_t::Proc_Id Get_Origin 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 24,
  theOffset = 164),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 28,
  theOffset = 167),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 4,
      theOffset = 144),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 19,
      theOffset = 254),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 13,
      theOffset = 153),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 23,
      theOffset = 162),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 4,
      theOffset = 144),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 58,
      theOffset = 197),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l4.  temp$1 := aMsg.origin;
  #l5. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l4,
      endLabel = l5,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 7,
      theOffset = 217),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 26,
      theOffset = 235),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$1;
}
procedure Lbl_t::Proc_Id Get_Origin 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 24,
  theOffset = 164),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 28,
  theOffset = 167),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 4,
      theOffset = 144),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 19,
      theOffset = 254),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 4,
      theOffset = 144),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 19,
      theOffset = 254),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 4,
      theOffset = 144),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 19,
      theOffset = 254),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{ #locret. return;}
procedure Set_Dest 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 23,
  theOffset = 280),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 27,
  theOffset = 283),
  theOptionalSource = "msg_t__x0.adb"
),
       Lbl_t::Proc_Id D @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 41,
  theOffset = 298),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 42,
  theOffset = 298),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg,
            D),
      theOptionalOutParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 261),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 17,
      theOffset = 368),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 14,
      theOffset = 271),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 22,
      theOffset = 278),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 261),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 61,
      theOffset = 317),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l6.  temp$1 := D;
  #l7. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l6,
      endLabel = l7,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 16,
      theCol = 7,
      theOffset = 337),
      theEndCaret = 
      @Caret(
      theLine = 16,
      theCol = 22,
      theOffset = 351),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  aMsg.dest := temp$1;
  #l8.  return;
}
procedure Lbl_t::Proc_Id Get_Dest 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 19,
  theCol = 22,
  theOffset = 392),
  theEndCaret = 
  @Caret(
  theLine = 19,
  theCol = 26,
  theOffset = 395),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 4,
      theOffset = 374),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 17,
      theOffset = 478),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 13,
      theOffset = 383),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 21,
      theOffset = 390),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 4,
      theOffset = 374),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 56,
      theOffset = 425),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l9.  temp$1 := aMsg.dest;
  #l10. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l9,
      endLabel = l10,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 7,
      theOffset = 445),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 24,
      theOffset = 461),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$1;
}
procedure Lbl_t::Proc_Id Get_Dest 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 19,
  theCol = 22,
  theOffset = 392),
  theEndCaret = 
  @Caret(
  theLine = 19,
  theCol = 26,
  theOffset = 395),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 4,
      theOffset = 374),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 17,
      theOffset = 478),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 4,
      theOffset = 374),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 17,
      theOffset = 478),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 4,
      theOffset = 374),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 17,
      theOffset = 478),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{ #locret. return;}
procedure Set_Data 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 25,
  theCol = 23,
  theOffset = 504),
  theEndCaret = 
  @Caret(
  theLine = 25,
  theCol = 27,
  theOffset = 507),
  theOptionalSource = "msg_t__x0.adb"
),
       Msg_t::Data_Range B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 25,
  theCol = 41,
  theOffset = 522),
  theEndCaret = 
  @Caret(
  theLine = 25,
  theCol = 42,
  theOffset = 522),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg,
            B),
      theOptionalOutParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 25,
      theCol = 4,
      theOffset = 485),
      theEndCaret = 
      @Caret(
      theLine = 28,
      theCol = 17,
      theOffset = 589),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 25,
      theCol = 14,
      theOffset = 495),
      theEndCaret = 
      @Caret(
      theLine = 25,
      theCol = 22,
      theOffset = 502),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 25,
      theCol = 4,
      theOffset = 485),
      theEndCaret = 
      @Caret(
      theLine = 25,
      theCol = 58,
      theOffset = 538),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{

  local
    Msg_t::Data_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l11.  temp$1 := B;
  #l12. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l11,
      endLabel = l12,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 27,
      theCol = 7,
      theOffset = 558),
      theEndCaret = 
      @Caret(
      theLine = 27,
      theCol = 22,
      theOffset = 572),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  aMsg.data := temp$1;
  #l13.  return;
}
procedure Msg_t::Data_Range Get_Data 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 30,
  theCol = 22,
  theOffset = 613),
  theEndCaret = 
  @Caret(
  theLine = 30,
  theCol = 26,
  theOffset = 616),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 595),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 696),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 13,
      theOffset = 604),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 21,
      theOffset = 611),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 595),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 53,
      theOffset = 643),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{

  local
    Msg_t::Data_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l14.  temp$1 := aMsg.data;
  #l15. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l14,
      endLabel = l15,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 7,
      theOffset = 663),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 24,
      theOffset = 679),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$1;
}
procedure Msg_t::Data_Range Get_Data 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 30,
  theCol = 22,
  theOffset = 613),
  theEndCaret = 
  @Caret(
  theLine = 30,
  theCol = 26,
  theOffset = 616),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 595),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 696),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 595),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 696),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 595),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 696),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Default_Message 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 32,
  theOffset = 730),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 36,
  theOffset = 733),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 702),
      theEndCaret = 
      @Caret(
      theLine = 43,
      theCol = 27,
      theOffset = 977),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 13,
      theOffset = 711),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 31,
      theOffset = 728),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 702),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 60,
      theOffset = 757),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{

  local
    Standard::Boolean Z @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 6,
      theOffset = 770),
      theEndCaret = 
      @Caret(
      theLine = 37,
      theCol = 7,
      theOffset = 770),
      theOptionalSource = "msg_t__x0.adb"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Msg_t::Data_Range temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l16.  temp$1 := false;
  #l17. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l16,
      endLabel = l17,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 37,
      theCol = 6,
      theOffset = 770),
      theEndCaret = 
      @Caret(
      theLine = 37,
      theCol = 7,
      theOffset = 770),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  Z := temp$1;
      #l18.  temp$2 := aMsg.data;
      #l19.  temp$3 := 0;
      #l20.  temp$4 := (temp$2 == temp$3);
      #l21.  temp$5 := aMsg.origin;
      #l22.  temp$6 := $First(`Lbl_t::Proc_Id);
      #l23.  temp$7 := (temp$5 == temp$6);
    #l24.  temp$8 := temp$4 && temp$7 ;
    #l25.  temp$9 := temp$8;
    #l26.  temp$10 := aMsg.dest;
    #l27.  temp$11 := $First(`Lbl_t::Proc_Id);
    #l28.  temp$12 := (temp$10 == temp$11);
  #l29.  temp$13 := temp$9 && temp$12 ;
  #l30.  temp$14 := temp$13;
  #l31.  if !(temp$14) then goto l32; 
  #l33.  temp$15 := true;
  #l34. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l33,
      endLabel = l34,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 40,
      theCol = 10,
      theOffset = 911),
      theEndCaret = 
      @Caret(
      theLine = 40,
      theCol = 20,
      theOffset = 920),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Z := temp$15;
  #l35.  goto l36;
  #l32. 
  #l36. <@IfStatementAnnotation(
    ifPart = @Mark(
    startLabel = l18,
    endLabel = l31,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 39,
    theCol = 7,
    theOffset = 806),
    theEndCaret = 
    @Caret(
    theLine = 39,
    theCol = 97,
    theOffset = 895),
    theOptionalSource = "msg_t__x0.adb"
  )
  ),
    thenPart= @MARK_PLACEHOLDER,
    optElsIfParts = @NONE,
    optElsePart = @NONE,
      mark = @Mark(
      startLabel = l18,
      endLabel = l36,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 7,
      theOffset = 806),
      theEndCaret = 
      @Caret(
      theLine = 41,
      theCol = 14,
      theOffset = 934),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE  
  )> 
  #l37.  temp$16 := Z;
  #l38. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l37,
      endLabel = l38,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 42,
      theCol = 7,
      theOffset = 942),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 16,
      theOffset = 950),
      theOptionalSource = "msg_t__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$16;
}
procedure Standard::Boolean Is_Default_Message 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 32,
  theOffset = 730),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 36,
  theOffset = 733),
  theOptionalSource = "msg_t__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 702),
      theEndCaret = 
      @Caret(
      theLine = 43,
      theCol = 27,
      theOffset = 977),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 702),
      theEndCaret = 
      @Caret(
      theLine = 43,
      theCol = 27,
      theOffset = 977),
      theOptionalSource = "msg_t__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 702),
      theEndCaret = 
      @Caret(
      theLine = 43,
      theCol = 27,
      theOffset = 977),
      theOptionalSource = "msg_t__x0.adb"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Msg_t
@PackageAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theSparkName = Msg_t,
  thePilarSparkName = Msg_t,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 13,
  theOffset = 24),
  theEndCaret = 
  @Caret(
  theLine = 63,
  theCol = 11,
  theOffset = 2094),
  theOptionalSource = "msg_t__x0.ads"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 4,
  theCol = 1,
  theOffset = 32),
  theEndCaret = 
  @Caret(
  theLine = 4,
  theCol = 14,
  theOffset = 44),
  theOptionalSource = "msg_t__x0.ads"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @ContextClause(
    theOptionalWithClauses = @List(Lbl_t),
    theOptionalUseTypeClauses = @NONE
  )  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @List(Lbl_t)
));

const $Const {
  Def_Msg = (Msg_t::Msg) (`Msg_t::Msg {
    Data = 0,
    Origin = $First(`Lbl_t::Proc_Id),
    Dest = $First(`Lbl_t::Proc_Id)
  }) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PUBLIC_DEFERRED,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 60,
        theCol = 4,
        theOffset = 1915),
        theEndCaret = 
        @Caret(
        theLine = 60,
        theCol = 11,
        theOffset = 1921),
        theOptionalSource = "msg_t__x0.ads"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Data_Range
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 86),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 47,
      theOffset = 128),
      theOptionalSource = "msg_t__x0.ads"
    ),
    fullyQualifiedName = Msg_t::Data_Range,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = 0,
        theHighRangeExp = $Last(`Standard::Integer)))
{}
record Msg
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 4,
      theOffset = 754),
      theEndCaret = 
      @Caret(
      theLine = 25,
      theCol = 18,
      theOffset = 884),
      theOptionalSource = "msg_t__x0.ads"
    ),
    fullyQualifiedName = Msg_t::Msg,
    typeDefinition = 
      @RecordTypeDefinition(
        tagged = false,
        parentType=@NONE))
{
  Msg_t::Data_Range data @RecordComponentAnnotation(
    sparkID = Data
  );
  Lbl_t::Proc_Id origin @RecordComponentAnnotation(
    sparkID = Origin
  );
  Lbl_t::Proc_Id dest @RecordComponentAnnotation(
    sparkID = Dest
  );
}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Set_Origin 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 30,
  theCol = 25,
  theOffset = 939),
  theEndCaret = 
  @Caret(
  theLine = 30,
  theCol = 29,
  theOffset = 942),
  theOptionalSource = "msg_t__x0.ads"
),
       Lbl_t::Proc_Id O @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 30,
  theCol = 43,
  theOffset = 957),
  theEndCaret = 
  @Caret(
  theLine = 30,
  theCol = 44,
  theOffset = 957),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg,
            O),
      theOptionalOutParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (aMsg == $RECORD_UPDATE (($OLD(aMsg)), `{:origin -> O}) ),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 34,
          theCol = 8,
          theOffset = 1103),
          theEndCaret = 
          @Caret(
          theLine = 34,
          theCol = 41,
          theOffset = 1135),
          theOptionalSource = "msg_t__x0.ads"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = aMsg,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 31,
                          theCol = 16,
                          theOffset = 994),
                          theEndCaret = 
                          @Caret(
                          theLine = 31,
                          theCol = 20,
                          theOffset = 997),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = aMsg,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 31,
                          theCol = 26,
                          theOffset = 1004),
                          theEndCaret = 
                          @Caret(
                          theLine = 31,
                          theCol = 30,
                          theOffset = 1007),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = O,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 32,
                          theCol = 26,
                          theOffset = 1035),
                          theEndCaret = 
                          @Caret(
                          theLine = 32,
                          theCol = 27,
                          theOffset = 1035),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 31,
                  theCol = 16,
                  theOffset = 994),
                  theEndCaret = 
                  @Caret(
                  theLine = 32,
                  theCol = 27,
                  theOffset = 1035),
                  theOptionalSource = "msg_t__x0.ads"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 31,
              theCol = 8,
              theOffset = 986),
              theEndCaret = 
              @Caret(
              theLine = 32,
              theCol = 28,
              theOffset = 1036),
              theOptionalSource = "msg_t__x0.ads"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 918),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 64,
      theOffset = 977),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 14,
      theOffset = 928),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 24,
      theOffset = 937),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 918),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 63,
      theOffset = 976),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Lbl_t::Proc_Id Get_Origin 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 36,
  theCol = 24,
  theOffset = 1164),
  theEndCaret = 
  @Caret(
  theLine = 36,
  theCol = 28,
  theOffset = 1167),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalReturnAnnotation = 
        @ContractPredicate(
          theType = @RETURN,
          theExp = {Lbl_t::Proc_Id __implicit_result_id => (__implicit_result_id == aMsg.origin)},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 37,
          theCol = 8,
          theOffset = 1207),
          theEndCaret = 
          @Caret(
          theLine = 37,
          theCol = 27,
          theOffset = 1225),
          theOptionalSource = "msg_t__x0.ads"
        )
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 36,
      theCol = 4,
      theOffset = 1144),
      theEndCaret = 
      @Caret(
      theLine = 36,
      theCol = 59,
      theOffset = 1198),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 36,
      theCol = 13,
      theOffset = 1153),
      theEndCaret = 
      @Caret(
      theLine = 36,
      theCol = 23,
      theOffset = 1162),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 36,
      theCol = 4,
      theOffset = 1144),
      theEndCaret = 
      @Caret(
      theLine = 36,
      theCol = 58,
      theOffset = 1197),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Lbl_t::Proc_Id Get_Origin 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 36,
  theCol = 24,
  theOffset = 1164),
  theEndCaret = 
  @Caret(
  theLine = 36,
  theCol = 28,
  theOffset = 1167),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 36,
      theCol = 4,
      theOffset = 1144),
      theEndCaret = 
      @Caret(
      theLine = 36,
      theCol = 59,
      theOffset = 1198),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 36,
      theCol = 4,
      theOffset = 1144),
      theEndCaret = 
      @Caret(
      theLine = 36,
      theCol = 59,
      theOffset = 1198),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 36,
      theCol = 4,
      theOffset = 1144),
      theEndCaret = 
      @Caret(
      theLine = 36,
      theCol = 59,
      theOffset = 1198),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Set_Dest 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 39,
  theCol = 23,
  theOffset = 1253),
  theEndCaret = 
  @Caret(
  theLine = 39,
  theCol = 27,
  theOffset = 1256),
  theOptionalSource = "msg_t__x0.ads"
),
       Lbl_t::Proc_Id D @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 39,
  theCol = 41,
  theOffset = 1271),
  theEndCaret = 
  @Caret(
  theLine = 39,
  theCol = 42,
  theOffset = 1271),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg,
            D),
      theOptionalOutParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (aMsg == $RECORD_UPDATE (($OLD(aMsg)), `{:dest -> D}) ),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 43,
          theCol = 8,
          theOffset = 1417),
          theEndCaret = 
          @Caret(
          theLine = 43,
          theCol = 39,
          theOffset = 1447),
          theOptionalSource = "msg_t__x0.ads"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = aMsg,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 40,
                          theCol = 16,
                          theOffset = 1308),
                          theEndCaret = 
                          @Caret(
                          theLine = 40,
                          theCol = 20,
                          theOffset = 1311),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = aMsg,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 40,
                          theCol = 26,
                          theOffset = 1318),
                          theEndCaret = 
                          @Caret(
                          theLine = 40,
                          theCol = 30,
                          theOffset = 1321),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = D,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 41,
                          theCol = 26,
                          theOffset = 1349),
                          theEndCaret = 
                          @Caret(
                          theLine = 41,
                          theCol = 27,
                          theOffset = 1349),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 40,
                  theCol = 16,
                  theOffset = 1308),
                  theEndCaret = 
                  @Caret(
                  theLine = 41,
                  theCol = 27,
                  theOffset = 1349),
                  theOptionalSource = "msg_t__x0.ads"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 40,
              theCol = 8,
              theOffset = 1300),
              theEndCaret = 
              @Caret(
              theLine = 41,
              theCol = 28,
              theOffset = 1350),
              theOptionalSource = "msg_t__x0.ads"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 4,
      theOffset = 1234),
      theEndCaret = 
      @Caret(
      theLine = 39,
      theCol = 62,
      theOffset = 1291),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 14,
      theOffset = 1244),
      theEndCaret = 
      @Caret(
      theLine = 39,
      theCol = 22,
      theOffset = 1251),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 4,
      theOffset = 1234),
      theEndCaret = 
      @Caret(
      theLine = 39,
      theCol = 61,
      theOffset = 1290),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Lbl_t::Proc_Id Get_Dest 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 45,
  theCol = 22,
  theOffset = 1474),
  theEndCaret = 
  @Caret(
  theLine = 45,
  theCol = 26,
  theOffset = 1477),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalReturnAnnotation = 
        @ContractPredicate(
          theType = @RETURN,
          theExp = {Lbl_t::Proc_Id __implicit_result_id => (__implicit_result_id == aMsg.dest)},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 46,
          theCol = 8,
          theOffset = 1518),
          theEndCaret = 
          @Caret(
          theLine = 46,
          theCol = 25,
          theOffset = 1534),
          theOptionalSource = "msg_t__x0.ads"
        )
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 45,
      theCol = 4,
      theOffset = 1456),
      theEndCaret = 
      @Caret(
      theLine = 45,
      theCol = 57,
      theOffset = 1508),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 45,
      theCol = 13,
      theOffset = 1465),
      theEndCaret = 
      @Caret(
      theLine = 45,
      theCol = 21,
      theOffset = 1472),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 45,
      theCol = 4,
      theOffset = 1456),
      theEndCaret = 
      @Caret(
      theLine = 45,
      theCol = 56,
      theOffset = 1507),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Lbl_t::Proc_Id Get_Dest 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 45,
  theCol = 22,
  theOffset = 1474),
  theEndCaret = 
  @Caret(
  theLine = 45,
  theCol = 26,
  theOffset = 1477),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 45,
      theCol = 4,
      theOffset = 1456),
      theEndCaret = 
      @Caret(
      theLine = 45,
      theCol = 57,
      theOffset = 1508),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 45,
      theCol = 4,
      theOffset = 1456),
      theEndCaret = 
      @Caret(
      theLine = 45,
      theCol = 57,
      theOffset = 1508),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 45,
      theCol = 4,
      theOffset = 1456),
      theEndCaret = 
      @Caret(
      theLine = 45,
      theCol = 57,
      theOffset = 1508),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Set_Data 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 48,
  theCol = 23,
  theOffset = 1562),
  theEndCaret = 
  @Caret(
  theLine = 48,
  theCol = 27,
  theOffset = 1565),
  theOptionalSource = "msg_t__x0.ads"
),
       Msg_t::Data_Range B @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 48,
  theCol = 41,
  theOffset = 1580),
  theEndCaret = 
  @Caret(
  theLine = 48,
  theCol = 42,
  theOffset = 1580),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg,
            B),
      theOptionalOutParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (aMsg == $RECORD_UPDATE (($OLD(aMsg)), `{:data -> B}) ),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 52,
          theCol = 8,
          theOffset = 1723),
          theEndCaret = 
          @Caret(
          theLine = 52,
          theCol = 39,
          theOffset = 1753),
          theOptionalSource = "msg_t__x0.ads"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = aMsg,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 49,
                          theCol = 16,
                          theOffset = 1614),
                          theEndCaret = 
                          @Caret(
                          theLine = 49,
                          theCol = 20,
                          theOffset = 1617),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = aMsg,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 49,
                          theCol = 26,
                          theOffset = 1624),
                          theEndCaret = 
                          @Caret(
                          theLine = 49,
                          theCol = 30,
                          theOffset = 1627),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ),
                          @AnnotationVariable(
                      id = B,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 50,
                          theCol = 26,
                          theOffset = 1655),
                          theEndCaret = 
                          @Caret(
                          theLine = 50,
                          theCol = 27,
                          theOffset = 1655),
                          theOptionalSource = "msg_t__x0.ads"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 49,
                  theCol = 16,
                  theOffset = 1614),
                  theEndCaret = 
                  @Caret(
                  theLine = 50,
                  theCol = 27,
                  theOffset = 1655),
                  theOptionalSource = "msg_t__x0.ads"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 49,
              theCol = 8,
              theOffset = 1606),
              theEndCaret = 
              @Caret(
              theLine = 50,
              theCol = 28,
              theOffset = 1656),
              theOptionalSource = "msg_t__x0.ads"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 4,
      theOffset = 1543),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 59,
      theOffset = 1597),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 14,
      theOffset = 1553),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 22,
      theOffset = 1560),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 4,
      theOffset = 1543),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 58,
      theOffset = 1596),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Msg_t::Data_Range Get_Data 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 54,
  theCol = 22,
  theOffset = 1777),
  theEndCaret = 
  @Caret(
  theLine = 54,
  theCol = 26,
  theOffset = 1780),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalReturnAnnotation = 
        @ContractPredicate(
          theType = @RETURN,
          theExp = {Msg_t::Data_Range __implicit_result_id => (__implicit_result_id == aMsg.data)},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 55,
          theCol = 8,
          theOffset = 1817),
          theEndCaret = 
          @Caret(
          theLine = 55,
          theCol = 25,
          theOffset = 1833),
          theOptionalSource = "msg_t__x0.ads"
        )
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 4,
      theOffset = 1759),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 54,
      theOffset = 1808),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 13,
      theOffset = 1768),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 21,
      theOffset = 1775),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 4,
      theOffset = 1759),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 53,
      theOffset = 1807),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Msg_t::Data_Range Get_Data 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 54,
  theCol = 22,
  theOffset = 1777),
  theEndCaret = 
  @Caret(
  theLine = 54,
  theCol = 26,
  theOffset = 1780),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 4,
      theOffset = 1759),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 54,
      theOffset = 1808),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 4,
      theOffset = 1759),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 54,
      theOffset = 1808),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 54,
      theCol = 4,
      theOffset = 1759),
      theEndCaret = 
      @Caret(
      theLine = 54,
      theCol = 54,
      theOffset = 1808),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Default_Message 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 57,
  theCol = 32,
  theOffset = 1870),
  theEndCaret = 
  @Caret(
  theLine = 57,
  theCol = 36,
  theOffset = 1873),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 57,
      theCol = 4,
      theOffset = 1842),
      theEndCaret = 
      @Caret(
      theLine = 57,
      theCol = 61,
      theOffset = 1898),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 57,
      theCol = 13,
      theOffset = 1851),
      theEndCaret = 
      @Caret(
      theLine = 57,
      theCol = 31,
      theOffset = 1868),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 57,
      theCol = 4,
      theOffset = 1842),
      theEndCaret = 
      @Caret(
      theLine = 57,
      theCol = 60,
      theOffset = 1897),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Default_Message 
      (Msg_t::Msg aMsg @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 57,
  theCol = 32,
  theOffset = 1870),
  theEndCaret = 
  @Caret(
  theLine = 57,
  theCol = 36,
  theOffset = 1873),
  theOptionalSource = "msg_t__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "msg_t__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(aMsg)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 57,
      theCol = 4,
      theOffset = 1842),
      theEndCaret = 
      @Caret(
      theLine = 57,
      theCol = 61,
      theOffset = 1898),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 57,
      theCol = 4,
      theOffset = 1842),
      theEndCaret = 
      @Caret(
      theLine = 57,
      theCol = 61,
      theOffset = 1898),
      theOptionalSource = "msg_t__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 57,
      theCol = 4,
      theOffset = 1842),
      theEndCaret = 
      @Caret(
      theLine = 57,
      theCol = 61,
      theOffset = 1898),
      theOptionalSource = "msg_t__x0.ads"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Policy
@PackageAnnotation(
  theSourceFileName = "policy__x0.adb",
  theSparkName = Policy,
  thePilarSparkName = Policy,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 40,
  theCol = 12,
  theOffset = 1319),
  theOptionalSource = "policy__x0.adb"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 20,
  theOffset = 18),
  theOptionalSource = "policy__x0.adb"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure $$binit
 
{

  local
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 29,
      theCol = 5,
      theOffset = 900),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 68,
      theOffset = 1007),
      theOptionalSource = "policy__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Policy::@@Policy_Space := `Policy::Policy_Matrix (
     
    {
      Lbl_t::Proc_Id iter0 => 
        switch iter0 
    | => (`Policy::Policy_Row (
       
      {
        Lbl_t::Proc_Id iter1 => 
          switch iter1 
      | => (false)
      }
    ))
    }
  );
  #l2.  temp$3 := 1;
  #l3.  temp$4 := 2;
  #l4.  temp$5 := true;
  #l5. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l2,
      endLabel = l5,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 31,
      theCol = 5,
      theOffset = 1013),
      theEndCaret = 
      @Caret(
      theLine = 31,
      theCol = 32,
      theOffset = 1039),
      theOptionalSource = "policy__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Policy::@@Policy_Space [temp$3] [temp$4] := temp$5;
  #l6.  temp$6 := 2;
  #l7.  temp$7 := 3;
  #l8.  temp$8 := true;
  #l9. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l6,
      endLabel = l9,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 5,
      theOffset = 1045),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 32,
      theOffset = 1071),
      theOptionalSource = "policy__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Policy::@@Policy_Space [temp$6] [temp$7] := temp$8;
  #l10.  temp$9 := 3;
  #l11.  temp$10 := 2;
  #l12.  temp$11 := true;
  #l13. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l10,
      endLabel = l13,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 33,
      theCol = 5,
      theOffset = 1077),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 32,
      theOffset = 1103),
      theOptionalSource = "policy__x0.adb"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Policy::@@Policy_Space [temp$9] [temp$10] := temp$11;
  #locret. return;
}
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Boolean Is_Allowed 
      (Lbl_t::Proc_Id Origin @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 23,
  theOffset = 45),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 29,
  theOffset = 50),
  theOptionalSource = "policy__x0.adb"
),
       Lbl_t::Proc_Id Dest @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 49,
  theOffset = 71),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 53,
  theOffset = 74),
  theOptionalSource = "policy__x0.adb"
))
@MethodAnnotation(
  theSourceFileName = "policy__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Origin,
            Dest)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 18,
      theOffset = 198),
      theOptionalSource = "policy__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 12,
      theOffset = 34),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 22,
      theOffset = 43),
      theOptionalSource = "policy__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 4,
      theCol = 37,
      theOffset = 130),
      theOptionalSource = "policy__x0.adb"
    )
) 
{

  local
    Lbl_t::Proc_Id temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Lbl_t::Proc_Id temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l14.  temp$1 := Origin;
  #l15.  temp$2 := Dest;
  #l16.  temp$3 := Policy::@@Policy_Space [temp$1] [temp$2];
  #l17. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l14,
      endLabel = l17,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 5,
      theOffset = 147),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 39,
      theOffset = 180),
      theOptionalSource = "policy__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$3;
}
procedure Standard::Boolean Is_Allowed 
      (Lbl_t::Proc_Id Origin @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 23,
  theOffset = 45),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 29,
  theOffset = 50),
  theOptionalSource = "policy__x0.adb"
),
       Lbl_t::Proc_Id Dest @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 49,
  theOffset = 71),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 53,
  theOffset = 74),
  theOptionalSource = "policy__x0.adb"
),
       Policy::Policy_Matrix implicit__policy_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 13,
  theCol = 19,
  theOffset = 383),
  theEndCaret = 
  @Caret(
  theLine = 13,
  theCol = 31,
  theOffset = 394),
  theOptionalSource = "policy__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "policy__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Origin,
            Dest,
            implicit__policy_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 18,
      theOffset = 198),
      theOptionalSource = "policy__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 18,
      theOffset = 198),
      theOptionalSource = "policy__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 25),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 18,
      theOffset = 198),
      theOptionalSource = "policy__x0.adb"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Satisfied
@MethodAnnotation(
  theSourceFileName = "policy__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 303),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 20,
      theOffset = 742),
      theOptionalSource = "policy__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 12,
      theOffset = 312),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 24,
      theOffset = 323),
      theOptionalSource = "policy__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 303),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 39,
      theOffset = 338),
      theOptionalSource = "policy__x0.adb"
    )
) 
{

  local
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$30 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$31 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$32 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$33 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$34 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$35 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$36 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$37 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$38 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$39 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$40 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$41 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$42 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$43 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$44 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$45 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$46 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$47 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$48 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$49 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$50 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$51 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$52 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$53 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$54 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$55 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$56 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$57 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$58 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$59 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$60 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$61 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l18. temp$60 := false;
    #l19. temp$53 := false;
      #l20. temp$46 := false;
        #l21. temp$39 := false;
          #l22. temp$32 := false;
            #l23. temp$25 := false;
              #l24. temp$18 := false;
                #l25. temp$11 := false;
                  #l26.  temp$1 := 1;
                  #l27.  temp$2 := 1;
                  #l28.  temp$3 := Policy::@@Policy_Space [temp$1] [temp$2];
                  #l29.  temp$4 := false;
                  #l30.  temp$5 := (temp$3 == temp$4);
                #l36.  if (!temp$5) then goto l39;
                  #l31.  temp$6 := 1;
                  #l32.  temp$7 := 2;
                  #l33.  temp$8 := Policy::@@Policy_Space [temp$6] [temp$7];
                  #l34.  temp$9 := true;
                  #l35.  temp$10 := (temp$8 == temp$9);
                #l37.  if (!temp$10) then goto l39;
                #l38. temp$11 := true;
                #l39.
                #l40.  temp$12 := temp$11;
              #l46.  if (!temp$12) then goto l49;
                #l41.  temp$13 := 1;
                #l42.  temp$14 := 3;
                #l43.  temp$15 := Policy::@@Policy_Space [temp$13] [temp$14];
                #l44.  temp$16 := false;
                #l45.  temp$17 := (temp$15 == temp$16);
              #l47.  if (!temp$17) then goto l49;
              #l48. temp$18 := true;
              #l49.
              #l50.  temp$19 := temp$18;
            #l56.  if (!temp$19) then goto l59;
              #l51.  temp$20 := 2;
              #l52.  temp$21 := 1;
              #l53.  temp$22 := Policy::@@Policy_Space [temp$20] [temp$21];
              #l54.  temp$23 := false;
              #l55.  temp$24 := (temp$22 == temp$23);
            #l57.  if (!temp$24) then goto l59;
            #l58. temp$25 := true;
            #l59.
            #l60.  temp$26 := temp$25;
          #l66.  if (!temp$26) then goto l69;
            #l61.  temp$27 := 2;
            #l62.  temp$28 := 2;
            #l63.  temp$29 := Policy::@@Policy_Space [temp$27] [temp$28];
            #l64.  temp$30 := false;
            #l65.  temp$31 := (temp$29 == temp$30);
          #l67.  if (!temp$31) then goto l69;
          #l68. temp$32 := true;
          #l69.
          #l70.  temp$33 := temp$32;
        #l76.  if (!temp$33) then goto l79;
          #l71.  temp$34 := 2;
          #l72.  temp$35 := 3;
          #l73.  temp$36 := Policy::@@Policy_Space [temp$34] [temp$35];
          #l74.  temp$37 := true;
          #l75.  temp$38 := (temp$36 == temp$37);
        #l77.  if (!temp$38) then goto l79;
        #l78. temp$39 := true;
        #l79.
        #l80.  temp$40 := temp$39;
      #l86.  if (!temp$40) then goto l89;
        #l81.  temp$41 := 3;
        #l82.  temp$42 := 1;
        #l83.  temp$43 := Policy::@@Policy_Space [temp$41] [temp$42];
        #l84.  temp$44 := false;
        #l85.  temp$45 := (temp$43 == temp$44);
      #l87.  if (!temp$45) then goto l89;
      #l88. temp$46 := true;
      #l89.
      #l90.  temp$47 := temp$46;
    #l96.  if (!temp$47) then goto l99;
      #l91.  temp$48 := 3;
      #l92.  temp$49 := 2;
      #l93.  temp$50 := Policy::@@Policy_Space [temp$48] [temp$49];
      #l94.  temp$51 := true;
      #l95.  temp$52 := (temp$50 == temp$51);
    #l97.  if (!temp$52) then goto l99;
    #l98. temp$53 := true;
    #l99.
    #l100.  temp$54 := temp$53;
  #l106.  if (!temp$54) then goto l109;
    #l101.  temp$55 := 3;
    #l102.  temp$56 := 3;
    #l103.  temp$57 := Policy::@@Policy_Space [temp$55] [temp$56];
    #l104.  temp$58 := false;
    #l105.  temp$59 := (temp$57 == temp$58);
  #l107.  if (!temp$59) then goto l109;
  #l108. temp$60 := true;
  #l109.
  #l110.  temp$61 := temp$60;
  #l111. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l18,
      endLabel = l111,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 13,
      theCol = 5,
      theOffset = 355),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 34,
      theOffset = 722),
      theOptionalSource = "policy__x0.adb"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$61;
}
procedure Standard::Boolean Is_Satisfied 
      (Policy::Policy_Matrix implicit__policy_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 19,
  theCol = 19,
  theOffset = 577),
  theEndCaret = 
  @Caret(
  theLine = 19,
  theCol = 31,
  theOffset = 588),
  theOptionalSource = "policy__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "policy__x0.adb",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(implicit__policy_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 303),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 20,
      theOffset = 742),
      theOptionalSource = "policy__x0.adb"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 303),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 20,
      theOffset = 742),
      theOptionalSource = "policy__x0.adb"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 303),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 20,
      theOffset = 742),
      theOptionalSource = "policy__x0.adb"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Policy
@PackageAnnotation(
  theSourceFileName = "policy__x0.ads",
  theSparkName = Policy,
  thePilarSparkName = Policy,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @List(@SymbolEntry(sparkID = "Policy_Space",pilarSparkID = Policy::@@Policy_Space,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE)),
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 13,
  theOffset = 24),
  theEndCaret = 
  @Caret(
  theLine = 20,
  theCol = 13,
  theOffset = 602),
  theOptionalSource = "policy__x0.ads"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 1,
  theOffset = 31),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 15,
  theOffset = 44),
  theOptionalSource = "policy__x0.ads"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @ContextClause(
    theOptionalWithClauses = @List(Lbl_t),
    theOptionalUseTypeClauses = @NONE
  )  ,  
  theOptionalPackageSpecificationAnnotation = 
    @PackageSpecificationAnnotation(
      theOptionalOwnStatement = @OwnStatement(
      theOwnClauses = 
        @List(@OwnClause(
          theOptionalDeclaredType = @NONE,
          theOwnVariables = 
            @List(@OwnVariable(
              varName = Policy::@@Policy_Space,
              mode = @NONE,
              ownCategory = @CONCRETE,
              theOwnVariableSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 4,
                  theCol = 11,
                  theOffset = 56),
                  theEndCaret = 
                  @Caret(
                  theLine = 4,
                  theCol = 23,
                  theOffset = 67),
                  theOptionalSource = "policy__x0.ads"
                )
            )),
          theOwnClauseSelection =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 4,
              theCol = 11,
              theOffset = 56),
              theEndCaret = 
              @Caret(
              theLine = 4,
              theCol = 23,
              theOffset = 68),
              theOptionalSource = "policy__x0.ads"
            )
        )),
      theOwnStatementSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 4,
          theCol = 7,
          theOffset = 52),
          theEndCaret = 
          @Caret(
          theLine = 4,
          theCol = 23,
          theOffset = 68),
          theOptionalSource = "policy__x0.ads"
        )
    ),
      theOptionalVarInitClause = @List(Policy::@@Policy_Space)
    ),
  theOptionalInheritClause = 
    @List(Lbl_t)
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Policy_Row
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 107),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 55,
      theOffset = 158),
      theOptionalSource = "policy__x0.ads"
    ),
    fullyQualifiedName = Policy::Policy_Row,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Boolean,
        theDiscreteSubTypes = 
          @List(`Lbl_t::Proc_Id)
      ))
{}
record Policy_Matrix
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 3,
      theOffset = 162),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 61,
      theOffset = 219),
      theOptionalSource = "policy__x0.ads"
    ),
    fullyQualifiedName = Policy::Policy_Matrix,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Policy::Policy_Row,
        theDiscreteSubTypes = 
          @List(`Lbl_t::Proc_Id)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
    global Policy::Policy_Matrix @@Policy_Space @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "Policy_Space",pilarSparkID = Policy::@@Policy_Space,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 9,
    theCol = 3,
    theOffset = 223),
    theEndCaret = 
    @Caret(
    theLine = 9,
    theCol = 15,
    theOffset = 234),
    theOptionalSource = "policy__x0.ads"
  )
  );
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Boolean Is_Allowed 
      (Lbl_t::Proc_Id Origin @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 23,
  theOffset = 277),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 29,
  theOffset = 282),
  theOptionalSource = "policy__x0.ads"
),
       Lbl_t::Proc_Id Dest @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 49,
  theOffset = 303),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 53,
  theOffset = 306),
  theOptionalSource = "policy__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "policy__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Origin,
            Dest)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Policy::@@Policy_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 13,
              theCol = 19,
              theOffset = 383),
              theEndCaret = 
              @Caret(
              theLine = 13,
              theCol = 31,
              theOffset = 394),
              theOptionalSource = "policy__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 13,
          theCol = 9,
          theOffset = 373),
          theEndCaret = 
          @Caret(
          theLine = 13,
          theCol = 32,
          theOffset = 395),
          theOptionalSource = "policy__x0.ads"
        ),
      theOptionalInGlobals = @List(Policy::@@Policy_Space),
      theOptionalReturnAnnotation = 
        @NONE
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 257),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 38,
      theOffset = 363),
      theOptionalSource = "policy__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 12,
      theOffset = 266),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 22,
      theOffset = 275),
      theOptionalSource = "policy__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 257),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 37,
      theOffset = 362),
      theOptionalSource = "policy__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Allowed 
      (Lbl_t::Proc_Id Origin @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 23,
  theOffset = 277),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 29,
  theOffset = 282),
  theOptionalSource = "policy__x0.ads"
),
       Lbl_t::Proc_Id Dest @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 49,
  theOffset = 303),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 53,
  theOffset = 306),
  theOptionalSource = "policy__x0.ads"
),
       Policy::Policy_Matrix implicit__policy_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 13,
  theCol = 19,
  theOffset = 383),
  theEndCaret = 
  @Caret(
  theLine = 13,
  theCol = 31,
  theOffset = 394),
  theOptionalSource = "policy__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "policy__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Origin,
            Dest,
            implicit__policy_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 257),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 38,
      theOffset = 363),
      theOptionalSource = "policy__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 257),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 38,
      theOffset = 363),
      theOptionalSource = "policy__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 257),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 38,
      theOffset = 363),
      theOptionalSource = "policy__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Satisfied
@MethodAnnotation(
  theSourceFileName = "policy__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = Policy::@@Policy_Space,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 19,
              theCol = 19,
              theOffset = 577),
              theEndCaret = 
              @Caret(
              theLine = 19,
              theCol = 31,
              theOffset = 588),
              theOptionalSource = "policy__x0.ads"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 19,
          theCol = 9,
          theOffset = 567),
          theEndCaret = 
          @Caret(
          theLine = 19,
          theCol = 32,
          theOffset = 589),
          theOptionalSource = "policy__x0.ads"
        ),
      theOptionalInGlobals = @List(Policy::@@Policy_Space),
      theOptionalReturnAnnotation = 
        @NONE
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 499),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 38,
      theOffset = 557),
      theOptionalSource = "policy__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 12,
      theOffset = 508),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 24,
      theOffset = 519),
      theOptionalSource = "policy__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 499),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 37,
      theOffset = 556),
      theOptionalSource = "policy__x0.ads"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Is_Satisfied 
      (Policy::Policy_Matrix implicit__policy_space @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 19,
  theCol = 19,
  theOffset = 577),
  theEndCaret = 
  @Caret(
  theLine = 19,
  theCol = 31,
  theOffset = 588),
  theOptionalSource = "policy__x0.ads"
))
@MethodAnnotation(
  theSourceFileName = "policy__x0.ads",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(implicit__policy_space)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 499),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 38,
      theOffset = 557),
      theOptionalSource = "policy__x0.ads"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 499),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 38,
      theOffset = 557),
      theOptionalSource = "policy__x0.ads"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 499),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 38,
      theOffset = 557),
      theOptionalSource = "policy__x0.ads"
    )
) 
{ #locret. return;}