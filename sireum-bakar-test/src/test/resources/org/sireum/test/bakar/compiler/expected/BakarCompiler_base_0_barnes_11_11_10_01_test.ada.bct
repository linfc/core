@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package The_Stack
@PackageAnnotation(
  theSourceFileName = "test.ada",
  theSparkName = The_Stack,
  thePilarSparkName = The_Stack,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @List(@SymbolEntry(sparkID = "S",pilarSparkID = The_Stack::@@S,originTag = @PACKAGE_BODY,kindTag = @CONCRETE_VARIABLE),
      @SymbolEntry(sparkID = "Pointer",pilarSparkID = The_Stack::@@Pointer,originTag = @PACKAGE_BODY,kindTag = @CONCRETE_VARIABLE)),
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 25,
  theCol = 1,
  theOffset = 694),
  theEndCaret = 
  @Caret(
  theLine = 64,
  theCol = 15,
  theOffset = 1797),
  theOptionalSource = "test.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 25,
  theCol = 1,
  theOffset = 694),
  theEndCaret = 
  @Caret(
  theLine = 25,
  theCol = 23,
  theOffset = 715),
  theOptionalSource = "test.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @RefinementDefinition(
      theRefinementClauses = 
        @List(@RefinementClause(
          theSubject = The_Stack::@@$State,
          theSubjectSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 26,
              theCol = 9,
              theOffset = 726),
              theEndCaret = 
              @Caret(
              theLine = 26,
              theCol = 14,
              theOffset = 730),
              theOptionalSource = "test.ada"
            ),
          theConstituents = 
            @List(@RefinementConstituent(
              theMode = @NONE,
              theConstituent = The_Stack::@@S,
              theRefinementConstituentSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 26,
                  theCol = 18,
                  theOffset = 735),
                  theEndCaret = 
                  @Caret(
                  theLine = 26,
                  theCol = 19,
                  theOffset = 735),
                  theOptionalSource = "test.ada"
                )
            ),
                  @RefinementConstituent(
              theMode = @NONE,
              theConstituent = The_Stack::@@Pointer,
              theRefinementConstituentSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 26,
                  theCol = 21,
                  theOffset = 738),
                  theEndCaret = 
                  @Caret(
                  theLine = 26,
                  theCol = 28,
                  theOffset = 744),
                  theOptionalSource = "test.ada"
                )
            )),
          theRefinementClauseSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 26,
              theCol = 9,
              theOffset = 726),
              theEndCaret = 
              @Caret(
              theLine = 26,
              theCol = 28,
              theOffset = 744),
              theOptionalSource = "test.ada"
            )
        )),
      theRefinementDefinitionSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 26,
          theCol = 5,
          theOffset = 722),
          theEndCaret = 
          @Caret(
          theLine = 26,
          theCol = 29,
          theOffset = 745),
          theOptionalSource = "test.ada"
        )
    )
));

const $Const {
  Stack_Size = (Standard::Integer) (100) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_BODY,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 28,
        theCol = 4,
        theOffset = 781),
        theEndCaret = 
        @Caret(
        theLine = 28,
        theCol = 14,
        theOffset = 790),
        theOptionalSource = "test.ada"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Pointer_Range
  @FullTypeDeclaration(
    origin = @PACKAGE_BODY,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 29,
      theCol = 4,
      theOffset = 815),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 48,
      theOffset = 858),
      theOptionalSource = "test.ada"
    ),
    fullyQualifiedName = The_Stack::Pointer_Range,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = 0,
        theHighRangeExp = The_Stack::$Const.Stack_Size))
{}
record Index_Range
  @SubTypeDeclaration(
    origin = @PACKAGE_BODY,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 4,
      theOffset = 864),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 61,
      theOffset = 920),
      theOptionalSource = "test.ada"
    ),
    fullyQualifiedName = The_Stack::Index_Range,
    type = `The_Stack::Pointer_Range,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = The_Stack::$Const.Stack_Size,
        lowerBound = 1)))
{}
record Vector
  @FullTypeDeclaration(
    origin = @PACKAGE_BODY,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 31,
      theCol = 4,
      theOffset = 926),
      theEndCaret = 
      @Caret(
      theLine = 31,
      theCol = 49,
      theOffset = 970),
      theOptionalSource = "test.ada"
    ),
    fullyQualifiedName = The_Stack::Vector,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Integer,
        theDiscreteSubTypes = 
          @List(`The_Stack::Index_Range)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
    global The_Stack::Vector @@S @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "S",pilarSparkID = The_Stack::@@S,originTag = @PACKAGE_BODY,kindTag = @CONCRETE_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 32,
    theCol = 4,
    theOffset = 976),
    theEndCaret = 
    @Caret(
    theLine = 32,
    theCol = 5,
    theOffset = 976),
    theOptionalSource = "test.ada"
  )
  );
    global The_Stack::Pointer_Range @@Pointer @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "Pointer",pilarSparkID = The_Stack::@@Pointer,originTag = @PACKAGE_BODY,kindTag = @CONCRETE_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 33,
    theCol = 4,
    theOffset = 992),
    theEndCaret = 
    @Caret(
    theLine = 33,
    theCol = 11,
    theOffset = 998),
    theOptionalSource = "test.ada"
  )
  );
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure $$binit
 
{

  local
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := 0;
  #l2. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l2,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 62,
      theCol = 4,
      theOffset = 1733),
      theEndCaret = 
      @Caret(
      theLine = 62,
      theCol = 17,
      theOffset = 1745),
      theOptionalSource = "test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  The_Stack::@@Pointer := temp$1;
  #l3. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l3,
      endLabel = l3,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 63,
      theCol = 4,
      theOffset = 1751),
      theEndCaret = 
      @Caret(
      theLine = 63,
      theCol = 35,
      theOffset = 1781),
      theOptionalSource = "test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  The_Stack::@@S := `The_Stack::Vector (
     
    {
      The_Stack::Index_Range iter1 => 
        switch iter1 
            | ($First(`The_Stack::Index_Range), $Last(`The_Stack::Index_Range)) => (
                0
              )
    | => ($I_THOUGHT_PILAR_SWITCH_STATEMENTS_DID_NOT_NEED_A_DEFAULT_ANYMORE__PLEASE_FIX_ME())
    }
  );
  #locret. return;
}
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Push 
      (Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 19,
  theOffset = 1038),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 20,
  theOffset = 1038),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(X),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = (The_Stack::@@Pointer < The_Stack::$Const.Stack_Size),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 39,
          theCol = 8,
          theOffset = 1179),
          theEndCaret = 
          @Caret(
          theLine = 39,
          theCol = 33,
          theOffset = 1203),
          theOptionalSource = "test.ada"
        )
        ),
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = The_Stack::@@S,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 36,
              theCol = 22,
              theOffset = 1076),
              theEndCaret = 
              @Caret(
              theLine = 36,
              theCol = 23,
              theOffset = 1076),
              theOptionalSource = "test.ada"
            )
        ),
              @AnnotationVariable(
          id = The_Stack::@@Pointer,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 36,
              theCol = 25,
              theOffset = 1079),
              theEndCaret = 
              @Caret(
              theLine = 36,
              theCol = 32,
              theOffset = 1085),
              theOptionalSource = "test.ada"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 36,
          theCol = 8,
          theOffset = 1062),
          theEndCaret = 
          @Caret(
          theLine = 36,
          theCol = 33,
          theOffset = 1086),
          theOptionalSource = "test.ada"
        ),
      theOptionalInGlobals = @List(The_Stack::@@S,
            The_Stack::@@Pointer),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $AND((The_Stack::@@Pointer == (($OLD(The_Stack::@@Pointer)) + 1)),(The_Stack::@@S == $ARRAY_UPDATE (($OLD(The_Stack::@@S)), `{The_Stack::@@Pointer -> X}) )),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 40,
          theCol = 8,
          theOffset = 1213),
          theEndCaret = 
          @Caret(
          theLine = 41,
          theCol = 34,
          theOffset = 1278),
          theOptionalSource = "test.ada"
        )
        ),
      theOptionalOutGlobals = @List(The_Stack::@@S,
          The_Stack::@@Pointer),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = The_Stack::@@S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 16,
                          theOffset = 1104),
                          theEndCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 17,
                          theOffset = 1104),
                          theOptionalSource = "test.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = The_Stack::@@S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 29,
                          theOffset = 1117),
                          theEndCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 30,
                          theOffset = 1117),
                          theOptionalSource = "test.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = The_Stack::@@Pointer,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 32,
                          theOffset = 1120),
                          theEndCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 39,
                          theOffset = 1126),
                          theOptionalSource = "test.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = X,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 41,
                          theOffset = 1129),
                          theEndCaret = 
                          @Caret(
                          theLine = 37,
                          theCol = 42,
                          theOffset = 1129),
                          theOptionalSource = "test.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 37,
                  theCol = 16,
                  theOffset = 1104),
                  theEndCaret = 
                  @Caret(
                  theLine = 37,
                  theCol = 42,
                  theOffset = 1129),
                  theOptionalSource = "test.ada"
                )
            )  ,
                  @DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = The_Stack::@@Pointer,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 38,
                          theCol = 16,
                          theOffset = 1149),
                          theEndCaret = 
                          @Caret(
                          theLine = 38,
                          theCol = 23,
                          theOffset = 1155),
                          theOptionalSource = "test.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = The_Stack::@@Pointer,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 38,
                          theCol = 29,
                          theOffset = 1162),
                          theEndCaret = 
                          @Caret(
                          theLine = 38,
                          theCol = 36,
                          theOffset = 1168),
                          theOptionalSource = "test.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 38,
                  theCol = 16,
                  theOffset = 1149),
                  theEndCaret = 
                  @Caret(
                  theLine = 38,
                  theCol = 36,
                  theOffset = 1168),
                  theOptionalSource = "test.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 37,
              theCol = 8,
              theOffset = 1096),
              theEndCaret = 
              @Caret(
              theLine = 38,
              theCol = 37,
              theOffset = 1169),
              theOptionalSource = "test.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 1023),
      theEndCaret = 
      @Caret(
      theLine = 46,
      theCol = 13,
      theOffset = 1364),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 14,
      theOffset = 1033),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 18,
      theOffset = 1036),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 4,
      theOffset = 1023),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 34,
      theOffset = 1052),
      theOptionalSource = "test.ada"
    )
) 
{

  local
    The_Stack::Pointer_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    The_Stack::Pointer_Range temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    The_Stack::Pointer_Range temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l4.  temp$1 := The_Stack::@@Pointer;
  #l5.  temp$2 := 1;
  #l6.  temp$3 := (temp$1 + temp$2);
  #l7. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l4,
      endLabel = l7,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 7,
      theOffset = 1304),
      theEndCaret = 
      @Caret(
      theLine = 44,
      theCol = 30,
      theOffset = 1326),
      theOptionalSource = "test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  The_Stack::@@Pointer := temp$3;
  #l8.  temp$4 := The_Stack::@@Pointer;
  #l9.  temp$5 := X;
  #l10. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l8,
      endLabel = l10,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 45,
      theCol = 7,
      theOffset = 1335),
      theEndCaret = 
      @Caret(
      theLine = 45,
      theCol = 23,
      theOffset = 1350),
      theOptionalSource = "test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  The_Stack::@@S [temp$4] := temp$5;
  #l11.  return;
}
procedure Pop 
      (Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 48,
  theCol = 18,
  theOffset = 1386),
  theEndCaret = 
  @Caret(
  theLine = 48,
  theCol = 19,
  theOffset = 1386),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @NONE,
      theOptionalOutParameters = @List(X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = (The_Stack::@@Pointer != 0),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 52,
          theCol = 8,
          theOffset = 1528),
          theEndCaret = 
          @Caret(
          theLine = 52,
          theCol = 25,
          theOffset = 1544),
          theOptionalSource = "test.ada"
        )
        ),
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = The_Stack::@@S,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 49,
              theCol = 18,
              theOffset = 1421),
              theEndCaret = 
              @Caret(
              theLine = 49,
              theCol = 19,
              theOffset = 1421),
              theOptionalSource = "test.ada"
            )
        ),
              @AnnotationVariable(
          id = The_Stack::@@Pointer,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 49,
              theCol = 28,
              theOffset = 1431),
              theEndCaret = 
              @Caret(
              theLine = 49,
              theCol = 35,
              theOffset = 1437),
              theOptionalSource = "test.ada"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 49,
          theCol = 8,
          theOffset = 1411),
          theEndCaret = 
          @Caret(
          theLine = 49,
          theCol = 36,
          theOffset = 1438),
          theOptionalSource = "test.ada"
        ),
      theOptionalInGlobals = @List(The_Stack::@@S,
            The_Stack::@@Pointer),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $AND((The_Stack::@@Pointer == (($OLD(The_Stack::@@Pointer)) - 1)),(X == The_Stack::@@S [($OLD(The_Stack::@@Pointer))])),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 53,
          theCol = 8,
          theOffset = 1554),
          theEndCaret = 
          @Caret(
          theLine = 54,
          theCol = 29,
          theOffset = 1614),
          theOptionalSource = "test.ada"
        )
        ),
      theOptionalOutGlobals = @List(The_Stack::@@Pointer),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = The_Stack::@@Pointer,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 50,
                          theCol = 16,
                          theOffset = 1456),
                          theEndCaret = 
                          @Caret(
                          theLine = 50,
                          theCol = 23,
                          theOffset = 1462),
                          theOptionalSource = "test.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = The_Stack::@@Pointer,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 50,
                          theCol = 29,
                          theOffset = 1469),
                          theEndCaret = 
                          @Caret(
                          theLine = 50,
                          theCol = 36,
                          theOffset = 1475),
                          theOptionalSource = "test.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 50,
                  theCol = 16,
                  theOffset = 1456),
                  theEndCaret = 
                  @Caret(
                  theLine = 50,
                  theCol = 36,
                  theOffset = 1475),
                  theOptionalSource = "test.ada"
                )
            )  ,
                  @DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = X,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 51,
                          theCol = 16,
                          theOffset = 1495),
                          theEndCaret = 
                          @Caret(
                          theLine = 51,
                          theCol = 17,
                          theOffset = 1495),
                          theOptionalSource = "test.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = The_Stack::@@S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 51,
                          theCol = 29,
                          theOffset = 1508),
                          theEndCaret = 
                          @Caret(
                          theLine = 51,
                          theCol = 30,
                          theOffset = 1508),
                          theOptionalSource = "test.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = The_Stack::@@Pointer,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 51,
                          theCol = 32,
                          theOffset = 1511),
                          theEndCaret = 
                          @Caret(
                          theLine = 51,
                          theCol = 39,
                          theOffset = 1517),
                          theOptionalSource = "test.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 51,
                  theCol = 16,
                  theOffset = 1495),
                  theEndCaret = 
                  @Caret(
                  theLine = 51,
                  theCol = 39,
                  theOffset = 1517),
                  theOptionalSource = "test.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 50,
              theCol = 8,
              theOffset = 1448),
              theEndCaret = 
              @Caret(
              theLine = 51,
              theCol = 40,
              theOffset = 1518),
              theOptionalSource = "test.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 4,
      theOffset = 1372),
      theEndCaret = 
      @Caret(
      theLine = 59,
      theCol = 12,
      theOffset = 1699),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 14,
      theOffset = 1382),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 17,
      theOffset = 1384),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 48,
      theCol = 4,
      theOffset = 1372),
      theEndCaret = 
      @Caret(
      theLine = 48,
      theCol = 34,
      theOffset = 1401),
      theOptionalSource = "test.ada"
    )
) 
{

  local
    The_Stack::Pointer_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    The_Stack::Pointer_Range temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    The_Stack::Pointer_Range temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l12.  temp$1 := The_Stack::@@Pointer;
  #l13.  temp$2 := The_Stack::@@S [temp$1];
  #l14. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l12,
      endLabel = l14,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 57,
      theCol = 7,
      theOffset = 1640),
      theEndCaret = 
      @Caret(
      theLine = 57,
      theCol = 23,
      theOffset = 1655),
      theOptionalSource = "test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  X := temp$2;
  #l15.  temp$3 := The_Stack::@@Pointer;
  #l16.  temp$4 := 1;
  #l17.  temp$5 := (temp$3 - temp$4);
  #l18. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l15,
      endLabel = l18,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 58,
      theCol = 7,
      theOffset = 1664),
      theEndCaret = 
      @Caret(
      theLine = 58,
      theCol = 30,
      theOffset = 1686),
      theOptionalSource = "test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  The_Stack::@@Pointer := temp$5;
  #l19.  return;
}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package The_Stack
@PackageAnnotation(
  theSourceFileName = "test.ada",
  theSparkName = The_Stack,
  thePilarSparkName = The_Stack,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @List(@SymbolEntry(sparkID = "State",pilarSparkID = The_Stack::@@$State,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @ABSTRACT_VARIABLE)),
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 23,
  theCol = 15,
  theOffset = 689),
  theOptionalSource = "test.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 18,
  theOffset = 16),
  theOptionalSource = "test.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @PackageSpecificationAnnotation(
      theOptionalOwnStatement = @OwnStatement(
      theOwnClauses = 
        @List(@OwnClause(
          theOptionalDeclaredType = The_Stack::Stack_Type,
          theOwnVariables = 
            @List(@OwnVariable(
              varName = The_Stack::@@$State,
              mode = @NONE,
              ownCategory = @ABSTRACT,
              theOwnVariableSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 2,
                  theCol = 9,
                  theOffset = 27),
                  theEndCaret = 
                  @Caret(
                  theLine = 2,
                  theCol = 14,
                  theOffset = 31),
                  theOptionalSource = "test.ada"
                )
            )),
          theOwnClauseSelection =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 2,
              theCol = 9,
              theOffset = 27),
              theEndCaret = 
              @Caret(
              theLine = 2,
              theCol = 27,
              theOffset = 45),
              theOptionalSource = "test.ada"
            )
        )),
      theOwnStatementSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 2,
          theCol = 5,
          theOffset = 23),
          theEndCaret = 
          @Caret(
          theLine = 2,
          theCol = 27,
          theOffset = 45),
          theOptionalSource = "test.ada"
        )
    ),
      theOptionalVarInitClause = @List(The_Stack::@@$State)
    ),
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Stack_Type
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 8,
      theOffset = 106),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 36,
      theOffset = 133),
      theOptionalSource = "test.ada"
    ),
    fullyQualifiedName = The_Stack::Stack_Type,
    typeDefinition = 
      @AbstractTypeDefinition)
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
    global The_Stack::Stack_Type @@$State @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "State",pilarSparkID = The_Stack::@@$State,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @ABSTRACT_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 2,
    theCol = 9,
    theOffset = 27),
    theEndCaret = 
    @Caret(
    theLine = 2,
    theCol = 14,
    theOffset = 31),
    theOptionalSource = "test.ada"
  )
  );
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Boolean Not_Full 
      (The_Stack::Stack_Type S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 7,
  theCol = 26,
  theOffset = 163),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 27,
  theOffset = 163),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = false
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 8,
      theOffset = 145),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 57,
      theOffset = 193),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 8,
      theOffset = 145),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 57,
      theOffset = 193),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 8,
      theOffset = 145),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 57,
      theOffset = 193),
      theOptionalSource = "test.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Not_Empty 
      (The_Stack::Stack_Type S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 8,
  theCol = 27,
  theOffset = 222),
  theEndCaret = 
  @Caret(
  theLine = 8,
  theCol = 28,
  theOffset = 222),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = false
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 8,
      theOffset = 203),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 58,
      theOffset = 252),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 8,
      theOffset = 203),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 58,
      theOffset = 252),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 8,
      theCol = 8,
      theOffset = 203),
      theEndCaret = 
      @Caret(
      theLine = 8,
      theCol = 58,
      theOffset = 252),
      theOptionalSource = "test.ada"
    )
) 
{ #locret. return;}
procedure The_Stack::Stack_Type Append 
      (The_Stack::Stack_Type S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 24,
  theOffset = 278),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 25,
  theOffset = 278),
  theOptionalSource = "test.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 40,
  theOffset = 294),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 41,
  theOffset = 294),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(S,
            X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = false
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 8,
      theOffset = 262),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 71,
      theOffset = 324),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 8,
      theOffset = 262),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 71,
      theOffset = 324),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 8,
      theOffset = 262),
      theEndCaret = 
      @Caret(
      theLine = 9,
      theCol = 71,
      theOffset = 324),
      theOptionalSource = "test.ada"
    )
) 
{ #locret. return;}
procedure Push 
      (Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 19,
  theOffset = 347),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 20,
  theOffset = 347),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(X),
      theOptionalOutParameters = @NONE
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = The_Stack::Not_Full (The_Stack::@@$State),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 14,
          theCol = 8,
          theOffset = 438),
          theEndCaret = 
          @Caret(
          theLine = 14,
          theCol = 28,
          theOffset = 457),
          theOptionalSource = "test.ada"
        )
        ),
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = The_Stack::@@$State,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 12,
              theCol = 22,
              theOffset = 386),
              theEndCaret = 
              @Caret(
              theLine = 12,
              theCol = 27,
              theOffset = 390),
              theOptionalSource = "test.ada"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 12,
          theCol = 8,
          theOffset = 372),
          theEndCaret = 
          @Caret(
          theLine = 12,
          theCol = 28,
          theOffset = 391),
          theOptionalSource = "test.ada"
        ),
      theOptionalInGlobals = @List(The_Stack::@@$State),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (The_Stack::@@$State == The_Stack::Append (($OLD(The_Stack::@@$State)), X)),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 15,
          theCol = 8,
          theOffset = 467),
          theEndCaret = 
          @Caret(
          theLine = 15,
          theCol = 39,
          theOffset = 497),
          theOptionalSource = "test.ada"
        )
        ),
      theOptionalOutGlobals = @List(The_Stack::@@$State),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = The_Stack::@@$State,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 16,
                          theOffset = 409),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 21,
                          theOffset = 413),
                          theOptionalSource = "test.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = The_Stack::@@$State,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 27,
                          theOffset = 420),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 32,
                          theOffset = 424),
                          theOptionalSource = "test.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = X,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 34,
                          theOffset = 427),
                          theEndCaret = 
                          @Caret(
                          theLine = 13,
                          theCol = 35,
                          theOffset = 427),
                          theOptionalSource = "test.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 13,
                  theCol = 16,
                  theOffset = 409),
                  theEndCaret = 
                  @Caret(
                  theLine = 13,
                  theCol = 35,
                  theOffset = 427),
                  theOptionalSource = "test.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 13,
              theCol = 8,
              theOffset = 401),
              theEndCaret = 
              @Caret(
              theLine = 13,
              theCol = 36,
              theOffset = 428),
              theOptionalSource = "test.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 4,
      theOffset = 332),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 35,
      theOffset = 362),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 14,
      theOffset = 342),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 18,
      theOffset = 345),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 4,
      theOffset = 332),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 34,
      theOffset = 361),
      theOptionalSource = "test.ada"
    )
) 
{ #locret. return;}
procedure Pop 
      (Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 17,
  theCol = 18,
  theOffset = 519),
  theEndCaret = 
  @Caret(
  theLine = 17,
  theCol = 19,
  theOffset = 519),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @NONE,
      theOptionalOutParameters = @List(X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = The_Stack::Not_Empty (The_Stack::@@$State),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 20,
          theCol = 8,
          theOffset = 611),
          theEndCaret = 
          @Caret(
          theLine = 20,
          theCol = 29,
          theOffset = 631),
          theOptionalSource = "test.ada"
        )
        ),
      theOptionalGlobalDefinitions = 
        @List(@AnnotationVariable(
          id = The_Stack::@@$State,
          loc =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 18,
              theCol = 22,
              theOffset = 559),
              theEndCaret = 
              @Caret(
              theLine = 18,
              theCol = 27,
              theOffset = 563),
              theOptionalSource = "test.ada"
            )
        )),
      theOptionalGlobalDefinitionsSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 18,
          theCol = 8,
          theOffset = 545),
          theEndCaret = 
          @Caret(
          theLine = 18,
          theCol = 28,
          theOffset = 564),
          theOptionalSource = "test.ada"
        ),
      theOptionalInGlobals = @List(The_Stack::@@$State),
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = (($OLD(The_Stack::@@$State)) == The_Stack::Append (The_Stack::@@$State, X)),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 21,
          theCol = 8,
          theOffset = 641),
          theEndCaret = 
          @Caret(
          theLine = 21,
          theCol = 39,
          theOffset = 671),
          theOptionalSource = "test.ada"
        )
        ),
      theOptionalOutGlobals = @List(The_Stack::@@$State),
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = The_Stack::@@$State,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 19,
                          theCol = 16,
                          theOffset = 582),
                          theEndCaret = 
                          @Caret(
                          theLine = 19,
                          theCol = 21,
                          theOffset = 586),
                          theOptionalSource = "test.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = The_Stack::@@$State,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 19,
                          theCol = 30,
                          theOffset = 596),
                          theEndCaret = 
                          @Caret(
                          theLine = 19,
                          theCol = 35,
                          theOffset = 600),
                          theOptionalSource = "test.ada"
                        )
                    ))
                ),
                      @DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = X,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 19,
                          theCol = 23,
                          theOffset = 589),
                          theEndCaret = 
                          @Caret(
                          theLine = 19,
                          theCol = 24,
                          theOffset = 589),
                          theOptionalSource = "test.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = The_Stack::@@$State,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 19,
                          theCol = 30,
                          theOffset = 596),
                          theEndCaret = 
                          @Caret(
                          theLine = 19,
                          theCol = 35,
                          theOffset = 600),
                          theOptionalSource = "test.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 19,
                  theCol = 16,
                  theOffset = 582),
                  theEndCaret = 
                  @Caret(
                  theLine = 19,
                  theCol = 35,
                  theOffset = 600),
                  theOptionalSource = "test.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 19,
              theCol = 8,
              theOffset = 574),
              theEndCaret = 
              @Caret(
              theLine = 19,
              theCol = 36,
              theOffset = 601),
              theOptionalSource = "test.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 4,
      theOffset = 505),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 35,
      theOffset = 535),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 14,
      theOffset = 515),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 17,
      theOffset = 517),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 4,
      theOffset = 505),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 34,
      theOffset = 534),
      theOptionalSource = "test.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/