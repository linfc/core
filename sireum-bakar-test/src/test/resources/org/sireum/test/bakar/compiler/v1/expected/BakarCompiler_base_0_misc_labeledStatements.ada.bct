@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Labeled_Statements
@PackageAnnotation(
  theSourceFileName = "labeledStatements.ada",
  theSparkName = Labeled_Statements,
  thePilarSparkName = Labeled_Statements,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 24,
  theOffset = 159),
  theOptionalSource = "labeledStatements.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 27,
  theOffset = 25),
  theOptionalSource = "labeledStatements.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Index_Range
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 4,
      theOffset = 33),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 48,
      theOffset = 76),
      theOptionalSource = "labeledStatements.ada"
    ),
    fullyQualifiedName = Labeled_Statements::Index_Range,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = 100,
        lowerBound = 1)))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Integer Stupid 
      (Labeled_Statements::Index_Range Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 20,
  theOffset = 103),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 21,
  theOffset = 103),
  theOptionalSource = "labeledStatements.ada"
))
@MethodAnnotation(
  theSourceFileName = "labeledStatements.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 87),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 52,
      theOffset = 134),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 13,
      theOffset = 96),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 19,
      theOffset = 101),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 87),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 51,
      theOffset = 133),
      theOptionalSource = "labeledStatements.ada"
    )
) 
{ #locret. return;}
procedure Standard::Integer Stupid 
      (Labeled_Statements::Index_Range Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 20,
  theOffset = 103),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 21,
  theOffset = 103),
  theOptionalSource = "labeledStatements.ada"
))
@MethodAnnotation(
  theSourceFileName = "labeledStatements.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 87),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 52,
      theOffset = 134),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 87),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 52,
      theOffset = 134),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 87),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 52,
      theOffset = 134),
      theOptionalSource = "labeledStatements.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Labeled_Statements
@PackageAnnotation(
  theSourceFileName = "labeledStatements.ada",
  theSparkName = Labeled_Statements,
  thePilarSparkName = Labeled_Statements,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 1,
  theOffset = 162),
  theEndCaret = 
  @Caret(
  theLine = 65,
  theCol = 25,
  theOffset = 1312),
  theOptionalSource = "labeledStatements.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 1,
  theOffset = 162),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 32,
  theOffset = 192),
  theOptionalSource = "labeledStatements.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure P 
      (Standard::Integer I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 17,
  theOffset = 214),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 18,
  theOffset = 214),
  theOptionalSource = "labeledStatements.ada"
),
       Standard::Integer J @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 20,
  theOffset = 217),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 21,
  theOffset = 217),
  theOptionalSource = "labeledStatements.ada"
),
       Standard::Boolean Ret @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 33,
  theOffset = 230),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 36,
  theOffset = 232),
  theOptionalSource = "labeledStatements.ada"
))
@MethodAnnotation(
  theSourceFileName = "labeledStatements.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(I,
            J),
      theOptionalOutParameters = @List(Ret)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Ret,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 18,
                          theOffset = 266),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 21,
                          theOffset = 268),
                          theOptionalSource = "labeledStatements.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = I,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 27,
                          theOffset = 275),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 28,
                          theOffset = 275),
                          theOptionalSource = "labeledStatements.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = J,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 30,
                          theOffset = 278),
                          theEndCaret = 
                          @Caret(
                          theLine = 12,
                          theCol = 31,
                          theOffset = 278),
                          theOptionalSource = "labeledStatements.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 12,
                  theCol = 18,
                  theOffset = 266),
                  theEndCaret = 
                  @Caret(
                  theLine = 12,
                  theCol = 31,
                  theOffset = 278),
                  theOptionalSource = "labeledStatements.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 12,
              theCol = 10,
              theOffset = 258),
              theEndCaret = 
              @Caret(
              theLine = 12,
              theCol = 32,
              theOffset = 279),
              theOptionalSource = "labeledStatements.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 4,
      theOffset = 201),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 10,
      theOffset = 386),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 14,
      theOffset = 211),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 15,
      theOffset = 211),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 4,
      theOffset = 201),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 51,
      theOffset = 247),
      theOptionalSource = "labeledStatements.ada"
    )
) 
{

  local
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := I;
  #l2.  temp$2 := J;
  #l3.  temp$3 := (temp$1 > temp$2);
  #l4.  if !(temp$3) then goto l5; 
  #l6.  temp$4 := true;
  #l7. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l6,
      endLabel = l7,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 15,
      theCol = 8,
      theOffset = 320),
      theEndCaret = 
      @Caret(
      theLine = 15,
      theCol = 20,
      theOffset = 331),
      theOptionalSource = "labeledStatements.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Ret := temp$4;
  #l8.  goto l11;
  #l5. 
  #l9.  temp$5 := false;
  #l10. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l9,
      endLabel = l10,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 8,
      theOffset = 351),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 21,
      theOffset = 363),
      theOptionalSource = "labeledStatements.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Ret := temp$5;
  #l11. <@IfStatementAnnotation(
    ifPart = @Mark(
    startLabel = l1,
    endLabel = l4,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 14,
    theCol = 6,
    theOffset = 299),
    theEndCaret = 
    @Caret(
    theLine = 14,
    theCol = 14,
    theOffset = 306),
    theOptionalSource = "labeledStatements.ada"
  )
  ),
    thenPart= @MARK_PLACEHOLDER,
    optElsIfParts = @NONE,
    optElsePart = @MARK_PLACEHOLDER,
      mark = @Mark(
      startLabel = l1,
      endLabel = l11,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 6,
      theOffset = 299),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 13,
      theOffset = 376),
      theOptionalSource = "labeledStatements.ada"
    )
    ),
      optSparkLabelList = @NONE  
  )> 
  #l12.  return;
}
procedure Standard::Integer Stupid 
      (Labeled_Statements::Index_Range Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 20,
  theOffset = 411),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 21,
  theOffset = 411),
  theOptionalSource = "labeledStatements.ada"
))
@MethodAnnotation(
  theSourceFileName = "labeledStatements.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 4,
      theOffset = 395),
      theEndCaret = 
      @Caret(
      theLine = 63,
      theCol = 15,
      theOffset = 1283),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 13,
      theOffset = 404),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 19,
      theOffset = 409),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 4,
      theOffset = 395),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 51,
      theOffset = 441),
      theOptionalSource = "labeledStatements.ada"
    )
) 
{

  local
    Standard::Integer J @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 6,
      theOffset = 455),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 7,
      theOffset = 455),
      theOptionalSource = "labeledStatements.ada"
    )
    );
    Standard::Boolean B @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 24,
      theCol = 6,
      theOffset = 473),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 7,
      theOffset = 473),
      theOptionalSource = "labeledStatements.ada"
    )
    );
    Labeled_Statements::Index_Range I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Labeled_Statements::Index_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Labeled_Statements::Index_Range temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Labeled_Statements::Index_Range temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Labeled_Statements::Index_Range temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Labeled_Statements::Index_Range temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    #l15.  temp$1 := $First(`Labeled_Statements::Index_Range);
    #l16.  temp$2 := $Last(`Labeled_Statements::Index_Range);
    #l17.  if (temp$1 > temp$2) then goto l14;
    #l18.  I := temp$1;
    #l13. 
    #l19.  temp$3 := 0;
    #l20. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l19,
        endLabel = l20,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 31,
        theCol = 8,
        theOffset = 595),
        theEndCaret = 
        @Caret(
        theLine = 31,
        theCol = 15,
        theOffset = 601),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @List("jInit") 
    )>  J := temp$3;
    #l21. 
    #l22.  temp$4 := J;
    #l23.  temp$5 := Z;
    #l24.  temp$6 := (temp$4 < temp$5);
    #l26.  if !temp$6 then goto l25;
    #l27.  temp$7 := J;
    #l28.  temp$8 := 1;
    #l29.  temp$9 := (temp$7 + temp$8);
    #l30. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l27,
        endLabel = l30,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 36,
        theCol = 10,
        theOffset = 733),
        theEndCaret = 
        @Caret(
        theLine = 36,
        theCol = 21,
        theOffset = 743),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @List("jInc",
            "c") 
    )>  J := temp$9;
    #l31.  temp$10 := I;
    #l32.  temp$11 := J;
    #l33.  temp$12 := B;
    #l35. <@ProcedureCallStatementAnnotation(
      optCopyBackPart = @Mark(
      startLabel = l34,
      endLabel = l34,
      optRS = @NONE
    ),
        mark = @Mark(
        startLabel = l31,
        endLabel = l35,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 39,
        theCol = 10,
        theOffset = 786),
        theEndCaret = 
        @Caret(
        theLine = 39,
        theCol = 21,
        theOffset = 796),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @List("procCall")
    )>  call  Labeled_Statements::P (temp$10, temp$11, temp$12);
    #l34. <@CopyBackStatementAnnotation(
        mark = @Mark(
        startLabel = l34,
        endLabel = l34,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 39,
        theCol = 18,
        theOffset = 794),
        theEndCaret = 
        @Caret(
        theLine = 39,
        theCol = 19,
        theOffset = 794),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  B := temp$12;
    #l36.  temp$13 := B;
    #l37.  if !(temp$13) then goto l38; 
    #l39. <@ExitStatementAnnotation(
      hasWhen = false,
        mark = @Mark(
        startLabel = l39,
        endLabel = l39,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 44,
        theCol = 12,
        theOffset = 884),
        theEndCaret = 
        @Caret(
        theLine = 44,
        theCol = 17,
        theOffset = 888),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @List("exitLabel")
    )>  goto l25;
    #l40.  goto l41;
    #l38. 
    #l41. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l36,
      endLabel = l37,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 42,
      theCol = 10,
      theOffset = 838),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 14,
      theOffset = 841),
      theOptionalSource = "labeledStatements.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l36,
        endLabel = l41,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 42,
        theCol = 10,
        theOffset = 838),
        theEndCaret = 
        @Caret(
        theLine = 45,
        theCol = 17,
        theOffset = 905),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @List("ifLabel")  
    )> 
    #l42.  temp$14 := J;
    #l44.  temp$15 := 3;
    #l45. <@RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 49,
      theCol = 17,
      theOffset = 975),
      theEndCaret = 
      @Caret(
      theLine = 49,
      theCol = 18,
      theOffset = 975),
      theOptionalSource = "labeledStatements.ada"
    )>  temp$16 := (temp$14 == temp$15) @Choice;
    #l46.  if !(temp$16) then goto l43; 
    #l47.  temp$17 := J;
    #l48.  temp$18 := 1;
    #l49.  temp$19 := (temp$17 + temp$18);
    #l50. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l47,
        endLabel = l50,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 51,
        theCol = 14,
        theOffset = 1021),
        theEndCaret = 
        @Caret(
        theLine = 51,
        theCol = 25,
        theOffset = 1031),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @List("incJByOne") 
    )>  J := temp$19;
    #l51.  goto l55;
    #l43. 
    #l53.  temp$20 := J;
    #l54. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l53,
        endLabel = l54,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 54,
        theCol = 14,
        theOffset = 1105),
        theEndCaret = 
        @Caret(
        theLine = 54,
        theCol = 21,
        theOffset = 1111),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @List("JStaysTheSame") 
    )>  J := temp$20;
    #l55. <@CaseStatementAnnotation(
      caseStatementAlternatives = @List(@Pair(
      fst = @Mark(
      startLabel = l44,
      endLabel = l46,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 49,
      theCol = 12,
      theOffset = 970),
      theEndCaret = 
      @Caret(
      theLine = 49,
      theCol = 18,
      theOffset = 975),
      theOptionalSource = "labeledStatements.ada"
    )
    ), 
      snd = @MARK_PLACEHOLDER
    )),
      optWhenOthers = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l42,
        endLabel = l55,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 48,
        theCol = 10,
        theOffset = 949),
        theEndCaret = 
        @Caret(
        theLine = 55,
        theCol = 19,
        theOffset = 1130),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @List("caseLabel")
    )                        > 
    #l56.  goto l21;
    #l25. <@WhileLoopStatementAnnotation(
      condPart = @Mark(
      startLabel = l22,
      endLabel = l26,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 34,
      theCol = 8,
      theOffset = 683),
      theEndCaret = 
      @Caret(
      theLine = 34,
      theCol = 24,
      theOffset = 698),
      theOptionalSource = "labeledStatements.ada"
    )
    ),
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l21,
          endLabel = l25,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 34,
          theCol = 8,
          theOffset = 683),
          theEndCaret = 
          @Caret(
          theLine = 56,
          theCol = 17,
          theOffset = 1147),
          theOptionalSource = "labeledStatements.ada"
        )
        ),
          optSparkLabelList = @List("whileLoop",
              "whitespace_trimmed_by_antlr")  
    )> 
    #l57. <@AssertStatementAnnotation(
        mark = @Mark(
        startLabel = l57,
        endLabel = l57,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 58,
        theCol = 12,
        theOffset = 1161),
        theEndCaret = 
        @Caret(
        theLine = 58,
        theCol = 25,
        theOffset = 1173),
        theOptionalSource = "labeledStatements.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  assert (J > 0) ;
    #l58.  temp$21 := (I == temp$2);
    #l59.  if temp$21 then goto l14;
    #l60.  temp$22 := I + 1;
    #l61.  I := temp$22;
    #l62.  goto l13;
    #l14. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l15,
      endLabel = l18,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 28,
      theCol = 6,
      theOffset = 537),
      theEndCaret = 
      @Caret(
      theLine = 28,
      theCol = 31,
      theOffset = 561),
      theOptionalSource = "labeledStatements.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l15,
          endLabel = l14,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 28,
          theCol = 6,
          theOffset = 537),
          theEndCaret = 
          @Caret(
          theLine = 59,
          theCol = 15,
          theOffset = 1220),
          theOptionalSource = "labeledStatements.ada"
        )
        ),
          optSparkLabelList = @List("forLoop",
              "line_27")  
    )> 
  #l63.  temp$23 := J;
  #l64. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l63,
      endLabel = l64,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 62,
      theCol = 6,
      theOffset = 1260),
      theEndCaret = 
      @Caret(
      theLine = 62,
      theCol = 15,
      theOffset = 1268),
      theOptionalSource = "labeledStatements.ada"
    )
    ),
      optSparkLabelList = @List("returnLabel",
          "d")
  )>  return temp$23;
}
procedure Standard::Integer Stupid 
      (Labeled_Statements::Index_Range Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 20,
  theOffset = 411),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 21,
  theOffset = 411),
  theOptionalSource = "labeledStatements.ada"
))
@MethodAnnotation(
  theSourceFileName = "labeledStatements.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 4,
      theOffset = 395),
      theEndCaret = 
      @Caret(
      theLine = 63,
      theCol = 15,
      theOffset = 1283),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 4,
      theOffset = 395),
      theEndCaret = 
      @Caret(
      theLine = 63,
      theCol = 15,
      theOffset = 1283),
      theOptionalSource = "labeledStatements.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 4,
      theOffset = 395),
      theEndCaret = 
      @Caret(
      theLine = 63,
      theCol = 15,
      theOffset = 1283),
      theOptionalSource = "labeledStatements.ada"
    )
) 
{ #locret. return;}