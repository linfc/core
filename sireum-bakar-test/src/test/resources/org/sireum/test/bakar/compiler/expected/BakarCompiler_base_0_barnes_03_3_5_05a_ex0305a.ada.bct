@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package P
@PackageAnnotation(
  theSourceFileName = "ex0305a.ada",
  theSparkName = P,
  thePilarSparkName = P,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 7,
  theOffset = 221),
  theOptionalSource = "ex0305a.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 10,
  theOffset = 8),
  theOptionalSource = "ex0305a.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Divide 
      (Standard::Integer M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 21,
  theOffset = 34),
  theEndCaret = 
  @Caret(
  theLine = 2,
  theCol = 22,
  theOffset = 34),
  theOptionalSource = "ex0305a.ada"
),
       Standard::Integer N @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 24,
  theOffset = 37),
  theEndCaret = 
  @Caret(
  theLine = 2,
  theCol = 25,
  theOffset = 37),
  theOptionalSource = "ex0305a.ada"
),
       Standard::Integer Q @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 21,
  theOffset = 74),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 22,
  theOffset = 74),
  theOptionalSource = "ex0305a.ada"
),
       Standard::Integer R @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 3,
  theCol = 24,
  theOffset = 77),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 25,
  theOffset = 77),
  theOptionalSource = "ex0305a.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0305a.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(M,
            N),
      theOptionalOutParameters = @List(Q,
          R)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @ContractPredicate(
          theType = @PRE,
          theExp = $AND((M >= 0),(N > 0)),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 5,
          theCol = 8,
          theOffset = 134),
          theEndCaret = 
          @Caret(
          theLine = 5,
          theCol = 33,
          theOffset = 158),
          theOptionalSource = "ex0305a.ada"
        )
        ),
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @ContractPredicate(
          theType = @POST,
          theExp = $AND($AND((M == ((Q * N) + R)),(R < N)),(R >= 0)),
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 6,
          theCol = 8,
          theOffset = 168),
          theEndCaret = 
          @Caret(
          theLine = 6,
          theCol = 54,
          theOffset = 213),
          theOptionalSource = "ex0305a.ada"
        )
        ),
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Q,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 16,
                          theOffset = 111),
                          theEndCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 17,
                          theOffset = 111),
                          theOptionalSource = "ex0305a.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = M,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 26,
                          theOffset = 121),
                          theEndCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 27,
                          theOffset = 121),
                          theOptionalSource = "ex0305a.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = N,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 28,
                          theOffset = 123),
                          theEndCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 29,
                          theOffset = 123),
                          theOptionalSource = "ex0305a.ada"
                        )
                    ))
                ),
                      @DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = R,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 19,
                          theOffset = 114),
                          theEndCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 20,
                          theOffset = 114),
                          theOptionalSource = "ex0305a.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = M,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 26,
                          theOffset = 121),
                          theEndCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 27,
                          theOffset = 121),
                          theOptionalSource = "ex0305a.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = N,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 28,
                          theOffset = 123),
                          theEndCaret = 
                          @Caret(
                          theLine = 4,
                          theCol = 29,
                          theOffset = 123),
                          theOptionalSource = "ex0305a.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 4,
                  theCol = 16,
                  theOffset = 111),
                  theEndCaret = 
                  @Caret(
                  theLine = 4,
                  theCol = 29,
                  theOffset = 123),
                  theOptionalSource = "ex0305a.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 4,
              theCol = 8,
              theOffset = 103),
              theEndCaret = 
              @Caret(
              theLine = 4,
              theCol = 30,
              theOffset = 124),
              theOptionalSource = "ex0305a.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 4,
      theOffset = 17),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 41,
      theOffset = 93),
      theOptionalSource = "ex0305a.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 14,
      theOffset = 27),
      theEndCaret = 
      @Caret(
      theLine = 2,
      theCol = 20,
      theOffset = 32),
      theOptionalSource = "ex0305a.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 4,
      theOffset = 17),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 40,
      theOffset = 92),
      theOptionalSource = "ex0305a.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package P
@PackageAnnotation(
  theSourceFileName = "ex0305a.ada",
  theSparkName = P,
  thePilarSparkName = P,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 1,
  theOffset = 226),
  theEndCaret = 
  @Caret(
  theLine = 23,
  theCol = 7,
  theOffset = 545),
  theOptionalSource = "ex0305a.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 1,
  theOffset = 226),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 15,
  theOffset = 239),
  theOptionalSource = "ex0305a.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Divide 
      (Standard::Integer M @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 21,
  theOffset = 265),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 22,
  theOffset = 265),
  theOptionalSource = "ex0305a.ada"
),
       Standard::Integer N @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 10,
  theCol = 24,
  theOffset = 268),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 25,
  theOffset = 268),
  theOptionalSource = "ex0305a.ada"
),
       Standard::Integer Q @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 21,
  theOffset = 305),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 22,
  theOffset = 305),
  theOptionalSource = "ex0305a.ada"
),
       Standard::Integer R @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 24,
  theOffset = 308),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 25,
  theOffset = 308),
  theOptionalSource = "ex0305a.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0305a.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(M,
            N),
      theOptionalOutParameters = @List(Q,
          R)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 4,
      theOffset = 248),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 15,
      theOffset = 537),
      theOptionalSource = "ex0305a.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 14,
      theOffset = 258),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 20,
      theOffset = 263),
      theOptionalSource = "ex0305a.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 4,
      theOffset = 248),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 40,
      theOffset = 323),
      theOptionalSource = "ex0305a.ada"
    )
) 
{

  local
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := 0;
  #l2. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l2,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 7,
      theOffset = 349),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 14,
      theOffset = 355),
      theOptionalSource = "ex0305a.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Q := temp$1;
  #l3.  temp$2 := M;
  #l4. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l3,
      endLabel = l4,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 15,
      theCol = 7,
      theOffset = 364),
      theEndCaret = 
      @Caret(
      theLine = 15,
      theCol = 14,
      theOffset = 370),
      theOptionalSource = "ex0305a.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  R := temp$2;
  #l5. 
  #l7. <@AssertStatementAnnotation(
      mark = @Mark(
      startLabel = l7,
      endLabel = l7,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 14,
      theOffset = 398),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 50,
      theOffset = 433),
      theOptionalSource = "ex0305a.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  assert $AND((M == ((Q * N) + R)),(R >= 0)) ;
  #l8.  temp$3 := R;
  #l9.  temp$4 := N;
  #l10.  temp$5 := (temp$3 < temp$4);
  #l11. <@ExitStatementAnnotation(
    hasWhen = true,
      mark = @Mark(
      startLabel = l8,
      endLabel = l11,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 10,
      theOffset = 445),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 26,
      theOffset = 460),
      theOptionalSource = "ex0305a.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  if temp$5 then goto l6;
  #l12.  temp$6 := Q;
  #l13.  temp$7 := 1;
  #l14.  temp$8 := (temp$6 + temp$7);
  #l15. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l12,
      endLabel = l15,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 10,
      theOffset = 472),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 21,
      theOffset = 482),
      theOptionalSource = "ex0305a.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Q := temp$8;
  #l16.  temp$9 := R;
  #l17.  temp$10 := N;
  #l18.  temp$11 := (temp$9 - temp$10);
  #l19. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l16,
      endLabel = l19,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 10,
      theOffset = 494),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 21,
      theOffset = 504),
      theOptionalSource = "ex0305a.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  R := temp$11;
  #l20.  goto l5;
  #l6. <@DefaultLoopStatementAnnotation(
      optLoopId = @NONE,
      body = @MARK_PLACEHOLDER,
        mark = @Mark(
        startLabel = l5,
        endLabel = l6,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 16,
        theCol = 7,
        theOffset = 379),
        theEndCaret = 
        @Caret(
        theLine = 21,
        theCol = 16,
        theOffset = 521),
        theOptionalSource = "ex0305a.ada"
      )
      ),
        optSparkLabelList = @NONE  
  )> 
  #l21.  return;
}