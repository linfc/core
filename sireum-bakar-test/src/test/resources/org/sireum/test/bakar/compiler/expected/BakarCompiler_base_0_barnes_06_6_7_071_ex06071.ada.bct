@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Stacks
@PackageAnnotation(
  theSourceFileName = "ex06071.ada",
  theSparkName = Stacks,
  thePilarSparkName = Stacks,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 18,
  theCol = 12,
  theOffset = 454),
  theOptionalSource = "ex06071.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 15,
  theOffset = 13),
  theOptionalSource = "ex06071.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

const $Const {
  Stack_Size = (Standard::Integer) (100) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PRIVATE,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 9,
        theCol = 4,
        theOffset = 125),
        theEndCaret = 
        @Caret(
        theLine = 9,
        theCol = 14,
        theOffset = 134),
        theOptionalSource = "ex06071.ada"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Pointer_Range
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PRIVATE,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 4,
      theOffset = 159),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 48,
      theOffset = 202),
      theOptionalSource = "ex06071.ada"
    ),
    fullyQualifiedName = Stacks::Pointer_Range,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = 0,
        theHighRangeExp = Stacks::$Const.Stack_Size))
{}
record Index_Range
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PRIVATE,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 4,
      theOffset = 208),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 63,
      theOffset = 266),
      theOptionalSource = "ex06071.ada"
    ),
    fullyQualifiedName = Stacks::Index_Range,
    type = `Stacks::Pointer_Range,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = Stacks::$Const.Stack_Size,
        lowerBound = 1)))
{}
record Vector
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PRIVATE,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 4,
      theOffset = 272),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 49,
      theOffset = 316),
      theOptionalSource = "ex06071.ada"
    ),
    fullyQualifiedName = Stacks::Vector,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Integer,
        theDiscreteSubTypes = 
          @List(`Stacks::Index_Range)
      ))
{}
record Stack
  @PrivateTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 13,
      theCol = 4,
      theOffset = 322),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 18,
      theOffset = 441),
      theOptionalSource = "ex06071.ada"
    ),
    fullyQualifiedName = Stacks::Stack,
    tagged = false,
    limited = false,
    theDeclarationLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 3,
        theCol = 4,
        theOffset = 24),
        theEndCaret = 
        @Caret(
        theLine = 3,
        theCol = 26,
        theOffset = 45),
        theOptionalSource = "ex06071.ada"
      ),
    typeDefinition = 
      @RecordTypeDefinition(
        tagged = false,
        parentType=@NONE))
{
  Stacks::Vector stack_vector @RecordComponentAnnotation(
    sparkID = Stack_Vector
  );
  Stacks::Pointer_Range stack_pointer @RecordComponentAnnotation(
    sparkID = Stack_Pointer
  );
}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Clear 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 20,
  theOffset = 69),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 21,
  theOffset = 69),
  theOptionalSource = "ex06071.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex06071.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @NONE,
      theOptionalOutParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = S,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 6,
                          theCol = 16,
                          theOffset = 101),
                          theEndCaret = 
                          @Caret(
                          theLine = 6,
                          theCol = 17,
                          theOffset = 101),
                          theOptionalSource = "ex06071.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @NONE
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 6,
                  theCol = 16,
                  theOffset = 101),
                  theEndCaret = 
                  @Caret(
                  theLine = 6,
                  theCol = 22,
                  theOffset = 106),
                  theOptionalSource = "ex06071.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 6,
              theCol = 8,
              theOffset = 93),
              theEndCaret = 
              @Caret(
              theLine = 6,
              theCol = 24,
              theOffset = 108),
              theOptionalSource = "ex06071.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 53),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 35,
      theOffset = 83),
      theOptionalSource = "ex06071.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 14,
      theOffset = 63),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 19,
      theOffset = 67),
      theOptionalSource = "ex06071.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 53),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 34,
      theOffset = 82),
      theOptionalSource = "ex06071.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Stacks
@PackageAnnotation(
  theSourceFileName = "ex06071.ada",
  theSparkName = Stacks,
  thePilarSparkName = Stacks,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 20,
  theCol = 1,
  theOffset = 459),
  theEndCaret = 
  @Caret(
  theLine = 28,
  theCol = 12,
  theOffset = 649),
  theOptionalSource = "ex06071.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 20,
  theCol = 1,
  theOffset = 459),
  theEndCaret = 
  @Caret(
  theLine = 20,
  theCol = 20,
  theOffset = 477),
  theOptionalSource = "ex06071.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Clear 
      (Stacks::Stack S @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 22,
  theCol = 20,
  theOffset = 504),
  theEndCaret = 
  @Caret(
  theLine = 22,
  theCol = 21,
  theOffset = 504),
  theOptionalSource = "ex06071.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex06071.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @NONE,
      theOptionalOutParameters = @List(S)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 4,
      theOffset = 488),
      theEndCaret = 
      @Caret(
      theLine = 26,
      theCol = 14,
      theOffset = 634),
      theOptionalSource = "ex06071.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 14,
      theOffset = 498),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 19,
      theOffset = 502),
      theOptionalSource = "ex06071.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 4,
      theOffset = 488),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 34,
      theOffset = 517),
      theOptionalSource = "ex06071.ada"
    )
) 
{
  #l1. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 24,
      theCol = 7,
      theOffset = 539),
      theEndCaret = 
      @Caret(
      theLine = 25,
      theCol = 25,
      theOffset = 619),
      theOptionalSource = "ex06071.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  S := `Stacks::Stack {
    Stack_Vector = `Stacks::Vector (
       
      {
        Stacks::Index_Range iter0 => 
          switch iter0 
              | ($First(`Stacks::Index_Range), $Last(`Stacks::Index_Range)) => (
                  0
                )
      | => ($I_THOUGHT_PILAR_SWITCH_STATEMENTS_DID_NOT_NEED_A_DEFAULT_ANYMORE__PLEASE_FIX_ME())
      }
    ),
    Stack_Pointer = 0
  };
  #l2.  return;
}