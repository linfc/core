@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package MyMatrix
@PackageAnnotation(
  theSourceFileName = "matrix.ada",
  theSparkName = MyMatrix,
  thePilarSparkName = MyMatrix,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 13,
  theCol = 14,
  theOffset = 331),
  theOptionalSource = "matrix.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 17,
  theOffset = 15),
  theOptionalSource = "matrix.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Matrix_Index
  @PrivateTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 222),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 35,
      theOffset = 253),
      theOptionalSource = "matrix.ada"
    ),
    fullyQualifiedName = MyMatrix::Matrix_Index,
    tagged = false,
    limited = true,
    theDeclarationLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 3,
        theCol = 3,
        theOffset = 22),
        theEndCaret = 
        @Caret(
        theLine = 3,
        theCol = 40,
        theOffset = 58),
        theOptionalSource = "matrix.ada"
      ),
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = 0,
        theHighRangeExp = 9))
{}
record Matrix
  @PrivateTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 3,
      theOffset = 257),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 64,
      theOffset = 317),
      theOptionalSource = "matrix.ada"
    ),
    fullyQualifiedName = MyMatrix::Matrix,
    tagged = false,
    limited = true,
    theDeclarationLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 4,
        theCol = 3,
        theOffset = 62),
        theEndCaret = 
        @Caret(
        theLine = 4,
        theCol = 34,
        theOffset = 92),
        theOptionalSource = "matrix.ada"
      ),
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          2,
        theComponentSubType = 
          `Standard::Integer,
        theDiscreteSubTypes = 
          @List(`MyMatrix::Matrix_Index,
                `MyMatrix::Matrix_Index)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Multiply 
      (MyMatrix::Matrix X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 22,
  theOffset = 118),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 23,
  theOffset = 118),
  theOptionalSource = "matrix.ada"
),
       MyMatrix::Matrix Y @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 25,
  theOffset = 121),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 26,
  theOffset = 121),
  theOptionalSource = "matrix.ada"
),
       MyMatrix::Matrix Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 7,
  theCol = 22,
  theOffset = 161),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 23,
  theOffset = 161),
  theOptionalSource = "matrix.ada"
))
@MethodAnnotation(
  theSourceFileName = "matrix.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(X,
            Y),
      theOptionalOutParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Z,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 8,
                          theCol = 15,
                          theOffset = 198),
                          theEndCaret = 
                          @Caret(
                          theLine = 8,
                          theCol = 16,
                          theOffset = 198),
                          theOptionalSource = "matrix.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = X,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 8,
                          theCol = 22,
                          theOffset = 205),
                          theEndCaret = 
                          @Caret(
                          theLine = 8,
                          theCol = 23,
                          theOffset = 205),
                          theOptionalSource = "matrix.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = Y,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 8,
                          theCol = 25,
                          theOffset = 208),
                          theEndCaret = 
                          @Caret(
                          theLine = 8,
                          theCol = 26,
                          theOffset = 208),
                          theOptionalSource = "matrix.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 8,
                  theCol = 15,
                  theOffset = 198),
                  theEndCaret = 
                  @Caret(
                  theLine = 8,
                  theCol = 26,
                  theOffset = 208),
                  theOptionalSource = "matrix.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 8,
              theCol = 7,
              theOffset = 190),
              theEndCaret = 
              @Caret(
              theLine = 8,
              theCol = 27,
              theOffset = 209),
              theOptionalSource = "matrix.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 99),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 44,
      theOffset = 182),
      theOptionalSource = "matrix.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 13,
      theOffset = 109),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 21,
      theOffset = 116),
      theOptionalSource = "matrix.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 99),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 43,
      theOffset = 181),
      theOptionalSource = "matrix.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package MyMatrix
@PackageAnnotation(
  theSourceFileName = "matrix.ada",
  theSparkName = MyMatrix,
  thePilarSparkName = MyMatrix,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 15,
  theCol = 1,
  theOffset = 334),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 14,
  theOffset = 796),
  theOptionalSource = "matrix.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 15,
  theCol = 1,
  theOffset = 334),
  theEndCaret = 
  @Caret(
  theLine = 15,
  theCol = 22,
  theOffset = 354),
  theOptionalSource = "matrix.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Multiply 
      (MyMatrix::Matrix X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 18,
  theCol = 22,
  theOffset = 381),
  theEndCaret = 
  @Caret(
  theLine = 18,
  theCol = 23,
  theOffset = 381),
  theOptionalSource = "matrix.ada"
),
       MyMatrix::Matrix Y @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 18,
  theCol = 25,
  theOffset = 384),
  theEndCaret = 
  @Caret(
  theLine = 18,
  theCol = 26,
  theOffset = 384),
  theOptionalSource = "matrix.ada"
),
       MyMatrix::Matrix Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 19,
  theCol = 22,
  theOffset = 424),
  theEndCaret = 
  @Caret(
  theLine = 19,
  theCol = 23,
  theOffset = 424),
  theOptionalSource = "matrix.ada"
))
@MethodAnnotation(
  theSourceFileName = "matrix.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(X,
            Y),
      theOptionalOutParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 3,
      theOffset = 362),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 16,
      theOffset = 781),
      theOptionalSource = "matrix.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 13,
      theOffset = 372),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 21,
      theOffset = 379),
      theOptionalSource = "matrix.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 3,
      theOffset = 362),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 43,
      theOffset = 444),
      theOptionalSource = "matrix.ada"
    )
) 
{

  local
    MyMatrix::Matrix_Index I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index J @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index K @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    MyMatrix::Matrix_Index temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 5,
      theOffset = 463),
      theEndCaret = 
      @Caret(
      theLine = 25,
      theCol = 7,
      theOffset = 568),
      theOptionalSource = "matrix.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Z := `MyMatrix::Matrix (
     
    {
      MyMatrix::Matrix_Index iter0 => 
        switch iter0 
            | ($First(`MyMatrix::Matrix_Index), $Last(`MyMatrix::Matrix_Index)) => (
                 
                {
                  MyMatrix::Matrix_Index iter1 => 
                    switch iter1 
                        | ($First(`MyMatrix::Matrix_Index), $Last(`MyMatrix::Matrix_Index)) => (
                            0
                          )
                | => (0)
                }
              )
    | => ( 
    {
      MyMatrix::Matrix_Index iter2 => 
        switch iter2 
    | => (0)
    })
    }
  );
    #l4.  temp$4 := $First(`MyMatrix::Matrix_Index);
    #l5.  temp$5 := $Last(`MyMatrix::Matrix_Index);
    #l6.  if (temp$4 > temp$5) then goto l3;
    #l7.  I := temp$4;
    #l2. 
      #l10.  temp$6 := $First(`MyMatrix::Matrix_Index);
      #l11.  temp$7 := $Last(`MyMatrix::Matrix_Index);
      #l12.  if (temp$6 > temp$7) then goto l9;
      #l13.  J := temp$6;
      #l8. 
        #l16.  temp$8 := $First(`MyMatrix::Matrix_Index);
        #l17.  temp$9 := $Last(`MyMatrix::Matrix_Index);
        #l18.  if (temp$8 > temp$9) then goto l15;
        #l19.  K := temp$8;
        #l14. 
        #l20.  temp$10 := I;
        #l21.  temp$11 := J;
        #l22.  temp$12 := I;
        #l23.  temp$13 := J;
        #l24.  temp$14 := Z [temp$12, temp$13];
        #l25.  temp$15 := I;
        #l26.  temp$16 := K;
        #l27.  temp$17 := X [temp$15, temp$16];
        #l28.  temp$18 := K;
        #l29.  temp$19 := J;
        #l30.  temp$20 := Y [temp$18, temp$19];
        #l31.  temp$21 := (temp$17 * temp$20);
        #l32.  temp$22 := (temp$14 + temp$21);
        #l33. <@AssignmentStatementAnnotation(
            mark = @Mark(
            startLabel = l20,
            endLabel = l33,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 29,
            theCol = 11,
            theOffset = 679),
            theEndCaret = 
            @Caret(
            theLine = 29,
            theCol = 50,
            theOffset = 717),
            theOptionalSource = "matrix.ada"
          )
          ),
            optSparkLabelList = @NONE 
        )>  Z [temp$10, temp$11] := temp$22;
        #l34.  temp$23 := (K == temp$9);
        #l35.  if temp$23 then goto l15;
        #l36.  temp$24 := K + 1;
        #l37.  K := temp$24;
        #l38.  goto l14;
        #l15. <@ForLoopStatementAnnotation(
          sparkIterVarID = K,
          pilarIterVarID = K,
          initPart = @Mark(
          startLabel = l16,
          endLabel = l19,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 28,
          theCol = 9,
          theOffset = 642),
          theEndCaret = 
          @Caret(
          theLine = 28,
          theCol = 35,
          theOffset = 667),
          theOptionalSource = "matrix.ada"
        )
        ),
          isRev = false,
            optLoopId = @NONE,
            body = @MARK_PLACEHOLDER,
              mark = @Mark(
              startLabel = l16,
              endLabel = l15,
              optRS = @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 28,
              theCol = 9,
              theOffset = 642),
              theEndCaret = 
              @Caret(
              theLine = 30,
              theCol = 18,
              theOffset = 735),
              theOptionalSource = "matrix.ada"
            )
            ),
              optSparkLabelList = @NONE  
        )> 
      #l39.  temp$25 := (J == temp$7);
      #l40.  if temp$25 then goto l9;
      #l41.  temp$26 := J + 1;
      #l42.  J := temp$26;
      #l43.  goto l8;
      #l9. <@ForLoopStatementAnnotation(
        sparkIterVarID = J,
        pilarIterVarID = J,
        initPart = @Mark(
        startLabel = l10,
        endLabel = l13,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 27,
        theCol = 7,
        theOffset = 607),
        theEndCaret = 
        @Caret(
        theLine = 27,
        theCol = 33,
        theOffset = 632),
        theOptionalSource = "matrix.ada"
      )
      ),
        isRev = false,
          optLoopId = @NONE,
          body = @MARK_PLACEHOLDER,
            mark = @Mark(
            startLabel = l10,
            endLabel = l9,
            optRS = @RegionSelection(
            theStartCaret = 
            @Caret(
            theLine = 27,
            theCol = 7,
            theOffset = 607),
            theEndCaret = 
            @Caret(
            theLine = 31,
            theCol = 16,
            theOffset = 751),
            theOptionalSource = "matrix.ada"
          )
          ),
            optSparkLabelList = @NONE  
      )> 
    #l44.  temp$27 := (I == temp$5);
    #l45.  if temp$27 then goto l3;
    #l46.  temp$28 := I + 1;
    #l47.  I := temp$28;
    #l48.  goto l2;
    #l3. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l4,
      endLabel = l7,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 26,
      theCol = 5,
      theOffset = 574),
      theEndCaret = 
      @Caret(
      theLine = 26,
      theCol = 31,
      theOffset = 599),
      theOptionalSource = "matrix.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l4,
          endLabel = l3,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 26,
          theCol = 5,
          theOffset = 574),
          theEndCaret = 
          @Caret(
          theLine = 32,
          theCol = 14,
          theOffset = 765),
          theOptionalSource = "matrix.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l49.  return;
}