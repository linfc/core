@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package T
@PackageAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theSparkName = T,
  thePilarSparkName = T,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 38,
  theCol = 1,
  theOffset = 976),
  theEndCaret = 
  @Caret(
  theLine = 48,
  theCol = 7,
  theOffset = 1292),
  theOptionalSource = "array_unconstrained.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 38,
  theCol = 1,
  theOffset = 976),
  theEndCaret = 
  @Caret(
  theLine = 38,
  theCol = 15,
  theOffset = 989),
  theOptionalSource = "array_unconstrained.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Boolean isSorted 
      (T::ConsVector CV @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 39,
  theCol = 21,
  theOffset = 1014),
  theEndCaret = 
  @Caret(
  theLine = 39,
  theCol = 23,
  theOffset = 1015),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(CV)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 3,
      theOffset = 996),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 16,
      theOffset = 1116),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 12,
      theOffset = 1005),
      theEndCaret = 
      @Caret(
      theLine = 39,
      theCol = 20,
      theOffset = 1012),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 3,
      theOffset = 996),
      theEndCaret = 
      @Caret(
      theLine = 39,
      theCol = 52,
      theOffset = 1044),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{

  local
    T::ConsVector temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := CV;
  #l2.  call temp$2 := Array_Unconstrained::isSorted (temp$1);
  #l3. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l3,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 5,
      theOffset = 1061),
      theEndCaret = 
      @Caret(
      theLine = 41,
      theCol = 45,
      theOffset = 1100),
      theOptionalSource = "array_unconstrained.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$2;
}
procedure Standard::Boolean isSorted 
      (T::ConsVector CV @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 39,
  theCol = 21,
  theOffset = 1014),
  theEndCaret = 
  @Caret(
  theLine = 39,
  theCol = 23,
  theOffset = 1015),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(CV)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 3,
      theOffset = 996),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 16,
      theOffset = 1116),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 3,
      theOffset = 996),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 16,
      theOffset = 1116),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 39,
      theCol = 3,
      theOffset = 996),
      theEndCaret = 
      @Caret(
      theLine = 42,
      theCol = 16,
      theOffset = 1116),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean indexIsValue 
      (T::ConsVector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 44,
  theCol = 25,
  theOffset = 1145),
  theEndCaret = 
  @Caret(
  theLine = 44,
  theCol = 26,
  theOffset = 1145),
  theOptionalSource = "array_unconstrained.ada"
),
       T::Index I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 44,
  theCol = 41,
  theOffset = 1161),
  theEndCaret = 
  @Caret(
  theLine = 44,
  theCol = 42,
  theOffset = 1161),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer V @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 44,
  theCol = 52,
  theOffset = 1172),
  theEndCaret = 
  @Caret(
  theLine = 44,
  theCol = 53,
  theOffset = 1172),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z,
            I,
            V)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 3,
      theOffset = 1123),
      theEndCaret = 
      @Caret(
      theLine = 47,
      theCol = 20,
      theOffset = 1283),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 12,
      theOffset = 1132),
      theEndCaret = 
      @Caret(
      theLine = 44,
      theCol = 24,
      theOffset = 1143),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 3,
      theOffset = 1123),
      theEndCaret = 
      @Caret(
      theLine = 44,
      theCol = 79,
      theOffset = 1198),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{

  local
    T::ConsVector temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    T::Index temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l4.  temp$1 := Z;
  #l5.  temp$2 := I;
  #l6.  temp$3 := V;
  #l7.  call temp$4 := Array_Unconstrained::indexIsValue (temp$1, temp$2, temp$3);
  #l8. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l4,
      endLabel = l8,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 46,
      theCol = 5,
      theOffset = 1215),
      theEndCaret = 
      @Caret(
      theLine = 46,
      theCol = 54,
      theOffset = 1263),
      theOptionalSource = "array_unconstrained.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$4;
}
procedure Standard::Boolean indexIsValue 
      (T::ConsVector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 44,
  theCol = 25,
  theOffset = 1145),
  theEndCaret = 
  @Caret(
  theLine = 44,
  theCol = 26,
  theOffset = 1145),
  theOptionalSource = "array_unconstrained.ada"
),
       T::Index I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 44,
  theCol = 41,
  theOffset = 1161),
  theEndCaret = 
  @Caret(
  theLine = 44,
  theCol = 42,
  theOffset = 1161),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer V @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 44,
  theCol = 52,
  theOffset = 1172),
  theEndCaret = 
  @Caret(
  theLine = 44,
  theCol = 53,
  theOffset = 1172),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z,
            I,
            V)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 3,
      theOffset = 1123),
      theEndCaret = 
      @Caret(
      theLine = 47,
      theCol = 20,
      theOffset = 1283),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 3,
      theOffset = 1123),
      theEndCaret = 
      @Caret(
      theLine = 47,
      theCol = 20,
      theOffset = 1283),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 44,
      theCol = 3,
      theOffset = 1123),
      theEndCaret = 
      @Caret(
      theLine = 47,
      theCol = 20,
      theOffset = 1283),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Array_Unconstrained
@PackageAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theSparkName = Array_Unconstrained,
  thePilarSparkName = Array_Unconstrained,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 25,
  theOffset = 230),
  theOptionalSource = "array_unconstrained.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 28,
  theOffset = 26),
  theOptionalSource = "array_unconstrained.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Vector
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 33),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 53,
      theOffset = 82),
      theOptionalSource = "array_unconstrained.ada"
    ),
    fullyQualifiedName = Array_Unconstrained::Vector,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Integer,
        theIndexSubTypes = 
          @List(`Standard::Integer)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Boolean isSorted 
      (Array_Unconstrained::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 21,
  theOffset = 107),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 22,
  theOffset = 107),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 89),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 48,
      theOffset = 133),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 12,
      theOffset = 98),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 20,
      theOffset = 105),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 89),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 47,
      theOffset = 132),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isSorted 
      (Array_Unconstrained::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 21,
  theOffset = 107),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 22,
  theOffset = 107),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 89),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 48,
      theOffset = 133),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 89),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 48,
      theOffset = 133),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 89),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 48,
      theOffset = 133),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean indexIsValue 
      (Array_Unconstrained::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 25,
  theOffset = 159),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 26,
  theOffset = 159),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer Index @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 37,
  theOffset = 171),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 42,
  theOffset = 175),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer V @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 44,
  theOffset = 178),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 45,
  theOffset = 178),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z,
            Index,
            V)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 137),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 72,
      theOffset = 205),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 12,
      theOffset = 146),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 24,
      theOffset = 157),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 137),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 71,
      theOffset = 204),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean indexIsValue 
      (Array_Unconstrained::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 25,
  theOffset = 159),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 26,
  theOffset = 159),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer Index @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 37,
  theOffset = 171),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 42,
  theOffset = 175),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer V @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 44,
  theOffset = 178),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 45,
  theOffset = 178),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z,
            Index,
            V)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 137),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 72,
      theOffset = 205),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 137),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 72,
      theOffset = 205),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 3,
      theOffset = 137),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 72,
      theOffset = 205),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package Array_Unconstrained
@PackageAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theSparkName = Array_Unconstrained,
  thePilarSparkName = Array_Unconstrained,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 1,
  theOffset = 233),
  theEndCaret = 
  @Caret(
  theLine = 25,
  theCol = 25,
  theOffset = 655),
  theOptionalSource = "array_unconstrained.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 9,
  theCol = 1,
  theOffset = 233),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 33,
  theOffset = 264),
  theOptionalSource = "array_unconstrained.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Boolean isSorted 
      (Array_Unconstrained::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 21,
  theOffset = 290),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 22,
  theOffset = 290),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 272),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 16,
      theOffset = 502),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 12,
      theOffset = 281),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 20,
      theOffset = 288),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 272),
      theEndCaret = 
      @Caret(
      theLine = 11,
      theCol = 47,
      theOffset = 315),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{

  local
    Standard::Boolean B @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 5,
      theOffset = 324),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 6,
      theOffset = 324),
      theOptionalSource = "array_unconstrained.ada"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Array_Unconstrained::Vector temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Array_Unconstrained::Vector temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Array_Unconstrained::Vector temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := true;
  #l2. <@DeclarativePartStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l2,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 5,
      theOffset = 324),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 6,
      theOffset = 324),
      theOptionalSource = "array_unconstrained.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  B := temp$1;
    #l5.  temp$2 := $Last(Z);
    #l6.  temp$3 := 1;
    #l7.  temp$4 := (temp$2 - temp$3);
    #l8.  temp$5 := $First(Z);
    #l9.  if (temp$5 > temp$4) then goto l4;
    #l10.  I := temp$5;
    #l3. 
    #l11.  temp$6 := I;
    #l12.  temp$7 := Z [temp$6];
    #l13.  temp$8 := I;
    #l14.  temp$9 := 1;
    #l15.  temp$10 := (temp$8 + temp$9);
    #l16.  temp$11 := Z [temp$10];
    #l17.  temp$12 := (temp$7 <= temp$11);
    #l18. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l11,
        endLabel = l18,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 15,
        theCol = 7,
        theOffset = 414),
        theEndCaret = 
        @Caret(
        theLine = 15,
        theCol = 29,
        theOffset = 435),
        theOptionalSource = "array_unconstrained.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  B := temp$12;
    #l19.  temp$13 := B;
    #l20.  temp$14 := !(temp$13);
    #l21. <@ExitStatementAnnotation(
      hasWhen = true,
        mark = @Mark(
        startLabel = l19,
        endLabel = l21,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 16,
        theCol = 7,
        theOffset = 443),
        theEndCaret = 
        @Caret(
        theLine = 16,
        theCol = 23,
        theOffset = 458),
        theOptionalSource = "array_unconstrained.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  if temp$14 then goto l4;
    #l22.  temp$15 := (I == temp$4);
    #l23.  if temp$15 then goto l4;
    #l24.  temp$16 := I + 1;
    #l25.  I := temp$16;
    #l26.  goto l3;
    #l4. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l5,
      endLabel = l10,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 5,
      theOffset = 357),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 55,
      theOffset = 406),
      theOptionalSource = "array_unconstrained.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l5,
          endLabel = l4,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 14,
          theCol = 5,
          theOffset = 357),
          theEndCaret = 
          @Caret(
          theLine = 17,
          theCol = 14,
          theOffset = 472),
          theOptionalSource = "array_unconstrained.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l27.  temp$17 := B;
  #l28. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l27,
      endLabel = l28,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 5,
      theOffset = 478),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 14,
      theOffset = 486),
      theOptionalSource = "array_unconstrained.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$17;
}
procedure Standard::Boolean isSorted 
      (Array_Unconstrained::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 21,
  theOffset = 290),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 22,
  theOffset = 290),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 272),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 16,
      theOffset = 502),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 272),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 16,
      theOffset = 502),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 11,
      theCol = 3,
      theOffset = 272),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 16,
      theOffset = 502),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean indexIsValue 
      (Array_Unconstrained::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 25,
  theOffset = 529),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 26,
  theOffset = 529),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer Index @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 37,
  theOffset = 541),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 42,
  theOffset = 545),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer V @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 44,
  theOffset = 548),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 45,
  theOffset = 548),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z,
            Index,
            V)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 3,
      theOffset = 507),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 20,
      theOffset = 630),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 12,
      theOffset = 516),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 24,
      theOffset = 527),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 3,
      theOffset = 507),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 71,
      theOffset = 574),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{

  local
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l29.  temp$1 := Index;
  #l30.  temp$2 := Z [temp$1];
  #l31.  temp$3 := V;
  #l32.  temp$4 := (temp$2 == temp$3);
  #l33. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l29,
      endLabel = l33,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 5,
      theOffset = 591),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 25,
      theOffset = 610),
      theOptionalSource = "array_unconstrained.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$4;
}
procedure Standard::Boolean indexIsValue 
      (Array_Unconstrained::Vector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 25,
  theOffset = 529),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 26,
  theOffset = 529),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer Index @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 37,
  theOffset = 541),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 42,
  theOffset = 545),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer V @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 44,
  theOffset = 548),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 45,
  theOffset = 548),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Z,
            Index,
            V)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 3,
      theOffset = 507),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 20,
      theOffset = 630),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 3,
      theOffset = 507),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 20,
      theOffset = 630),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 3,
      theOffset = 507),
      theEndCaret = 
      @Caret(
      theLine = 24,
      theCol = 20,
      theOffset = 630),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package T
@PackageAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theSparkName = T,
  thePilarSparkName = T,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 29,
  theCol = 13,
  theOffset = 697),
  theEndCaret = 
  @Caret(
  theLine = 36,
  theCol = 7,
  theOffset = 973),
  theOptionalSource = "array_unconstrained.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 30,
  theCol = 1,
  theOffset = 718),
  theEndCaret = 
  @Caret(
  theLine = 30,
  theCol = 10,
  theOffset = 726),
  theOptionalSource = "array_unconstrained.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @ContextClause(
    theOptionalWithClauses = @List(Array_Unconstrained),
    theOptionalUseTypeClauses = @NONE
  )  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @List(Array_Unconstrained)
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Index
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 31,
      theCol = 3,
      theOffset = 733),
      theEndCaret = 
      @Caret(
      theLine = 31,
      theCol = 42,
      theOffset = 771),
      theOptionalSource = "array_unconstrained.ada"
    ),
    fullyQualifiedName = T::Index,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = 10,
        lowerBound = 0)))
{}
record ConsVector
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 3,
      theOffset = 775),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 59,
      theOffset = 830),
      theOptionalSource = "array_unconstrained.ada"
    ),
    fullyQualifiedName = T::ConsVector,
    type = `Array_Unconstrained::Vector,
    constraint = 
  @Some(@IndexConstraint(
        subtypeMarks = 
          @List(`T::Index))))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Boolean isSorted 
      (T::ConsVector CV @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 34,
  theCol = 21,
  theOffset = 855),
  theEndCaret = 
  @Caret(
  theLine = 34,
  theCol = 23,
  theOffset = 856),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(CV)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 34,
      theCol = 3,
      theOffset = 837),
      theEndCaret = 
      @Caret(
      theLine = 34,
      theCol = 53,
      theOffset = 886),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 34,
      theCol = 12,
      theOffset = 846),
      theEndCaret = 
      @Caret(
      theLine = 34,
      theCol = 20,
      theOffset = 853),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 34,
      theCol = 3,
      theOffset = 837),
      theEndCaret = 
      @Caret(
      theLine = 34,
      theCol = 52,
      theOffset = 885),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean isSorted 
      (T::ConsVector CV @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 34,
  theCol = 21,
  theOffset = 855),
  theEndCaret = 
  @Caret(
  theLine = 34,
  theCol = 23,
  theOffset = 856),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(CV)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 34,
      theCol = 3,
      theOffset = 837),
      theEndCaret = 
      @Caret(
      theLine = 34,
      theCol = 53,
      theOffset = 886),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 34,
      theCol = 3,
      theOffset = 837),
      theEndCaret = 
      @Caret(
      theLine = 34,
      theCol = 53,
      theOffset = 886),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 34,
      theCol = 3,
      theOffset = 837),
      theEndCaret = 
      @Caret(
      theLine = 34,
      theCol = 53,
      theOffset = 886),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean indexIsValue 
      (T::ConsVector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 25,
  theOffset = 912),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 26,
  theOffset = 912),
  theOptionalSource = "array_unconstrained.ada"
),
       T::Index I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 41,
  theOffset = 928),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 42,
  theOffset = 928),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer V @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 52,
  theOffset = 939),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 53,
  theOffset = 939),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z,
            I,
            V)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 3,
      theOffset = 890),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 80,
      theOffset = 966),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 12,
      theOffset = 899),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 24,
      theOffset = 910),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 3,
      theOffset = 890),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 79,
      theOffset = 965),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean indexIsValue 
      (T::ConsVector Z @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 25,
  theOffset = 912),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 26,
  theOffset = 912),
  theOptionalSource = "array_unconstrained.ada"
),
       T::Index I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 41,
  theOffset = 928),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 42,
  theOffset = 928),
  theOptionalSource = "array_unconstrained.ada"
),
       Standard::Integer V @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 35,
  theCol = 52,
  theOffset = 939),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 53,
  theOffset = 939),
  theOptionalSource = "array_unconstrained.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_unconstrained.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Z,
            I,
            V)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 3,
      theOffset = 890),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 80,
      theOffset = 966),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 3,
      theOffset = 890),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 80,
      theOffset = 966),
      theOptionalSource = "array_unconstrained.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 3,
      theOffset = 890),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 80,
      theOffset = 966),
      theOptionalSource = "array_unconstrained.ada"
    )
) 
{ #locret. return;}