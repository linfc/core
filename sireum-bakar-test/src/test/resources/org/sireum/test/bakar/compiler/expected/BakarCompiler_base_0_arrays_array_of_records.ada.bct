@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package ArrayOfRecords
@PackageAnnotation(
  theSourceFileName = "array_of_records_of_array.ada",
  theSparkName = ArrayOfRecords,
  thePilarSparkName = ArrayOfRecords,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @List(@SymbolEntry(sparkID = "oArray",pilarSparkID = ArrayOfRecords::@@oArray,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE)),
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 24,
  theCol = 20,
  theOffset = 534),
  theOptionalSource = "array_of_records_of_array.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 23,
  theOffset = 21),
  theOptionalSource = "array_of_records_of_array.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @PackageSpecificationAnnotation(
      theOptionalOwnStatement = @OwnStatement(
      theOwnClauses = 
        @List(@OwnClause(
          theOptionalDeclaredType = @NONE,
          theOwnVariables = 
            @List(@OwnVariable(
              varName = ArrayOfRecords::@@oArray,
              mode = @NONE,
              ownCategory = @CONCRETE,
              theOwnVariableSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 2,
                  theCol = 9,
                  theOffset = 32),
                  theEndCaret = 
                  @Caret(
                  theLine = 2,
                  theCol = 15,
                  theOffset = 37),
                  theOptionalSource = "array_of_records_of_array.ada"
                )
            )),
          theOwnClauseSelection =
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 2,
              theCol = 9,
              theOffset = 32),
              theEndCaret = 
              @Caret(
              theLine = 2,
              theCol = 15,
              theOffset = 38),
              theOptionalSource = "array_of_records_of_array.ada"
            )
        )),
      theOwnStatementSelection = 
        @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 2,
          theCol = 5,
          theOffset = 28),
          theEndCaret = 
          @Caret(
          theLine = 2,
          theCol = 15,
          theOffset = 38),
          theOptionalSource = "array_of_records_of_array.ada"
        )
    ),
      theOptionalVarInitClause = @List(ArrayOfRecords::@@oArray)
    ),
  theOptionalInheritClause = 
    @NONE
));

const $Const {
  dummyObject = (ArrayOfRecords::Object) (`ArrayOfRecords::Object {
    x = `ArrayOfRecords::IntArray (
       
      {
        ArrayOfRecords::Index_Range iter0 => 
          switch iter0 
      | => (0)
      }
    ),
    y = `ArrayOfRecords::IntArray (
       
      {
        ArrayOfRecords::Index_Range iter1 => 
          switch iter1 
      | => (0)
      }
    )
  }) @ConstantAnnotation(
    theOrigin =
      @PACKAGE_SPEC_PUBLIC,
    theLoc = 
      @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 15,
        theCol = 3,
        theOffset = 244),
        theEndCaret = 
        @Caret(
        theLine = 15,
        theCol = 14,
        theOffset = 254),
        theOptionalSource = "array_of_records_of_array.ada"
      ));
}
/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Index_Range
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 69),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 35,
      theOffset = 100),
      theOptionalSource = "array_of_records_of_array.ada"
    ),
    fullyQualifiedName = ArrayOfRecords::Index_Range,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = 1,
        theHighRangeExp = 10))
{}
record IntArray
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 107),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 51,
      theOffset = 154),
      theOptionalSource = "array_of_records_of_array.ada"
    ),
    fullyQualifiedName = ArrayOfRecords::IntArray,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Integer,
        theDiscreteSubTypes = 
          @List(`ArrayOfRecords::Index_Range)
      ))
{}
record Object
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 3,
      theOffset = 161),
      theEndCaret = 
      @Caret(
      theLine = 13,
      theCol = 16,
      theOffset = 239),
      theOptionalSource = "array_of_records_of_array.ada"
    ),
    fullyQualifiedName = ArrayOfRecords::Object,
    typeDefinition = 
      @RecordTypeDefinition(
        tagged = false,
        parentType=@NONE))
{
  ArrayOfRecords::IntArray x @RecordComponentAnnotation(
    sparkID = X
  );
  ArrayOfRecords::IntArray y @RecordComponentAnnotation(
    sparkID = Y
  );
}
record ObjectArray
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 17,
      theCol = 3,
      theOffset = 333),
      theEndCaret = 
      @Caret(
      theLine = 17,
      theCol = 53,
      theOffset = 382),
      theOptionalSource = "array_of_records_of_array.ada"
    ),
    fullyQualifiedName = ArrayOfRecords::ObjectArray,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `ArrayOfRecords::Object,
        theDiscreteSubTypes = 
          @List(`ArrayOfRecords::Index_Range)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
    global ArrayOfRecords::ObjectArray @@oArray @GlobalVarAnnotation(
    symbolEntry = @SymbolEntry(sparkID = "oArray",pilarSparkID = ArrayOfRecords::@@oArray,originTag = @PACKAGE_SPEC_PUBLIC,kindTag = @CONCRETE_VARIABLE),
    loc = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 19,
    theCol = 3,
    theOffset = 389),
    theEndCaret = 
    @Caret(
    theLine = 19,
    theCol = 9,
    theOffset = 394),
    theOptionalSource = "array_of_records_of_array.ada"
  )
  );
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Swap 
      (ArrayOfRecords::ObjectArray Q @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 18,
  theOffset = 431),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 19,
  theOffset = 431),
  theOptionalSource = "array_of_records_of_array.ada"
),
       ArrayOfRecords::Index_Range theIndex @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 21,
  theCol = 41,
  theOffset = 454),
  theEndCaret = 
  @Caret(
  theLine = 21,
  theCol = 49,
  theOffset = 461),
  theOptionalSource = "array_of_records_of_array.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_of_records_of_array.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(Q,
            theIndex),
      theOptionalOutParameters = @List(Q)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProcedureAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalPostCondition = 
        @NONE,
      theOptionalOutGlobals = @NONE,
      theOptionalDependencyRelation = 
        @DependencyRelation(
          theDependencyClauses = 
            @List(@DependencyClause(
              theDependencyClauseMembers = 
                @List(@DependencyClauseMember(
                  theOutVariable = 
                    @AnnotationVariable(
                      id = Q,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 22,
                          theCol = 15,
                          theOffset = 495),
                          theEndCaret = 
                          @Caret(
                          theLine = 22,
                          theCol = 16,
                          theOffset = 495),
                          theOptionalSource = "array_of_records_of_array.ada"
                        )
                    ),
                  theOptionalInVariables = 
                    @List(@AnnotationVariable(
                      id = Q,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 22,
                          theCol = 22,
                          theOffset = 502),
                          theEndCaret = 
                          @Caret(
                          theLine = 22,
                          theCol = 23,
                          theOffset = 502),
                          theOptionalSource = "array_of_records_of_array.ada"
                        )
                    ),
                          @AnnotationVariable(
                      id = theIndex,
                      loc =
                        @RegionSelection(
                          theStartCaret = 
                          @Caret(
                          theLine = 22,
                          theCol = 25,
                          theOffset = 505),
                          theEndCaret = 
                          @Caret(
                          theLine = 22,
                          theCol = 33,
                          theOffset = 512),
                          theOptionalSource = "array_of_records_of_array.ada"
                        )
                    ))
                )),
              theDependencyClauseRegionSelection = 
                @RegionSelection(
                  theStartCaret = 
                  @Caret(
                  theLine = 22,
                  theCol = 15,
                  theOffset = 495),
                  theEndCaret = 
                  @Caret(
                  theLine = 22,
                  theCol = 33,
                  theOffset = 512),
                  theOptionalSource = "array_of_records_of_array.ada"
                )
            )  ),
          theDependencyRelationRegionSelection = 
            @RegionSelection(
              theStartCaret = 
              @Caret(
              theLine = 22,
              theCol = 7,
              theOffset = 487),
              theEndCaret = 
              @Caret(
              theLine = 22,
              theCol = 34,
              theOffset = 513),
              theOptionalSource = "array_of_records_of_array.ada"
            )  
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 3,
      theOffset = 416),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 67,
      theOffset = 479),
      theOptionalSource = "array_of_records_of_array.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 13,
      theOffset = 426),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 17,
      theOffset = 429),
      theOptionalSource = "array_of_records_of_array.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 3,
      theOffset = 416),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 66,
      theOffset = 478),
      theOptionalSource = "array_of_records_of_array.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package ArrayOfRecords
@PackageAnnotation(
  theSourceFileName = "array_of_records_of_array.ada",
  theSparkName = ArrayOfRecords,
  thePilarSparkName = ArrayOfRecords,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 26,
  theCol = 1,
  theOffset = 537),
  theEndCaret = 
  @Caret(
  theLine = 43,
  theCol = 20,
  theOffset = 909),
  theOptionalSource = "array_of_records_of_array.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 26,
  theCol = 1,
  theOffset = 537),
  theEndCaret = 
  @Caret(
  theLine = 26,
  theCol = 28,
  theOffset = 563),
  theOptionalSource = "array_of_records_of_array.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure $$binit
 
{
  #l1. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l1,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 41,
      theCol = 3,
      theOffset = 841),
      theEndCaret = 
      @Caret(
      theLine = 41,
      theCol = 49,
      theOffset = 886),
      theOptionalSource = "array_of_records_of_array.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  ArrayOfRecords::@@oArray := `ArrayOfRecords::ObjectArray (
     
    {
      ArrayOfRecords::Index_Range iter0 => 
        switch iter0 
    | => (ArrayOfRecords::$Const.dummyObject)
    }
  );
  #locret. return;
}
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Swap 
      (ArrayOfRecords::ObjectArray Q @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 28,
  theCol = 19,
  theOffset = 587),
  theEndCaret = 
  @Caret(
  theLine = 28,
  theCol = 20,
  theOffset = 587),
  theOptionalSource = "array_of_records_of_array.ada"
),
       ArrayOfRecords::Index_Range theIndex @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 28,
  theCol = 42,
  theOffset = 610),
  theEndCaret = 
  @Caret(
  theLine = 28,
  theCol = 50,
  theOffset = 617),
  theOptionalSource = "array_of_records_of_array.ada"
))
@MethodAnnotation(
  theSourceFileName = "array_of_records_of_array.ada",
  theAdaMethodAnnotation = 
    @AdaProcedureAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(Q,
            theIndex),
      theOptionalOutParameters = @List(Q)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 28,
      theCol = 4,
      theOffset = 572),
      theEndCaret = 
      @Caret(
      theLine = 37,
      theCol = 13,
      theOffset = 827),
      theOptionalSource = "array_of_records_of_array.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 28,
      theCol = 14,
      theOffset = 582),
      theEndCaret = 
      @Caret(
      theLine = 28,
      theCol = 18,
      theOffset = 585),
      theOptionalSource = "array_of_records_of_array.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 28,
      theCol = 4,
      theOffset = 572),
      theEndCaret = 
      @Caret(
      theLine = 28,
      theCol = 67,
      theOffset = 634),
      theOptionalSource = "array_of_records_of_array.ada"
    )
) 
{

  local
    ArrayOfRecords::IntArray temp1 @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 29,
      theCol = 6,
      theOffset = 644),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 11,
      theOffset = 648),
      theOptionalSource = "array_of_records_of_array.ada"
    )
    );
    ArrayOfRecords::IntArray temp2 @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 30,
      theCol = 6,
      theOffset = 667),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 11,
      theOffset = 671),
      theOptionalSource = "array_of_records_of_array.ada"
    )
    );
    ArrayOfRecords::Index_Range temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    ArrayOfRecords::IntArray temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    ArrayOfRecords::Index_Range temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    ArrayOfRecords::IntArray temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    ArrayOfRecords::Index_Range temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    ArrayOfRecords::IntArray temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    ArrayOfRecords::Index_Range temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    ArrayOfRecords::IntArray temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l2.  temp$1 := theIndex;
  #l3.  temp$2 := Q [temp$1].x;
  #l4. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l2,
      endLabel = l4,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 6,
      theOffset = 699),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 29,
      theOffset = 721),
      theOptionalSource = "array_of_records_of_array.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  temp1 := temp$2;
  #l5.  temp$3 := theIndex;
  #l6.  temp$4 := Q [temp$3].y;
  #l7. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l5,
      endLabel = l7,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 33,
      theCol = 6,
      theOffset = 728),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 29,
      theOffset = 750),
      theOptionalSource = "array_of_records_of_array.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  temp2 := temp$4;
  #l8.  temp$5 := theIndex;
  #l9.  temp$6 := temp2;
  #l10. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l8,
      endLabel = l10,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 35,
      theCol = 6,
      theOffset = 763),
      theEndCaret = 
      @Caret(
      theLine = 35,
      theCol = 29,
      theOffset = 785),
      theOptionalSource = "array_of_records_of_array.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Q [temp$5].x := temp$6;
  #l11.  temp$7 := theIndex;
  #l12.  temp$8 := temp1;
  #l13. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l11,
      endLabel = l13,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 36,
      theCol = 6,
      theOffset = 792),
      theEndCaret = 
      @Caret(
      theLine = 36,
      theCol = 29,
      theOffset = 814),
      theOptionalSource = "array_of_records_of_array.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Q [temp$7].y := temp$8;
  #l14.  return;
}