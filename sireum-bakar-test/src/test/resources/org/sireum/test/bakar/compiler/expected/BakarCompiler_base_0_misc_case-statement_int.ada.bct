@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package case_statement
@PackageAnnotation(
  theSourceFileName = "case-statement_int.ada",
  theSparkName = case_statement,
  thePilarSparkName = case_statement,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 9,
  theCol = 20,
  theOffset = 226),
  theOptionalSource = "case-statement_int.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 23,
  theOffset = 21),
  theOptionalSource = "case-statement_int.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Activity
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 3,
      theCol = 3,
      theOffset = 28),
      theEndCaret = 
      @Caret(
      theLine = 3,
      theCol = 41,
      theOffset = 65),
      theOptionalSource = "case-statement_int.ada"
    ),
    fullyQualifiedName = case_statement::Activity,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = Work),
                @EnumerationValue(tag = Party),
                @EnumerationValue(tag = Drink))))
{}
record IntType
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 4,
      theCol = 3,
      theOffset = 69),
      theEndCaret = 
      @Caret(
      theLine = 4,
      theCol = 43,
      theOffset = 108),
      theOptionalSource = "case-statement_int.ada"
    ),
    fullyQualifiedName = case_statement::IntType,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = 3,
        lowerBound = 1)))
{}
record SixType
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 3,
      theOffset = 112),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 43,
      theOffset = 151),
      theOptionalSource = "case-statement_int.ada"
    ),
    fullyQualifiedName = case_statement::SixType,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = 6,
        lowerBound = 6)))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure case_statement::Activity isWorkDay 
      (Standard::Integer d @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 7,
  theCol = 23,
  theOffset = 177),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 24,
  theOffset = 177),
  theOptionalSource = "case-statement_int.ada"
))
@MethodAnnotation(
  theSourceFileName = "case-statement_int.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(d)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 157),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 52,
      theOffset = 205),
      theOptionalSource = "case-statement_int.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 12,
      theOffset = 166),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 21,
      theOffset = 174),
      theOptionalSource = "case-statement_int.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 157),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 51,
      theOffset = 204),
      theOptionalSource = "case-statement_int.ada"
    )
) 
{ #locret. return;}
procedure case_statement::Activity isWorkDay 
      (Standard::Integer d @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 7,
  theCol = 23,
  theOffset = 177),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 24,
  theOffset = 177),
  theOptionalSource = "case-statement_int.ada"
))
@MethodAnnotation(
  theSourceFileName = "case-statement_int.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(d)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 157),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 52,
      theOffset = 205),
      theOptionalSource = "case-statement_int.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 157),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 52,
      theOffset = 205),
      theOptionalSource = "case-statement_int.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 3,
      theOffset = 157),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 52,
      theOffset = 205),
      theOptionalSource = "case-statement_int.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package case_statement
@PackageAnnotation(
  theSourceFileName = "case-statement_int.ada",
  theSparkName = case_statement,
  thePilarSparkName = case_statement,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 1,
  theOffset = 229),
  theEndCaret = 
  @Caret(
  theLine = 35,
  theCol = 20,
  theOffset = 671),
  theOptionalSource = "case-statement_int.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 11,
  theCol = 1,
  theOffset = 229),
  theEndCaret = 
  @Caret(
  theLine = 11,
  theCol = 28,
  theOffset = 255),
  theOptionalSource = "case-statement_int.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure case_statement::Activity isWorkDay 
      (Standard::Integer d @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 23,
  theOffset = 283),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 24,
  theOffset = 283),
  theOptionalSource = "case-statement_int.ada"
))
@MethodAnnotation(
  theSourceFileName = "case-statement_int.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(d)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 3,
      theOffset = 263),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 648),
      theOptionalSource = "case-statement_int.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 12,
      theOffset = 272),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 21,
      theOffset = 280),
      theOptionalSource = "case-statement_int.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 3,
      theOffset = 263),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 51,
      theOffset = 310),
      theOptionalSource = "case-statement_int.ada"
    )
) 
{

  local
    case_statement::Activity ret @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 16,
      theCol = 5,
      theOffset = 321),
      theEndCaret = 
      @Caret(
      theLine = 16,
      theCol = 8,
      theOffset = 323),
      theOptionalSource = "case-statement_int.ada"
    )
    );
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    case_statement::Activity temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$12 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$13 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$14 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$15 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$16 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$17 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    case_statement::Activity temp$18 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$19 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$20 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$21 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$22 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$23 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    case_statement::Activity temp$24 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$25 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$26 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    case_statement::Activity temp$27 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    case_statement::Activity temp$28 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    case_statement::Activity temp$29 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := d;
  #l3.  temp$3 := (temp$1 >= $First(`case_statement::IntType));
  #l4.  temp$4 := (temp$1 <= $Last(`case_statement::IntType));
  #l5. <@RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 20,
    theCol = 12,
    theOffset = 371),
    theEndCaret = 
    @Caret(
    theLine = 20,
    theCol = 19,
    theOffset = 377),
    theOptionalSource = "case-statement_int.ada"
  )> temp$2 := temp$3 && temp$4 @Choice;
  #l6.  if !(temp$2) then goto l2; 
  #l7.  temp$5 := case_statement::Activity.Work;
  #l8. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l7,
      endLabel = l8,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 21,
      theCol = 9,
      theOffset = 390),
      theEndCaret = 
      @Caret(
      theLine = 21,
      theCol = 21,
      theOffset = 401),
      theOptionalSource = "case-statement_int.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  ret := temp$5;
  #l9.  goto l57;
  #l2. 
  #l27. temp$17 := false;
    #l11.  temp$6 := 5;
    #l12.  temp$7 := 4;
    #l13.  temp$9 := (temp$1 >= temp$7);
    #l14.  temp$10 := (temp$1 <= temp$6);
    #l15. <@RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 12,
      theOffset = 414),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 32,
      theOffset = 433),
      theOptionalSource = "case-statement_int.ada"
    )> temp$8 := temp$9 && temp$10 @Choice;
  #l28. <@RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 22,
    theCol = 12,
    theOffset = 414),
    theEndCaret = 
    @Caret(
    theLine = 22,
    theCol = 32,
    theOffset = 433),
    theOptionalSource = "case-statement_int.ada"
  )>  if (temp$8) then goto l32;
    #l21. temp$16 := false;
      #l16.  temp$12 := (temp$1 >= $First(`case_statement::SixType));
      #l17.  temp$13 := (temp$1 <= $Last(`case_statement::SixType));
      #l18. <@RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 22,
        theCol = 35,
        theOffset = 437),
        theEndCaret = 
        @Caret(
        theLine = 22,
        theCol = 42,
        theOffset = 443),
        theOptionalSource = "case-statement_int.ada"
      )> temp$11 := temp$12 && temp$13 @Choice;
    #l22. <@RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 35,
      theOffset = 437),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 42,
      theOffset = 443),
      theOptionalSource = "case-statement_int.ada"
    )>  if (temp$11) then goto l26;
      #l19.  temp$14 := 7;
      #l20. <@RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 22,
        theCol = 45,
        theOffset = 447),
        theEndCaret = 
        @Caret(
        theLine = 22,
        theCol = 46,
        theOffset = 447),
        theOptionalSource = "case-statement_int.ada"
      )>  temp$15 := (temp$1 == temp$14) @Choice;
    #l23. <@RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 22,
      theCol = 45,
      theOffset = 447),
      theEndCaret = 
      @Caret(
      theLine = 22,
      theCol = 46,
      theOffset = 447),
      theOptionalSource = "case-statement_int.ada"
    )>  if (!temp$15) then goto l25;
    #l26.
    #l24. temp$16 := true;
    #l25.
  #l29. <@RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 22,
    theCol = 35,
    theOffset = 437),
    theEndCaret = 
    @Caret(
    theLine = 22,
    theCol = 42,
    theOffset = 443),
    theOptionalSource = "case-statement_int.ada"
  )>  if (!temp$16) then goto l31;
  #l32.
  #l30. temp$17 := true;
  #l31.
  #l33.  if !(temp$17) then goto l10; 
  #l34.  temp$18 := case_statement::Activity.Party;
  #l35. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l34,
      endLabel = l35,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 23,
      theCol = 9,
      theOffset = 460),
      theEndCaret = 
      @Caret(
      theLine = 23,
      theCol = 22,
      theOffset = 472),
      theOptionalSource = "case-statement_int.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  ret := temp$18;
  #l36.  goto l57;
  #l10. 
  #l38.  temp$19 := 9;
  #l39.  temp$20 := 8;
  #l40.  temp$22 := (temp$1 >= temp$20);
  #l41.  temp$23 := (temp$1 <= temp$19);
  #l42. <@RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 24,
    theCol = 12,
    theOffset = 485),
    theEndCaret = 
    @Caret(
    theLine = 24,
    theCol = 18,
    theOffset = 490),
    theOptionalSource = "case-statement_int.ada"
  )> temp$21 := temp$22 && temp$23 @Choice;
  #l43.  if !(temp$21) then goto l37; 
  #l44.  temp$24 := case_statement::Activity.Party;
  #l45. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l44,
      endLabel = l45,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 25,
      theCol = 9,
      theOffset = 503),
      theEndCaret = 
      @Caret(
      theLine = 25,
      theCol = 22,
      theOffset = 515),
      theOptionalSource = "case-statement_int.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  ret := temp$24;
  #l46.  goto l57;
  #l37. 
  #l48.  temp$25 := 10;
  #l49. <@RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 26,
    theCol = 12,
    theOffset = 528),
    theEndCaret = 
    @Caret(
    theLine = 26,
    theCol = 14,
    theOffset = 529),
    theOptionalSource = "case-statement_int.ada"
  )>  temp$26 := (temp$1 == temp$25) @Choice;
  #l50.  if !(temp$26) then goto l47; 
  #l51.  temp$27 := case_statement::Activity.Work;
  #l52. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l51,
      endLabel = l52,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 27,
      theCol = 9,
      theOffset = 542),
      theEndCaret = 
      @Caret(
      theLine = 27,
      theCol = 21,
      theOffset = 553),
      theOptionalSource = "case-statement_int.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  ret := temp$27;
  #l53.  goto l57;
  #l47. 
  #l55.  temp$28 := case_statement::Activity.Drink;
  #l56. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l55,
      endLabel = l56,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 29,
      theCol = 9,
      theOffset = 585),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 22,
      theOffset = 597),
      theOptionalSource = "case-statement_int.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  ret := temp$28;
  #l57. <@CaseStatementAnnotation(
    caseStatementAlternatives = @List(@Pair(
    fst = @Mark(
    startLabel = l3,
    endLabel = l6,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 20,
    theCol = 7,
    theOffset = 366),
    theEndCaret = 
    @Caret(
    theLine = 20,
    theCol = 19,
    theOffset = 377),
    theOptionalSource = "case-statement_int.ada"
  )
  ), 
    snd = @MARK_PLACEHOLDER
  ),
        @Pair(
    fst = @Mark(
    startLabel = l11,
    endLabel = l33,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 22,
    theCol = 7,
    theOffset = 409),
    theEndCaret = 
    @Caret(
    theLine = 22,
    theCol = 46,
    theOffset = 447),
    theOptionalSource = "case-statement_int.ada"
  )
  ), 
    snd = @MARK_PLACEHOLDER
  ),
        @Pair(
    fst = @Mark(
    startLabel = l38,
    endLabel = l43,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 24,
    theCol = 7,
    theOffset = 480),
    theEndCaret = 
    @Caret(
    theLine = 24,
    theCol = 18,
    theOffset = 490),
    theOptionalSource = "case-statement_int.ada"
  )
  ), 
    snd = @MARK_PLACEHOLDER
  ),
        @Pair(
    fst = @Mark(
    startLabel = l48,
    endLabel = l50,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 26,
    theCol = 7,
    theOffset = 523),
    theEndCaret = 
    @Caret(
    theLine = 26,
    theCol = 14,
    theOffset = 529),
    theOptionalSource = "case-statement_int.ada"
  )
  ), 
    snd = @MARK_PLACEHOLDER
  )),
    optWhenOthers = @MARK_PLACEHOLDER,
      mark = @Mark(
      startLabel = l1,
      endLabel = l57,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 5,
      theOffset = 350),
      theEndCaret = 
      @Caret(
      theLine = 30,
      theCol = 14,
      theOffset = 612),
      theOptionalSource = "case-statement_int.ada"
    )
    ),
      optSparkLabelList = @NONE
  )                        > 
  #l58.  temp$29 := ret;
  #l59. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l58,
      endLabel = l59,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 32,
      theCol = 5,
      theOffset = 619),
      theEndCaret = 
      @Caret(
      theLine = 32,
      theCol = 16,
      theOffset = 629),
      theOptionalSource = "case-statement_int.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$29;
}
procedure case_statement::Activity isWorkDay 
      (Standard::Integer d @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 23,
  theOffset = 283),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 24,
  theOffset = 283),
  theOptionalSource = "case-statement_int.ada"
))
@MethodAnnotation(
  theSourceFileName = "case-statement_int.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(d)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 3,
      theOffset = 263),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 648),
      theOptionalSource = "case-statement_int.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 3,
      theOffset = 263),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 648),
      theOptionalSource = "case-statement_int.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 3,
      theOffset = 263),
      theEndCaret = 
      @Caret(
      theLine = 33,
      theCol = 17,
      theOffset = 648),
      theOptionalSource = "case-statement_int.ada"
    )
) 
{ #locret. return;}