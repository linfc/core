main(member) ::= <<
// This file is auto-generated by UPickler. Do not modify.
$member; separator="\n\n"$
>>

pickler(package, class, member) ::= <<
package $package$

object $class$Picklers {
  import upickle._
  implicit var $class$Pickler : ReadWriter[$class$] = null
  $member; separator="\n"$
}
>>

name(class) ::= <<
private val $class$Name = "$class$"
>>

leaf(class, wfield, rfield) ::= <<
implicit val $class$Pickler = ReadWriter[$class$](
  o => Js.Obj(("type", writeJs("$class$"))$if(wfield)$, $wfield; separator=", "$$endif$),
  { case Js.Obj(s@_*) =>
      val m = Map(s : _*) 
      $class$($rfield; separator=", "$) 
  }
)
>>

leafWriteField(name) ::= <<
("$name$", writeJs(o.$name$))
>>

leafReadField(type, name) ::= <<
readJs[$type$](m("$name$"))
>>

root(class, wfield, rfield) ::= <<
$class$Pickler = ReadWriter[$class$](
  _ match {
    $wfield; separator="\n"$
  },
  {
    case o @ Js.Obj(s@_*) =>
      readJs[String](s.find(_._1 == "type").get._2) match {
        $rfield; separator="\n"$
      }
  }
)
>>

rootWriteField(class) ::= <<
case o : $class$ => $class$Pickler.write(o)
>>

rootReadField(class) ::= <<
case `$class$Name` => $class$Pickler.read(o)
>>

leafPy(class, field, fieldAssign) ::= <<
def $class$($field; separator=", "$):
  o = {}
  $fieldAssign; separator="\n"$
  o['type'] = "$class$"
  return json.dumps(o)
>>

leafPyAssign(name) ::= <<
o['$name$'] = $name$
>>