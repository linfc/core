topLevel(packageName, imports, objectName, entry, converters) ::= <<
$if(packageName)$package $packageName$$endif$

import org.sireum.js._
$imports; separator="\n"$

object $objectName$ {  
  private def toScala(x : JsAny): Any = x
  
  private def toJs(x : Double): JsAny = x
  private def toJs(x : Float): JsAny = x
  private def toJs(x : Long): JsAny = x
  private def toJs(x : Int): JsAny = x
  private def toJs(x : Short): JsAny = x
  private def toJs(x : Byte): JsAny = x
  private def toJs(x : Char): JsAny = x
  private def toJs(x : Boolean): JsAny = x
  private def toJs(x : Unit): JsAny = x
  private def toJs(x : String): JsAny = x
  
  $entry; separator="\n\n"$
  
  $converters; separator="\n\n"$
}
>>

converterObj(type, toJs, toScala) ::= <<
implicit object `Convert $type$` extends JsConvertable[$type$] {
  def to(x : $type$): JsAny = {
    return $toJs$(x)
  }

  def from(x : JsAny): $type$ = {
    return $toScala$(x)
  }
}
>>

assignToDict(paramName, toFunc) ::= <<
  out("$paramName$") = $toFunc$(input.$paramName$)
>>

assignFromDict(dict, object, paramName, type, toFunc) ::= <<
  $paramName$ = $toFunc$(dict("$paramName$")).asInstanceOf[$type$]
>>

toScalaName(type, id) ::= <<
`toScala $type$$id$`
>>

toJsName(type, id) ::= <<
`toJs $type$$id$`
>>

toJs(className, params, name) ::= <<
private def $name$(input : $className$): JsAny = {
  val out = obj().asInstanceOf[JsDictionary[JsAny]]
  $params; separator="\n"$
  out
}
>>

toScala(className, args, name) ::= <<
private def $name$(input : JsAny): $className$ = {
  val dict = input.asInstanceOf[JsDictionary[JsAny]]
  new $className$($args; separator=","$)
}
>>

fromVecToJs(className, name, toFunc) ::= <<
private def $name$(input : Seq[$className$]): JsAny = {
   input.foldLeft (new JsArray[JsAny]()) { (acc, elem) => {
       acc :+ $toFunc$(elem)
     }
   }
}
>>

toScalaVec(className, elementType, name, toFunc) ::= <<
private def $name$(input : JsAny): Seq[$className$] = {
  val arr = input.asInstanceOf[JsArray[JsAny]]
  var out = Vector[$className$]()
  arr foreach { x =>
    out = out :+ $toFunc$(x).asInstanceOf[$className$]
  }
  out
}
>>

fromMapToJs(keyClassName, valueClassName, name, toFunc1, toFunc2) ::= <<
private def $name$(input : Map[$keyClassName$, $valueClassName$]): JsAny = {
  val out = obj().asInstanceOf[JsDictionary[JsAny]]
  for(x <- input) {
    out($toFunc1$(x._1).toString()) = $toFunc2$(x._2)
  }
  out
}
>>

toScalaMap(keyClassName, valueClassName, name, toFunc1, toFunc2) ::= <<
private def $name$(input : JsAny): Map[$keyClassName$, $valueClassName$] = {
  val dict = input.asInstanceOf[JsDictionary[JsAny]]
  var out = Map[$keyClassName$, $valueClassName$]()
  dict foreach { (x : (String, JsAny)) =>
    out = out + ($toFunc1$(x._1).asInstanceOf[$keyClassName$] -> $toFunc2$(x._2).asInstanceOf[$valueClassName$])
  }
  out
}
>>