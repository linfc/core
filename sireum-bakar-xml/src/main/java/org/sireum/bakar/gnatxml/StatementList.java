//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.12.06 at 08:46:22 AM CST 
//


package org.sireum.bakar.gnatxml;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Statement_List complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Statement_List">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded" minOccurs="0">
 *         &lt;element name="not_an_element" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="null_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="assignment_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="if_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="case_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="loop_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="while_loop_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="for_loop_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="block_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="exit_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="goto_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="procedure_call_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="return_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="extended_return_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="accept_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="entry_call_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="requeue_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="requeue_statement_with_abort" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="delay_until_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="delay_relative_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="terminate_alternative_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="selective_accept_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="timed_entry_call_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="conditional_entry_call_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="asynchronous_select_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="abort_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="raise_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;element name="code_statement" type="{http://www.w3.org/2001/XMLSchema}anyType"/>
 *         &lt;group ref="{}pragmas_group"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Statement_List", propOrder = {
    "notAnElementOrNullStatementOrAssignmentStatement"
})
public class StatementList {

    @XmlElementRefs({
        @XmlElementRef(name = "interrupt_handler_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "asynchronous_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "inline_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "no_return_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "requeue_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "null_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "restrictions_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "discard_names_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "suppress_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "task_dispatching_policy_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "inspection_point_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "return_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "preelaborate_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "default_storage_pool_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "delay_until_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "partition_elaboration_policy_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "extended_return_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "terminate_alternative_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "delay_relative_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "atomic_components_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "accept_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "import_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "detect_blocking_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "page_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "elaborate_all_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "block_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "conditional_entry_call_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "procedure_call_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "priority_specific_dispatching_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "volatile_components_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "independent_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "pack_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "relative_deadline_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "atomic_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "independent_components_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "locking_policy_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "implementation_defined_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "unsuppress_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "entry_call_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "case_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "elaborate_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "export_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "abort_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "dispatching_domain_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "queuing_policy_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "asynchronous_select_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "volatile_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "assert_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "if_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "priority_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "assignment_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "all_calls_remote_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "reviewable_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "remote_types_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "elaborate_body_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "code_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "while_loop_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "exit_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "normalize_scalars_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "raise_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "preelaborable_initialization_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "assertion_policy_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "controlled_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "convention_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "remote_call_interface_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "pure_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "selective_accept_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "linker_options_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "list_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "profile_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "loop_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "storage_size_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "not_an_element", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "requeue_statement_with_abort", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "shared_passive_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "cpu_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "attach_handler_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "optimize_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "interrupt_priority_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "unknown_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "timed_entry_call_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "goto_statement", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "unchecked_union_pragma", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "for_loop_statement", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<Object>> notAnElementOrNullStatementOrAssignmentStatement;

    /**
     * Gets the value of the notAnElementOrNullStatementOrAssignmentStatement property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the notAnElementOrNullStatementOrAssignmentStatement property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNotAnElementOrNullStatementOrAssignmentStatement().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * 
     */
    public List<JAXBElement<Object>> getNotAnElementOrNullStatementOrAssignmentStatement() {
        if (notAnElementOrNullStatementOrAssignmentStatement == null) {
            notAnElementOrNullStatementOrAssignmentStatement = new ArrayList<JAXBElement<Object>>();
        }
        return this.notAnElementOrNullStatementOrAssignmentStatement;
    }

}
