@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package P
@PackageAnnotation(
  theSourceFileName = "test.ada",
  theSparkName = P,
  thePilarSparkName = P,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 1,
  theOffset = 285),
  theEndCaret = 
  @Caret(
  theLine = 31,
  theCol = 7,
  theOffset = 779),
  theOptionalSource = "test.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 12,
  theCol = 1,
  theOffset = 285),
  theEndCaret = 
  @Caret(
  theLine = 12,
  theCol = 15,
  theOffset = 298),
  theOptionalSource = "test.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Boolean Value_Present 
      (P::AType A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 28,
  theOffset = 332),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 29,
  theOffset = 332),
  theOptionalSource = "test.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 38,
  theOffset = 342),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 39,
  theOffset = 342),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 308),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 22,
      theOffset = 769),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 13,
      theOffset = 317),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 26,
      theOffset = 329),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 308),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 65,
      theOffset = 368),
      theOptionalSource = "test.ada"
    )
) 
{

  local
    Standard::Boolean Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 16,
      theCol = 7,
      theOffset = 384),
      theEndCaret = 
      @Caret(
      theLine = 16,
      theCol = 13,
      theOffset = 389),
      theOptionalSource = "test.ada"
    )
    );
    Standard::Boolean temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    P::Index I @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    P::Index temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    P::Index temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    P::Index temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$7 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$8 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$9 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    P::Index temp$10 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$11 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := false;
  #l2. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l1,
      endLabel = l2,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 18,
      theCol = 7,
      theOffset = 419),
      theEndCaret = 
      @Caret(
      theLine = 18,
      theCol = 23,
      theOffset = 434),
      theOptionalSource = "test.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Result := temp$1;
    #l5.  temp$2 := $First(`P::Index);
    #l6.  temp$3 := $Last(`P::Index);
    #l7.  if (temp$2 > temp$3) then goto l4;
    #l8.  I := temp$2;
    #l3. 
    #l9.  temp$4 := I;
    #l10.  temp$5 := A [temp$4];
    #l11.  temp$6 := X;
    #l12.  temp$7 := (temp$5 == temp$6);
    #l13.  if !(temp$7) then goto l14; 
    #l15.  temp$8 := true;
    #l16. <@AssignmentStatementAnnotation(
        mark = @Mark(
        startLabel = l15,
        endLabel = l16,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 21,
        theCol = 13,
        theOffset = 503),
        theEndCaret = 
        @Caret(
        theLine = 21,
        theCol = 28,
        theOffset = 517),
        theOptionalSource = "test.ada"
      )
      ),
        optSparkLabelList = @NONE 
    )>  Result := temp$8;
    #l17. <@ExitStatementAnnotation(
      hasWhen = false,
        mark = @Mark(
        startLabel = l17,
        endLabel = l17,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 22,
        theCol = 13,
        theOffset = 532),
        theEndCaret = 
        @Caret(
        theLine = 22,
        theCol = 18,
        theOffset = 536),
        theOptionalSource = "test.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  goto l4;
    #l18.  goto l19;
    #l14. 
    #l19. <@IfStatementAnnotation(
      ifPart = @Mark(
      startLabel = l9,
      endLabel = l13,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 20,
      theCol = 10,
      theOffset = 473),
      theEndCaret = 
      @Caret(
      theLine = 20,
      theCol = 21,
      theOffset = 483),
      theOptionalSource = "test.ada"
    )
    ),
      thenPart= @MARK_PLACEHOLDER,
      optElsIfParts = @NONE,
      optElsePart = @NONE,
        mark = @Mark(
        startLabel = l9,
        endLabel = l19,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 20,
        theCol = 10,
        theOffset = 473),
        theEndCaret = 
        @Caret(
        theLine = 23,
        theCol = 17,
        theOffset = 554),
        theOptionalSource = "test.ada"
      )
      ),
        optSparkLabelList = @NONE  
    )> 
    #l20. <@AssertStatementAnnotation(
        mark = @Mark(
        startLabel = l20,
        endLabel = l20,
        optRS = @RegionSelection(
        theStartCaret = 
        @Caret(
        theLine = 24,
        theCol = 14,
        theOffset = 570),
        theEndCaret = 
        @Caret(
        theLine = 26,
        theCol = 80,
        theOffset = 707),
        theOptionalSource = "test.ada"
      )
      ),
        optSparkLabelList = @NONE
    )>  assert $AND($AND(((I >= $First(`P::Index)) && (I <= $Last(`P::Index))),!(Result)),$FOR_ALL {P::Index M => 
      switch M
        | ($First(`P::Index), I) => (A [M] != X)
        | => true}) ;
    #l21.  temp$9 := (I == temp$3);
    #l22.  if temp$9 then goto l4;
    #l23.  temp$10 := I + 1;
    #l24.  I := temp$10;
    #l25.  goto l3;
    #l4. <@ForLoopStatementAnnotation(
      sparkIterVarID = I,
      pilarIterVarID = I,
      initPart = @Mark(
      startLabel = l5,
      endLabel = l8,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 19,
      theCol = 7,
      theOffset = 443),
      theEndCaret = 
      @Caret(
      theLine = 19,
      theCol = 26,
      theOffset = 461),
      theOptionalSource = "test.ada"
    )
    ),
      isRev = false,
        optLoopId = @NONE,
        body = @MARK_PLACEHOLDER,
          mark = @Mark(
          startLabel = l5,
          endLabel = l4,
          optRS = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 19,
          theCol = 7,
          theOffset = 443),
          theEndCaret = 
          @Caret(
          theLine = 27,
          theCol = 16,
          theOffset = 724),
          theOptionalSource = "test.ada"
        )
        ),
          optSparkLabelList = @NONE  
    )> 
  #l26.  temp$11 := Result;
  #l27. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l26,
      endLabel = l27,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 28,
      theCol = 7,
      theOffset = 733),
      theEndCaret = 
      @Caret(
      theLine = 28,
      theCol = 21,
      theOffset = 746),
      theOptionalSource = "test.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$11;
}
procedure Standard::Boolean Value_Present 
      (P::AType A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 28,
  theOffset = 332),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 29,
  theOffset = 332),
  theOptionalSource = "test.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 14,
  theCol = 38,
  theOffset = 342),
  theEndCaret = 
  @Caret(
  theLine = 14,
  theCol = 39,
  theOffset = 342),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(A,
            X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 308),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 22,
      theOffset = 769),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 308),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 22,
      theOffset = 769),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 4,
      theOffset = 308),
      theEndCaret = 
      @Caret(
      theLine = 29,
      theCol = 22,
      theOffset = 769),
      theOptionalSource = "test.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package P
@PackageAnnotation(
  theSourceFileName = "test.ada",
  theSparkName = P,
  thePilarSparkName = P,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 1,
  theOffset = 51),
  theEndCaret = 
  @Caret(
  theLine = 10,
  theCol = 7,
  theOffset = 280),
  theOptionalSource = "test.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 1,
  theOffset = 51),
  theEndCaret = 
  @Caret(
  theLine = 2,
  theCol = 10,
  theOffset = 59),
  theOptionalSource = "test.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Index
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 4,
      theCol = 4,
      theOffset = 69),
      theEndCaret = 
      @Caret(
      theLine = 4,
      theCol = 43,
      theOffset = 107),
      theOptionalSource = "test.ada"
    ),
    fullyQualifiedName = P::Index,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = 10,
        lowerBound = 1)))
{}
record AType
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 5,
      theCol = 4,
      theOffset = 113),
      theEndCaret = 
      @Caret(
      theLine = 5,
      theCol = 43,
      theOffset = 151),
      theOptionalSource = "test.ada"
    ),
    fullyQualifiedName = P::AType,
    typeDefinition = 
      @ConstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Integer,
        theDiscreteSubTypes = 
          @List(`P::Index)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Boolean Value_Present 
      (P::AType A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 7,
  theCol = 28,
  theOffset = 183),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 29,
  theOffset = 183),
  theOptionalSource = "test.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 7,
  theCol = 38,
  theOffset = 193),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 39,
  theOffset = 193),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A,
            X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @FunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      theOptionalReturnAnnotation = 
        @ContractPredicate(
          theType = @RETURN,
          theExp = {Standard::Boolean __implicit_result_id => (__implicit_result_id == $EXISTS {P::Index M => 
          switch M
            | ($First(`P::Index), $Last(`P::Index)) => (A [M] == X)
            | => true})},
          theLoc = @RegionSelection(
          theStartCaret = 
          @Caret(
          theLine = 8,
          theCol = 8,
          theOffset = 230),
          theEndCaret = 
          @Caret(
          theLine = 8,
          theCol = 49,
          theOffset = 270),
          theOptionalSource = "test.ada"
        )
        )
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 159),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 66,
      theOffset = 220),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 13,
      theOffset = 168),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 26,
      theOffset = 180),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 159),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 65,
      theOffset = 219),
      theOptionalSource = "test.ada"
    )
) 
{ #locret. return;}
procedure Standard::Boolean Value_Present 
      (P::AType A @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 7,
  theCol = 28,
  theOffset = 183),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 29,
  theOffset = 183),
  theOptionalSource = "test.ada"
),
       Standard::Integer X @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 7,
  theCol = 38,
  theOffset = 193),
  theEndCaret = 
  @Caret(
  theLine = 7,
  theCol = 39,
  theOffset = 193),
  theOptionalSource = "test.ada"
))
@MethodAnnotation(
  theSourceFileName = "test.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(A,
            X)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 159),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 66,
      theOffset = 220),
      theOptionalSource = "test.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 159),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 66,
      theOffset = 220),
      theOptionalSource = "test.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 4,
      theOffset = 159),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 66,
      theOffset = 220),
      theOptionalSource = "test.ada"
    )
) 
{ #locret. return;}