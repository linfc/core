@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package P
@PackageAnnotation(
  theSourceFileName = "ex0303b.ada",
  theSparkName = P,
  thePilarSparkName = P,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 3,
  theCol = 7,
  theOffset = 67),
  theOptionalSource = "ex0303b.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 1,
  theCol = 1,
  theOffset = 0),
  theEndCaret = 
  @Caret(
  theLine = 1,
  theCol = 10,
  theOffset = 8),
  theOptionalSource = "ex0303b.ada"
),
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
procedure Standard::Integer Max 
      (Standard::Integer I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 17,
  theOffset = 30),
  theEndCaret = 
  @Caret(
  theLine = 2,
  theCol = 18,
  theOffset = 30),
  theOptionalSource = "ex0303b.ada"
),
       Standard::Integer J @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 19,
  theOffset = 32),
  theEndCaret = 
  @Caret(
  theLine = 2,
  theCol = 20,
  theOffset = 32),
  theOptionalSource = "ex0303b.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0303b.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(I,
            J)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 4,
      theOffset = 17),
      theEndCaret = 
      @Caret(
      theLine = 2,
      theCol = 47,
      theOffset = 59),
      theOptionalSource = "ex0303b.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 13,
      theOffset = 26),
      theEndCaret = 
      @Caret(
      theLine = 2,
      theCol = 16,
      theOffset = 28),
      theOptionalSource = "ex0303b.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 4,
      theOffset = 17),
      theEndCaret = 
      @Caret(
      theLine = 2,
      theCol = 46,
      theOffset = 58),
      theOptionalSource = "ex0303b.ada"
    )
) 
{ #locret. return;}
procedure Standard::Integer Max 
      (Standard::Integer I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 17,
  theOffset = 30),
  theEndCaret = 
  @Caret(
  theLine = 2,
  theCol = 18,
  theOffset = 30),
  theOptionalSource = "ex0303b.ada"
),
       Standard::Integer J @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 2,
  theCol = 19,
  theOffset = 32),
  theEndCaret = 
  @Caret(
  theLine = 2,
  theCol = 20,
  theOffset = 32),
  theOptionalSource = "ex0303b.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0303b.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_SPEC_PUBLIC,
      theOptionalInParameters = @List(I,
            J)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 4,
      theOffset = 17),
      theEndCaret = 
      @Caret(
      theLine = 2,
      theCol = 47,
      theOffset = 59),
      theOptionalSource = "ex0303b.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 4,
      theOffset = 17),
      theEndCaret = 
      @Caret(
      theLine = 2,
      theCol = 47,
      theOffset = 59),
      theOptionalSource = "ex0303b.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 2,
      theCol = 4,
      theOffset = 17),
      theEndCaret = 
      @Caret(
      theLine = 2,
      theCol = 47,
      theOffset = 59),
      theOptionalSource = "ex0303b.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   B o d yM e t a d a t a
 ****************************************************************/
package P
@PackageAnnotation(
  theSourceFileName = "ex0303b.ada",
  theSparkName = P,
  thePilarSparkName = P,
  theOptionalParent = @NONE,
  thePackageKind = @BODY,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 1,
  theOffset = 72),
  theEndCaret = 
  @Caret(
  theLine = 16,
  theCol = 7,
  theOffset = 310),
  theOptionalSource = "ex0303b.ada"
),
  thePackageHeaderSelection = @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 5,
  theCol = 1,
  theOffset = 72),
  theEndCaret = 
  @Caret(
  theLine = 5,
  theCol = 15,
  theOffset = 85),
  theOptionalSource = "ex0303b.ada"
),
  thePackageHeaderAnnotation = @PackageBodyHeaderAnnotation(
    theOptionalContextClause = @NONE  ,
  theOptionalRefinementDefinition = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/
/****************************************************************
 *  P r o c e d u r e s / F u n c t i o n s
 ****************************************************************/
procedure Standard::Integer Max 
      (Standard::Integer I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 17,
  theOffset = 107),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 18,
  theOffset = 107),
  theOptionalSource = "ex0303b.ada"
),
       Standard::Integer J @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 19,
  theOffset = 109),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 20,
  theOffset = 109),
  theOptionalSource = "ex0303b.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0303b.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(I,
            J)
    ),
  theOptionalSPARKMethodAnnotation = 
    @NONE,
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 94),
      theEndCaret = 
      @Caret(
      theLine = 15,
      theCol = 12,
      theOffset = 302),
      theOptionalSource = "ex0303b.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 13,
      theOffset = 103),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 16,
      theOffset = 105),
      theOptionalSource = "ex0303b.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 94),
      theEndCaret = 
      @Caret(
      theLine = 6,
      theCol = 46,
      theOffset = 135),
      theOptionalSource = "ex0303b.ada"
    )
) 
{

  local
    Standard::Integer Result @LocalVarDeclarationAnnotation(
      theKind = @CONCRETE_VARIABLE,
      theOptionalLoc = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 7,
      theCol = 7,
      theOffset = 147),
      theEndCaret = 
      @Caret(
      theLine = 7,
      theCol = 13,
      theOffset = 152),
      theOptionalSource = "ex0303b.ada"
    )
    );
    Standard::Integer temp$1 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$2 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Boolean temp$3 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$4 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$5 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
    Standard::Integer temp$6 @LocalVarDeclarationAnnotation(
      theKind = @TEMPORARY_VARIABLE,
      theOptionalLoc = @NONE
    );
  #l1.  temp$1 := I;
  #l2.  temp$2 := J;
  #l3.  temp$3 := (temp$1 > temp$2);
  #l4.  if !(temp$3) then goto l5; 
  #l6.  temp$4 := I;
  #l7. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l6,
      endLabel = l7,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 10,
      theCol = 10,
      theOffset = 206),
      theEndCaret = 
      @Caret(
      theLine = 10,
      theCol = 22,
      theOffset = 217),
      theOptionalSource = "ex0303b.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Result := temp$4;
  #l8.  goto l11;
  #l5. 
  #l9.  temp$5 := J;
  #l10. <@AssignmentStatementAnnotation(
      mark = @Mark(
      startLabel = l9,
      endLabel = l10,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 12,
      theCol = 10,
      theOffset = 241),
      theEndCaret = 
      @Caret(
      theLine = 12,
      theCol = 22,
      theOffset = 252),
      theOptionalSource = "ex0303b.ada"
    )
    ),
      optSparkLabelList = @NONE 
  )>  Result := temp$5;
  #l11. <@IfStatementAnnotation(
    ifPart = @Mark(
    startLabel = l1,
    endLabel = l4,
    optRS = @RegionSelection(
    theStartCaret = 
    @Caret(
    theLine = 9,
    theCol = 7,
    theOffset = 182),
    theEndCaret = 
    @Caret(
    theLine = 9,
    theCol = 15,
    theOffset = 189),
    theOptionalSource = "ex0303b.ada"
  )
  ),
    thenPart= @MARK_PLACEHOLDER,
    optElsIfParts = @NONE,
    optElsePart = @MARK_PLACEHOLDER,
      mark = @Mark(
      startLabel = l1,
      endLabel = l11,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 9,
      theCol = 7,
      theOffset = 182),
      theEndCaret = 
      @Caret(
      theLine = 13,
      theCol = 14,
      theOffset = 267),
      theOptionalSource = "ex0303b.ada"
    )
    ),
      optSparkLabelList = @NONE  
  )> 
  #l12.  temp$6 := Result;
  #l13. <@ReturnStatementAnnotation(
      mark = @Mark(
      startLabel = l12,
      endLabel = l13,
      optRS = @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 14,
      theCol = 7,
      theOffset = 276),
      theEndCaret = 
      @Caret(
      theLine = 14,
      theCol = 21,
      theOffset = 289),
      theOptionalSource = "ex0303b.ada"
    )
    ),
      optSparkLabelList = @NONE
  )>  return temp$6;
}
procedure Standard::Integer Max 
      (Standard::Integer I @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 17,
  theOffset = 107),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 18,
  theOffset = 107),
  theOptionalSource = "ex0303b.ada"
),
       Standard::Integer J @RegionSelection(
  theStartCaret = 
  @Caret(
  theLine = 6,
  theCol = 19,
  theOffset = 109),
  theEndCaret = 
  @Caret(
  theLine = 6,
  theCol = 20,
  theOffset = 109),
  theOptionalSource = "ex0303b.ada"
))
@MethodAnnotation(
  theSourceFileName = "ex0303b.ada",
  theAdaMethodAnnotation = 
    @AdaFunctionAnnotation(
      theOrigin = @PACKAGE_BODY,
      theOptionalInParameters = @List(I,
            J)
    ),
  theOptionalSPARKMethodAnnotation = 
    @ProofFunctionAnnotation(
      theOptionalPreCondition = 
        @NONE,
      theOptionalGlobalDefinitions = 
        @NONE,
      theOptionalGlobalDefinitionsSelection = 
        @NONE,
      theOptionalInGlobals = @NONE,
      isImplicit = true
    ),
  theMethodSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 94),
      theEndCaret = 
      @Caret(
      theLine = 15,
      theCol = 12,
      theOffset = 302),
      theOptionalSource = "ex0303b.ada"
    ),
  theMethodNameSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 94),
      theEndCaret = 
      @Caret(
      theLine = 15,
      theCol = 12,
      theOffset = 302),
      theOptionalSource = "ex0303b.ada"
    ),
  theMethodSpecificationSelection = 
    @RegionSelection(
      theStartCaret = 
      @Caret(
      theLine = 6,
      theCol = 4,
      theOffset = 94),
      theEndCaret = 
      @Caret(
      theLine = 15,
      theCol = 12,
      theOffset = 302),
      theOptionalSource = "ex0303b.ada"
    )
) 
{ #locret. return;}@Profile org::sireum::profile::spark
/****************************************************************
 *  C o m p i l e r   M e t a d a t a
 ****************************************************************/

@SPARKCompilerMetaDataFile(
  version = "1.0",
  compileTime = "REGRESSION_SUPPRESSED",
  options = 
    @EmptyList)
/****************************************************************
 *  S P A R K   P a c k a g e   S p e cM e t a d a t a
 ****************************************************************/
package Standard
@PackageAnnotation(
  theSourceFileName = "StandardPackage.java",
  theSparkName = Standard,
  thePilarSparkName = Standard,
  theOptionalParent = @NONE,
  thePackageKind = @SPECIFICATION,
  theHierarchyType = @ROOT,
  theOptionalSymbolMapping = @NONE,
  thePackageSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderSelection = @EMPTY_REGION_SELECTION,
  thePackageHeaderAnnotation = @PackageSpecificationHeaderAnnotation(
    theOptionalContextClause = @NONE  ,  
  theOptionalPackageSpecificationAnnotation = 
    @NONE,
  theOptionalInheritClause = 
    @NONE
));

/****************************************************************
 *  T y p e   D e c l a r a t i o n s
 ****************************************************************/
record Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Natural
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Natural,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 0)))
{}
record Positive
  @SubTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Positive,
    type = `Standard::Integer,
    constraint = 
  @Some(@SimpleRangeConstraint(
        upperBound = $Last(`Standard::Integer),
        lowerBound = 1)))
{}
record Long_Integer
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Long_Integer,
    typeDefinition = 
      @SignedIntegerTypeDefinition(
        theLowRangeExp = $NEG_INFTY (),
        theHighRangeExp = $POS_INFTY ()))
{}
record Float
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Float,
    typeDefinition = 
      @FloatingPointDefinition(
        theDigitsExp = $UNDEFINED (),
        theOptionalLowRangeExp = $NEG_INFTY (),
        theOptionalHighRangeExp = $POS_INFTY ()))
{}
record Boolean
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Boolean,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @List(@EnumerationValue(tag = False),
                @EnumerationValue(tag = True))))
{}
record Character
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::Character,
    typeDefinition = 
      @EnumerationTypeDefinition(
        enumerationValues = 
          @EmptyList))
{}
record String
  @FullTypeDeclaration(
    origin = @PACKAGE_SPEC_PUBLIC,
    loc = @EMPTY_REGION_SELECTION,
    fullyQualifiedName = Standard::String,
    typeDefinition = 
      @UnconstrainedArrayDefinition(
        theDimensions = 
          1,
        theComponentSubType = 
          `Standard::Character,
        theIndexSubTypes = 
          @List(`Standard::Positive)
      ))
{}
/****************************************************************
 *  G l o b a l   D e c l a r a t i o n s
 ****************************************************************/
  
/****************************************************************
 *  I n i t i a l i z a t i o n   P r o c e d u r e
 ****************************************************************/